<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pharos.Utility</name>
    </assembly>
    <members>
        <member name="T:Pharos.Utility.Arithmetic">
            <summary>
            常规算法或运算
            </summary>
        </member>
        <member name="M:Pharos.Utility.Arithmetic.GetCeiling(System.Double,System.Double)">
            <summary>
            两数相除得数 进一法 [常用于分页]
            </summary>
            <param name="TotalRecord">总记录数</param>
            <param name="PageSize">每页显示N行</param>
            <returns>返回总有X页</returns>
        </member>
        <member name="M:Pharos.Utility.Arithmetic.GetRandom(System.Byte)">
            <summary>
            随机产生一组指定长度的不重复数
            </summary>
            <param name="length">指定长度</param>
            <returns>返回一组不重复数</returns>
        </member>
        <member name="M:Pharos.Utility.Arithmetic.GetRandom(System.String,System.Byte,System.Byte)">
            <summary>
            根据提供的字符随机产生 N 组指定长度的不重复数
            </summary>
            <param name="strSource">自定义的字符源</param>
            <param name="length">指定长度</param>
            <param name="group">需产生 N 组</param>
            <returns>返回不重复数组</returns>
        </member>
        <member name="T:Pharos.Utility.BaseEntity">
            <summary>
            Base class for entities
            </summary>
        </member>
        <member name="P:Pharos.Utility.BaseEntity.Id">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="T:Pharos.Utility.Caching.ICacheManager">
            <summary>
            Cache manager interface
            </summary>
        </member>
        <member name="M:Pharos.Utility.Caching.ICacheManager.Get``1(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Pharos.Utility.Caching.ICacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache.
            </summary>
            <param name="key">key</param>
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
        </member>
        <member name="M:Pharos.Utility.Caching.ICacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">key</param>
            <returns>Result</returns>
        </member>
        <member name="M:Pharos.Utility.Caching.ICacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">/key</param>
        </member>
        <member name="M:Pharos.Utility.Caching.ICacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by pattern
            </summary>
            <param name="pattern">pattern</param>
        </member>
        <member name="M:Pharos.Utility.Caching.ICacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="T:Pharos.Utility.Config">
            <summary>
            Web.Config 引擎
            </summary>
        </member>
        <member name="M:Pharos.Utility.Config.GetAppSettings(System.String,System.String)">
            <summary>
            获取Web.Config配置指定的节点名称
            </summary>
            <param name="elementName">AppSettings中的配置节名称</param>
            <param name="propName">属性名称</param>
        </member>
        <member name="M:Pharos.Utility.Config.GetConnectionStrings(System.String)">
            <summary>
            获取Web.Config配置指定的节点名称
            </summary>
            <param name="elementName">ConnectionStrings中的配置节名称</param>
        </member>
        <member name="M:Pharos.Utility.Config.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pharos.Utility.Config.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="configFilePath">Config 配置文件路径</param>
        </member>
        <member name="M:Pharos.Utility.Config.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:Pharos.Utility.Config.SetAppSettings(System.String,System.String)">
            <summary>
            设置appSettings节点
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pharos.Utility.Config.RemoveAppSettings(System.String)">
            <summary>
            移除appSettings节点
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.Config.SetConnectionStrings(System.String,System.String)">
            <summary>
            设置connectionStrings节点
            </summary>
            <param name="key">键</param>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:Pharos.Utility.Config.RemoveConnectionStrings(System.String)">
            <summary>
            移除connectionStrings节点
            </summary>
            <param name="key">键</param>
        </member>
        <member name="P:Pharos.Utility.Config.DefaultConnectionString">
            <summary>
            获取Web.Config配置中的 ConnectionString 节点
            </summary>
        </member>
        <member name="T:Pharos.Utility.Conver">
            <summary>
            常规转换
            </summary>
        </member>
        <member name="M:Pharos.Utility.Conver.ToByteForFile(System.Web.UI.WebControls.FileUpload)">
            <summary>
            将上传文件转换为流
            </summary>
            <param name="file">HtmlInputFile 控件名称</param>
            <returns>返回流</returns>
        </member>
        <member name="M:Pharos.Utility.Conver.ToByteForFile(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            将上传文件转换为流
            </summary>
            <param name="file">HtmlInputFile 控件名称</param>
            <returns>返回流</returns>
        </member>
        <member name="M:Pharos.Utility.Conver.ToValidUrl(System.String)">
            <summary>
            将URL中的限定字符转为可识别的URL
            
            <![CDATA[
            
            如：将 # 号转换为 %23，\ 转为 /
            
            ]]>
            </summary>
            <param name="url">要转换的URL</param>
            <returns>返回可识别的URL</returns>
        </member>
        <member name="M:Pharos.Utility.Conver.ToValidPath(System.String)">
            <summary>
            将Path中的限定字符转为可识别的Path
            
            <![CDATA[
            
            如：将 D:\a/b\c 转为 D:\a\b\c
            
            ]]>
            </summary>
            <param name="url">要转换的URL</param>
            <returns>返回可识别的URL</returns>
        </member>
        <member name="M:Pharos.Utility.Conver.UrlEncode(System.String,Pharos.Utility.Conver.EncodeType)">
            <summary>
            UTF-8 与 GB2312 编码互转
            </summary>
            <param name="content">要转换的内容</param>
            <param name="outType">要输出的编码类型（枚举）</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ToUrlDecode(System.String)">
            <summary>
            对 UrlEncode 进行解码
            </summary>
            <param name="content">编码后的内容</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ToUrlEncode(System.String)">
            <summary>
            用 UrlEncode 进行编码
            </summary>
            <param name="content">需要编码的内容</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ToUrlEncodeUnicode(System.String)">
            <summary>
            用 UrlEncode 进行编码
            </summary>
            <param name="content">需要编码的内容</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ASCIIbyteArrayToString(System.Byte[])">
            <summary>
            将ASCII编码字符的byte[]数组转化为 String
            </summary>
            <param name="byteArr">byte[]数组</param>
        </member>
        <member name="M:Pharos.Utility.Conver.StringToASCIIbyte(System.String)">
            <summary>
            将String转化为ASCII编码字符的byte[]数组
            </summary>
            <param name="str">要转换的字符串</param>
        </member>
        <member name="M:Pharos.Utility.Conver.UnicodeByteArrayToString(System.Byte[])">
            <summary>
            将Unicode编码字符的byte[]数组转化为 String
            </summary>
            <param name="byteArr">byte[]数组</param>
        </member>
        <member name="M:Pharos.Utility.Conver.StringToUnicodeByteArray(System.String)">
            <summary>
            将String转化为Unicode编码字符的byte[]数组
            </summary>
            <param name="str">要转换的字符串</param>
        </member>
        <member name="M:Pharos.Utility.Conver.NumToDBC(System.String)">
            <summary>
            仅将全角数字转换为半角
            </summary>
            <param name="content">要转换的内容</param>
        </member>
        <member name="M:Pharos.Utility.Conver.NumToSBC(System.String)">
            <summary>
            仅将半角数字转换为全角
            </summary>
            <param name="content">要转换的内容</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ConvertSum(System.String)">
            <summary> 
            转换数字金额主函数（包括小数） 
            </summary> 
            <param name="str">数字字符串</param> 
        </member>
        <member name="M:Pharos.Utility.Conver.ConvertData(System.String)">
            <summary> 
            转换数字（整数） 
            </summary> 
            <param name="str">需要转换的整数数字字符串</param> 
            <returns>转换成中文大写后的字符串</returns> 
        </member>
        <member name="M:Pharos.Utility.Conver.ConvertXiaoShu(System.String)">
            <summary> 
            转换数字（小数部分） 
            </summary> 
            <param name="str">需要转换的小数部分数字字符串</param> 
            <returns>转换成中文大写后的字符串</returns> 
        </member>
        <member name="M:Pharos.Utility.Conver.ConvertDigit(System.String)">
            <summary> 
            转换数字 
            </summary> 
            <param name="str">转换的字符串（四位以内）</param> 
        </member>
        <member name="M:Pharos.Utility.Conver.Convert4Digit(System.String)">
            <summary> 
            转换四位数字 
            </summary> 
        </member>
        <member name="M:Pharos.Utility.Conver.Convert3Digit(System.String)">
            <summary> 
            转换三位数字 
            </summary> 
        </member>
        <member name="M:Pharos.Utility.Conver.Convert2Digit(System.String)">
            <summary> 
            转换二位数字 
            </summary> 
        </member>
        <member name="M:Pharos.Utility.Conver.ConvertChinese(System.String)">
            <summary> 
            将一位数字转换成中文大写数字 
            </summary> 
        </member>
        <member name="M:Pharos.Utility.Conver.TraditionalToSimplified(System.String)">
            <summary>
            将繁体转为简体
            </summary>
            <param name="str">要转换的繁体</param>
            <returns>转后的简体</returns>
        </member>
        <member name="M:Pharos.Utility.Conver.SimplifiedToTraditional(System.String)">
            <summary>
            将简体转为繁体
            </summary>
            <param name="str">要转换的简体</param>
            <returns>转后的繁体</returns>
        </member>
        <member name="M:Pharos.Utility.Conver.ToSBC(System.String)">
            <summary>
            转换为全角
            
            <![CDATA[
            
            全角空格为12288，半角空格为32，
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248。
            
            ]]>
            </summary>
            <param name="content">要转的内容</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ToDBC(System.String)">
            <summary>
            转换为半角
            
            <![CDATA[
            
            全角空格为12288，半角空格为32，
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248。
            
            ]]>
            </summary>
            <param name="content">要转的内容</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ToPinYin(System.String,Pharos.Utility.Conver.PYStyle,System.String)">
            <summary>
            简体汉字转拼音
            </summary>
            <param name="HanZi">要转换的汉字</param>
            <param name="py">拼音转换样式（枚举）</param>
            <param name="Separator">分隔符</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ToPinYin(System.String)">
            <summary>
            简体汉字转拼音
            </summary>
            <param name="HanZi">要转换的汉字</param>
        </member>
        <member name="M:Pharos.Utility.Conver.ToPinYin(System.String,System.String)">
            <summary>
            简体汉字转拼音
            </summary>
            <param name="HanZi">要转换的汉字</param>
            <param name="Separator">分隔符</param>
        </member>
        <member name="M:Pharos.Utility.Conver.GetFirstLetter(System.String)">
            <summary>
            取汉字首字母
            </summary>
            <param name="text">汉字</param>
        </member>
        <member name="M:Pharos.Utility.Conver.GetFullSpell(System.String)">
            <summary>
            汉字转换拼音（全拼）
            </summary>
            <param name="txt">汉字</param>
            <returns>拼音首个字母大写的全拼</returns>
        </member>
        <member name="T:Pharos.Utility.Conver.PYStyle">
            <summary>
            拼音转换样式
            </summary>
        </member>
        <member name="F:Pharos.Utility.Conver.PYStyle.First_Lower">
            <summary>
            只取首字母，小写
            </summary>
        </member>
        <member name="F:Pharos.Utility.Conver.PYStyle.First_Upper">
            <summary>
            只取首字母，大写
            </summary>
        </member>
        <member name="F:Pharos.Utility.Conver.PYStyle.Full_Lower">
            <summary>
            全拼，小写
            </summary>
        </member>
        <member name="F:Pharos.Utility.Conver.PYStyle.Full_Upper">
            <summary>
            全拼，大写
            </summary>
        </member>
        <member name="F:Pharos.Utility.Conver.PYStyle.Full_FirstUpper">
            <summary>
            全拼，首字母大写
            </summary>
        </member>
        <member name="T:Pharos.Utility.Conver.EncodeType">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="F:Pharos.Utility.Conver.EncodeType.UTF8">
            <summary>
            UTF-8
            </summary>
        </member>
        <member name="F:Pharos.Utility.Conver.EncodeType.GB2312">
            <summary>
            GB-2312
            </summary>
        </member>
        <member name="T:Pharos.Utility.Cookies">
            <summary>
            Cookies 引擎
            </summary>
        </member>
        <member name="M:Pharos.Utility.Cookies.IsExist(System.String)">
            <summary>
            检测 Cookies 是否存在
            </summary>
            <param name="CookiesName">Cookies Name</param>
            <returns>True:是 / False:否</returns>
        </member>
        <member name="M:Pharos.Utility.Cookies.Set(System.String,System.String)">
            <summary>
            逐个 写入或更新 Cookies
            </summary>
            <param name="name">键名</param>
            <param name="value">键值</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Set(System.String,System.String,System.Int16,System.Boolean)">
            <summary>
            逐个 写入或更新 Cookies
            </summary>
            <param name="name">键名</param>
            <param name="value">键值</param>
            <param name="days">有效天数（-32767至32767，须启用 expires 方有效）</param>
            <param name="expires">启用有效天数（True:启用, false:禁用）</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Set(System.String,System.String,System.String,System.Int16,System.Boolean)">
            <summary>
            逐个 写入或更新 Cookies
            </summary>
            <param name="path">存储路径，如 @"/"</param>
            <param name="name">键名</param>
            <param name="value">键值</param>
            <param name="days">有效天数（-32767至32767，须启用 expires 方有效）</param>
            <param name="expires">启用有效天数（True:启用, false:禁用）</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Set(System.String,System.String,System.String,System.String,System.Int16,System.Boolean)">
            <summary>
            逐个 写入或更新 Cookies
            </summary>
            <param name="domain">域名，如 "caisf.net"</param>
            <param name="path">存储路径，如 @"/"</param>
            <param name="name">键名</param>
            <param name="value">键值</param>
            <param name="days">有效天数（-32767至32767，须启用 expires 方有效）</param>
            <param name="expires">启用有效天数（True:启用, false:禁用）</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Set(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            写入或更新 Cookies 集合
            </summary>
            <param name="name">名称</param>
            <param name="keyValue">键、值</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Set(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int16,System.Boolean)">
            <summary>
            写入或更新 Cookies 集合
            </summary>
            <param name="name">名称</param>
            <param name="keyValue">键、值</param>
            <param name="days">有效天数（-32767至32767，须启用 expires 方有效）</param>
            <param name="expires">启用有效天数（True:启用, false:禁用）</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Set(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int16,System.Boolean)">
            <summary>
            写入或更新 Cookies 集合
            </summary>
            <param name="domain">域名，如 "caisf.net"</param>
            <param name="path">存储路径，如 @"/"</param>
            <param name="name">名称</param>
            <param name="keyValue">键、值</param>
            <param name="days">有效天数（-32767至32767，须启用 expires 方有效）</param>
            <param name="expires">启用有效天数（True:启用, false:禁用）</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.InsertCookiesKey(System.String,System.String,System.String)">
            <summary>
            往 Cookies集合中 插入某个键值
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.UpdateCookiesKey(System.String,System.String,System.String)">
            <summary>
            更新 Cookies集合中 的某个键的值
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Get(System.String)">
            <summary>
            读取 单个Cookies
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.Get(System.String,System.String)">
            <summary>
            读取 Cookies集合
            </summary>
            <param name="name">集合名</param>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.SetExpires(System.String)">
            <summary>
            逐个 设置Cookies过期
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.SetExpires(System.String,System.String)">
            <summary>
            逐个 设置Cookies过期
            </summary>
            <param name="path">所在路径，如 @"/"</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.SetExpires(System.String,System.String,System.String)">
            <summary>
            逐个 设置Cookies过期
            </summary>
            <param name="domain">域名，如 "caisf.net"</param>
            <param name="path">所在路径，如 @"/"</param>
            <param name="name">名称</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.SetExpiresAll(System.String)">
            <summary>
            设置指定主域下的所有Cookies过期
            </summary>
            <param name="domain">域名，如 "caisf.net"</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.SetExpiresAll(System.String,System.String)">
            <summary>
            设置指定主域下的所有Cookies过期
            </summary>
            <param name="domain">域名，如 "caisf.net"</param>
            <param name="path">所在路径，如 @"/"</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.SetExpiresAll">
            <summary>
            设置所有Cookies过期
            </summary>
        </member>
        <member name="M:Pharos.Utility.Cookies.Remove(System.String)">
            <summary>
            移除Cookies
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.RemoveKey(System.String,System.String)">
            <summary>
            移除Cookies的子键
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.Cookies.RemoveAllKey(System.String)">
            <summary>
            移除Cookies整个集合
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:Pharos.Utility.DataCache">
            <summary>
            缓存引擎
            </summary>
        </member>
        <member name="M:Pharos.Utility.DataCache.Get(System.String)">
            <summary>
            获取指定的Cache值 [HttpRuntime]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.Get``1(System.String)">
            <summary>
            获取指定的Cache值 [HttpRuntime]
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.Set(System.String,System.Object,System.Int16,System.Boolean)">
            <summary>
            写入指定的Cache值 [HttpRuntime]
            </summary>
            <param name="key">键</param>
            <param name="value">缓存值</param>
            <param name="minutes">缓存时间（1-255分钟，默认10分钟）</param>
            <param name="relative">相对过期</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.Set(System.String,System.Object)">
            <summary>
            写入指定的Cache值 [HttpRuntime]
            </summary>
            <param name="key">键</param>
            <param name="value">缓存值</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.RemoveAll">
            <summary>
            移除所有缓存
            </summary>
            <returns>返回清理缓存数</returns>
        </member>
        <member name="M:Pharos.Utility.DataCache.Remove(System.String)">
            <summary>
            移除指定的Cache [HttpRuntime]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.Remove(System.String[])">
            <summary>
            移除指定的Cache [HttpRuntime]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.RemoveStartsWith(System.String)">
            <summary>
            移除为指定Key开头的Cache [HttpRuntime]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.RemoveStartsWith(System.String[])">
            <summary>
            移除为指定Key开头的Cache [HttpRuntime]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.SetApp(System.String,System.Object)">
            <summary>
            写入指定的Cache值 [Application]
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.GetApp(System.String)">
            <summary>
            获取指定的Cache值 [Application]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.GetApp``1(System.String)">
            <summary>
            获取指定的Cache值 [Application]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DataCache.RemoveApp(System.String)">
            <summary>
            移除指定的Cache [Application]
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Pharos.Utility.DESEncrypt.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.DESEncrypt.Encrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:Pharos.Utility.DESEncrypt.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.DESEncrypt.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:Pharos.Utility.DESEncrypt.EncryptDES(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Pharos.Utility.DESEncrypt.DecryptDES(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="T:Pharos.Utility.ExcludeAttribute">
            <summary>
            排除自动赋值属性
            </summary>
        </member>
        <member name="T:Pharos.Utility.ExportExcelForCS">
            <summary>
            导出Excel业务逻辑
            </summary>
        </member>
        <member name="M:Pharos.Utility.ExportExcelForCS.ReadListFromStream``1(``0,System.Object,System.Boolean)">
            <summary>
            从Excel读取数据到列表中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <param name="stream"></param>
            <param name="ignoreHeaderAndColumn"></param>  
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.ExportExcelForCS.ValidTableHeader``1(NPOI.SS.UserModel.ISheet)">
            <summary>
            检查表头与定义是否匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="firstRow"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.ExportExcelForCS.ToExcel``1(``0,System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            将集合写入Excel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <param name="savePath"></param>
            <param name="dt"></param>
            <param name="maxRowInSheet"></param>
        </member>
        <member name="T:Pharos.Utility.ExportExcel">
            <summary>
            导出Excel业务逻辑
            </summary>
        </member>
        <member name="M:Pharos.Utility.ExportExcel.DaoChuTest">
            <summary>
            导出示例
            </summary>
            <returns>true:成功，false:失败</returns>
        </member>
        <member name="M:Pharos.Utility.ExportExcel.ToExcel(System.String,System.Data.DataTable,System.Int32[],System.Int32[])">
            <summary>
            导出Excel文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="dt">源数据</param>
            <param name="merger">合并列相同的值，用于上下行单元格重复合并（多个列间用半角逗号间隔）</param>
            <returns>返回生成后的URL下载地址</returns>
        </member>
        <!-- 对于成员“M:Pharos.Utility.ExportExcel.ToExcel(System.String,System.Data.DataTable,System.String[],System.String[],System.Int32[],System.Int32[],System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="M:Pharos.Utility.ExportExcel.SummaryInfo(System.String)">
            <summary>
            属性摘要信息
            </summary>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:Pharos.Utility.ExportExcel.SetCellValue(NPOI.SS.UserModel.ICell,NPOI.SS.UserModel.IDataFormat,NPOI.SS.UserModel.ICellStyle,System.String,System.String,System.Decimal@)">
            <summary>
            填充单元格数据
            </summary>
            <param name="cell">单元格对象</param>
            <param name="df">数据格式</param>
            <param name="style">样式</param>
            <param name="type">数据类型</param>
            <param name="value">数据值</param>
            <param name="val">输出数字或货币值（非数字或非货币类型的统一为0）</param>
        </member>
        <member name="M:Pharos.Utility.ExportExcel.OutputFile(NPOI.HSSF.UserModel.HSSFWorkbook,System.String)">
            <summary>
            输出并保存文件
            </summary>
            <param name="book">HSSFWorkbook 实例</param>
            <param name="fileName">文件全称含扩展名</param>
            <returns>返回生成后的URL下载地址</returns>
        </member>
        <member name="M:Pharos.Utility.ExportExcel.ResponseFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fullFileName">物理地址</param>
            <param name="fileName">文件名称</param>
        </member>
        <member name="P:Pharos.Utility.ExportExcel.IsFilterHTML">
            <summary>
            过滤HTML代码（默认true）
            </summary>
        </member>
        <member name="P:Pharos.Utility.ExportExcel.IsBufferOutput">
            <summary>
            是否直接缓冲输出文件下载（默认false）
            </summary>
        </member>
        <member name="P:Pharos.Utility.ExportExcel.HeaderText">
            <summary>
            自定义标题内容
            </summary>
        </member>
        <member name="P:Pharos.Utility.ExportExcel.MaxRows">
            <summary>
            若单页超出5000行（最多可设65535行)，则另外新建表
            </summary>
        </member>
        <member name="P:Pharos.Utility.ExportExcel.DSI">
            <summary>
            文档属性
            </summary>
        </member>
        <member name="T:Pharos.Utility.FilterHtml">
            <summary>
            过滤 Html 代码标记
            </summary>
        </member>
        <member name="M:Pharos.Utility.FilterHtml.Remove(System.String)">
            <summary>
            移除script、html代码标记
            </summary>
            <param name="htmlString"></param>
            <returns></returns>
        </member>
        <member name="T:Pharos.Utility.Helpers.ClassHelper">
            
            <summary>
            类帮助器,可以动态对类,类成员进行控制(添加,删除),目前只支持属性控制。
            注意,属性以外的其它成员会被清空,功能还有待完善,使其不影响其它成员。
            </summary>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.#ctor">
            
            <summary>
            防止实例化。
            </summary>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.CreateInstance(System.Type)">
            
            <summary>
            根据类的类型型创建类实例。
            </summary>
            <param name="t">将要创建的类型。</param>
            <returns>返回创建的类实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.CreateInstance(System.String,System.Collections.Generic.List{Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo})">
            
            <summary>
            根据类的名称,属性列表创建型实例。
            </summary>
            <param name="className">将要创建的类的名称。</param>
            <param name="lcpi">将要创建的类的属性列表。</param>
            <returns>返回创建的类实例</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.CreateInstance(System.Collections.Generic.List{Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo})">
            
            <summary>
            根据属性列表创建类的实例,默认类名为DefaultClass,由于生成的类不是强类型,所以类名可以忽略。
            </summary>
            <param name="lcpi">将要创建的类的属性列表</param>
            <returns>返回创建的类的实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            
            <summary>
            根据类的实例设置类的属性。
            </summary>
            <param name="classInstance">将要设置的类的实例。</param>
            <param name="propertyName">将要设置属性名。</param>
            <param name="propertSetValue">将要设置属性值。</param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.GetPropertyValue(System.Object,System.String)">
            
            <summary>
            根据类的实例获取类的属性。
            </summary>
            <param name="classInstance">将要获取的类的实例</param>
            <param name="propertyName">将要设置的属性名。</param>
            <returns>返回获取的类的属性。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.BuildType">
            
            <summary>
            创建一个没有成员的类型的实例,类名为"DefaultClass"。
            </summary>
            <returns>返回创建的类型的实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.BuildType(System.String)">
            
            <summary>
            根据类名创建一个没有成员的类型的实例。
            </summary>
            <param name="className">将要创建的类型的实例的类名。</param>
            <returns>返回创建的类型的实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.AddProperty(System.Type,System.Collections.Generic.List{Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo})">
            
            <summary>
            添加属性到类型的实例,注意:该操作会将其它成员清除掉,其功能有待完善。
            </summary>
            <param name="classType">指定类型的实例。</param>
            <param name="lcpi">表示属性的一个列表。</param>
            <returns>返回处理过的类型的实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.AddProperty(System.Type,Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo)">
            
            <summary>
            添加属性到类型的实例,注意:该操作会将其它成员清除掉,其功能有待完善。
            </summary>
            <param name="classType">指定类型的实例。</param>
            <param name="cpi">表示一个属性。</param>
            <returns>返回处理过的类型的实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.DeleteProperty(System.Type,System.String)">
            
            <summary>
            从类型的实例中移除属性,注意:该操作会将其它成员清除掉,其功能有待完善。
            </summary>
            <param name="classType">指定类型的实例。</param>
            <param name="propertyName">要移除的属性。</param>
            <returns>返回处理过的类型的实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.DeleteProperty(System.Type,System.Collections.Generic.List{System.String})">
            
            <summary>
            从类型的实例中移除属性,注意:该操作会将其它成员清除掉,其功能有待完善。
            </summary>
            <param name="classType">指定类型的实例。</param>
            <param name="ls">要移除的属性列表。</param>
            <returns>返回处理过的类型的实例。</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.MergeProperty(System.Type,System.Collections.Generic.List{Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo})">
            
            <summary>
            把类型的实例t和lcpi参数里的属性进行合并。
            </summary>
            <param name="t">实例t</param>
            <param name="lcpi">里面包含属性列表的信息。</param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.SeparateProperty(System.Type,System.Collections.Generic.List{System.String})">
            
            <summary>
            从类型的实例t的属性移除属性列表lcpi,返回的新属性列表在lcpi中。
            </summary>
            <param name="t">类型的实例t。</param>
            <param name="ls">要移除的属性列表。</param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.AddPropertyToTypeBuilder(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.List{Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo})">
            
            <summary>
            把lcpi参数里的属性加入到myTypeBuilder中。注意:该操作会将其它成员清除掉,其功能有待完善。
            </summary>
            <param name="myTypeBuilder">类型构造器的实例。</param>
            <param name="lcpi">里面包含属性列表的信息。</param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.AddPropertyToType(System.Type,System.Collections.Generic.List{Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo})">
            
            <summary>
            把属性加入到类型的实例。
            </summary>
            <param name="classType">类型的实例。</param>
            <param name="lcpi">要加入的属性列表。</param>
            <returns>返回处理过的类型的实例。</returns>
        </member>
        <member name="T:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo">
            
            <summary>
            自定义的属性信息类型。
            </summary>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.#ctor">
            
            <summary>
            空构造。
            </summary>
        </member>
        <member name="M:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.#ctor(System.Type,System.String,System.Object)">
            
            <summary>
            根据属性类型名称,属性名称构造实例。
            </summary>
            <param name="type">属性类型名称。</param>
            <param name="propertyName">属性名称。</param>
        </member>
        <member name="P:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.Type">
            
            <summary>
            获取或设置属性类型名称。
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.Value">
            
            <summary>
            获取或设置属性类型名称。
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.PropertyName">
            
            <summary>
            获取或设置属性名称。
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.FieldName">
            
            <summary>
            获取属性字段名称。
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.SetPropertyMethodName">
            
            <summary>
            获取属性在IL中的Set方法名。
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.ClassHelper.CustPropertyInfo.GetPropertyMethodName">
            
            <summary>
             获取属性在IL中的Get方法名。
            </summary>
        </member>
        <member name="T:Pharos.Utility.Helpers.DynamicallyLinqHelper">
            <summary>
            动态linq
            </summary>
        </member>
        <member name="F:Pharos.Utility.Helpers.DynamicallyLinqHelper.ParameterRebinder.map">
            <summary>
            The ParameterExpression map
            </summary>
        </member>
        <member name="M:Pharos.Utility.Helpers.DynamicallyLinqHelper.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Pharos.Utility.Helpers.DynamicallyLinqHelper.ParameterRebinder"/> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:Pharos.Utility.Helpers.DynamicallyLinqHelper.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replaces the parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="exp">The exp.</param>
            <returns>Expression</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.DynamicallyLinqHelper.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns>Expression</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetList``1">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetList``1(System.Boolean)">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值，是否添加全部Item项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isAll">是否有全部选项</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetList(System.Type,System.Boolean)">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值
            </summary>
            <param name="type"></param>
            <param name="isAll">是否有全部选项</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetList(System.Type)">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetCacheList``1">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetCacheList``1(System.Boolean)">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isAll">是否有全部选项</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetCacheList(System.Type)">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetCacheList(System.Type,System.Boolean)">
            <summary>
            根据枚举类型获得枚举中文描述以及枚举属性值
            </summary>
            <param name="type"></param>
            <param name="isAll">是否有全部选项</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.EnumHelper.GetDescription(System.Enum)">
            <summary>
            将枚举的描述文件以字符串方式输出
            </summary>
            <param name="subenum"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Boolean)">
            <summary>
            Linq动态排序(反射.排序名称必须与Model一致)
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="source">要排序的数据源</param>
            <param name="value">排序依据（加空格）排序方式</param>
            <returns>IOrderedQueryable</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.Boolean)">
            <summary>
            Linq动态排序再排序(反射.排序名称必须与Model一致)
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="source">要排序的数据源</param>
            <param name="value">排序依据（加空格）排序方式</param>
            <returns>IOrderedQueryable</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            去除重重
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector">p=>new { p.Id, p.Name }</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.ToPageList``1(System.Linq.IQueryable{``0},System.Collections.Specialized.NameValueCollection)">
            <summary>
            产生easyui自动分页
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="nvl">Request.Params</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.CopyProperty``1(``0,``0)">
            <summary>
            对于两个相同类的属性进行复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <param name="source"></param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.IsNullThrow``1(``0,System.String)">
            <summary>
            为空抛出异常
            </summary>
            <param name="obj"></param>
            <param name="errMess"></param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.ToJson(System.Data.DataTable)">
            <summary>
            DataTableTOJSON
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.JsonToXML(System.String)">
            <summary>
            JsonToXML
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.JsonToDataTable(System.String)">
            <summary>
            JsonToDataTable
            </summary>
            <param name="strJson">JSON</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转成DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.SetValue(System.Data.DataRow,System.String,System.Object)">
            <summary>
            对某列赋值，不存在不抛出异常信息
            </summary>
            <param name="row"></param>
            <param name="columnName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.GetValue(System.Data.DataRow,System.Object)">
            <summary>
            获取某列值，不存在不抛出异常信息
            </summary>
            <param name="row"></param>
            <param name="column">index或name</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.ToAutoString(System.Decimal,System.Int32)">
            <summary>
            自动转化整型
            </summary>
            <param name="dec"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.ToClone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            克隆列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取一个类指定的属性值
            </summary>
            <param name="info">object对象</param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.GetRandomStr(System.Int32,System.Func{System.String,System.Boolean})">
            <summary>
            获取一个指定长度的随机字符串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ExtendHelper.GetApplicationPath(System.Web.HttpContext)">
            <summary>
            获取虚拟目录（以斜杆结尾）
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.FileHelper.SaveAttachPath(System.String@,System.String)">
            <summary>
            物理存储路径
            </summary>
            <param name="RelativePath">返回相对路径</param>
            <param name="dir">自定义目录名称</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.FileHelper.SaveLogoPath(System.String@,System.String)">
            <summary>
            基本配置Logo物理存储路径
            </summary>
            <param name="RelativePath">返回相对路径</param>
            <param name="dir">自定义目录名称</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.FileHelper.GetFileSize(System.Int32)">
            <summary>
            转换文件大小单位
            </summary>
            <param name="fileSize"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.FileHelper.GetFileFontIcon(System.String)">
            <summary>
            获取字体图标样式
            </summary>
            <param name="extName"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.FileHelper.GetContentType(System.String)">
            <summary>
            获取扩展名对应的ContentType
            </summary>
            <param name="ext">扩展名</param>
            <returns></returns>
        </member>
        <member name="P:Pharos.Utility.Helpers.FileHelper.GetRoot">
            <summary>
            保存根目录
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.FileHelper.GetUrlRoot">
             <summary>
            附件URL根位置 
             </summary>
        </member>
        <member name="T:Pharos.Utility.Helpers.ImageHelper">
            <summary>
            图片处理公共方法 create by kouzp 2014-02-13
            </summary>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.UploadImage(System.Web.HttpPostedFile,System.String,System.Boolean)">
            <summary>
            上传图片 create by kouzp on 2013-8-21
            </summary>
            <param name="postfile">上传图片</param>
            <param name="savePath">保存路径</param>
            <param name="isReturnFullPath">是否返回完整路径</param>
            <returns>图片名称</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.ThumbImage(System.Web.HttpPostedFile,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            上传图片（可选是否生成缩略图） create by kouzp 2013-8-21
            </summary>
            <param name="postfile">上传文件</param>
            <param name="savePath">保存路径</param>
            <param name="thumbWidth">缩略图宽度</param>
            <param name="thumbHeight">缩略图高度</param>
            <param name="thumbMode">缩略图模式(HW,H,W,Cut)</param>
            <param name="isDelOimage">是否删除上传图片</param>
            <returns>图片名称(缩略图为_s.)</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.WaterTextImage(System.Web.HttpPostedFile,System.String,System.String,System.String,System.Boolean)">
            <summary>
            上传图片并添加文字水印 create by kouzp 2013-8-21
            </summary>
            <param name="postfile">上传图片</param>
            <param name="savePath">保存路径</param>
            <param name="waterText">水印文字</param>
            <param name="waterSaveFolder">水印图片保存文件夹</param>
            <param name="isDelOimage">是否删除上传图片</param>
            <returns>图片名称</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.WaterPicImage(System.Web.HttpPostedFile,System.String,System.String,System.String,System.Boolean)">
            <summary>
            上传图片并添加图片水印 create by kouzp 2013-8-21
            </summary>
            <param name="postfile">上传图片</param>
            <param name="savePath">保存路径</param>
            <param name="waterPicPath">水印图片路径</param>
            <param name="waterSaveFolder">水印图片保存文件夹</param>
            <param name="isDelOimage">是否删除上传图片</param>
            <returns>图片名称</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.ThumbWaterTextImage(System.Web.HttpPostedFile,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            上传图片生成缩略图并添加文字水印 create by kouzp 2013-8-21
            </summary>
            <param name="postfile">上传文件</param>
            <param name="savePath">保存路径</param>
            <param name="thumbWidth">缩略图宽度</param>
            <param name="thumbHeight">缩略图高度</param>
            <param name="thumbMode">缩略图模式(HW,H,W,Cut)</param>
            <param name="thumbSaveFolder">缩略图保存文件夹</param>
            <param name="waterText">水印文字</param>
            <param name="waterSaveFolder">水印图片保存文件夹</param>
            <param name="isDelOimage">是否删除上传图片</param>
            <param name="isDelOimage">是否删除上传图片</param>
            <returns>图片名称</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.ThumbWaterPicImage(System.Web.HttpPostedFile,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            上传图片生成缩略图并添加文字水印 create by kouzp 2013-8-21
            </summary>
            <param name="postfile">上传文件</param>
            <param name="savePath">保存路径</param>
            <param name="waterPicPath">水印图片路径</param>
            <param name="waterSaveFolder">水印图片保存文件夹</param>
            <param name="thumbWidth">缩略图宽度</param>
            <param name="thumbHeight">缩略图高度</param>
            <param name="thumbMode">缩略图模式(HW,H,W,Cut)</param>
            <param name="thumbSaveFolder">缩略图保存文件夹</param>
            <param name="isDelOimage">是否删除上传图片</param>
            <param name="isDelOimage">是否删除上传图片</param>
            <returns>图片名称</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图 create by kouzp 2014-02-13
            </summary>
            <param name="imagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图保存路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.MakeThumbnail(System.IO.Stream,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="stream">源图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.AddWaterText(System.String,System.String,System.String,Pharos.Utility.Helpers.ImageHelper.WaterPosition,System.Double)">
            <summary>
            在图片上增加文字水印 create by kouzp 2014-02-13
            </summary>
            <param name="imagePath">原图片路径</param>
            <param name="savePath">加水印后图片保存路径</param>
            <param name="waterText">水印文字</param>
            <param name="position">水印位置</param>
            <param name="alpha">水印透明度</param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.AddWaterPic(System.String,System.String,System.String,Pharos.Utility.Helpers.ImageHelper.WaterPosition,System.Double)">
            <summary>
            在图片上生成图片水印 create by kouzp 2014-02-13
            </summary>
            <param name="imagePath">原图片路径</param>
            <param name="savePath">加水印后图片保存路径</param>
            <param name="waterPicPath">水印图片路径</param>
            <param name="position">水印位置</param>
            <param name="alpha">水印透明度</param>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.UploadSuccess(System.String)">
            <summary>
            成功提示 create by kouzp 2013-8-21
            </summary>
            <param name="msg">提示内容</param>
            <returns>成功信息</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.UploadError(System.String)">
            <summary>
            错误提示 create by kouzp 2013-8-21
            </summary>
            <param name="msg">提示内容</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.isUploadSuccess(System.String)">
            <summary>
            
            </summary>
            <param name="uploadMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.ToDataUri(System.String)">
            <summary>
            取给定图片路径，将之转换为 base64 格式的 DataUri
            </summary>
            <param name="imgPath">图片路径</param>
            <returns>base64 格式的 DataUri</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.ToBase64(System.String)">
            <summary>
            取给定图片路径，将之转换为 base64 格式
            </summary>
            <param name="imgPath">图片路径</param>
            <returns>图片的 base64 编码数据</returns>
        </member>
        <member name="M:Pharos.Utility.Helpers.ImageHelper.MakeThumbnail(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>  
            剪切图片  
            </summary>  
            <param name="sourcePath"></param>  
            <param name="sx"></param>  
            <param name="sy"></param>  
            <param name="width"></param>  
            <param name="height"></param>  
            <returns></returns>  
        </member>
        <member name="T:Pharos.Utility.Helpers.ImageHelper.WaterPosition">
            <summary>  
            图片位置  
            </summary>  
        </member>
        <member name="T:Pharos.Utility.Helpers.MailHelper">
            <summary>
            发送邮件服务
            </summary>
        </member>
        <member name="M:Pharos.Utility.Helpers.MailHelper.SendMessage(System.String,System.String,System.String[],System.Net.Mail.Attachment[])">
            <summary>
            发送Email
            </summary>
            <param name="body">邮件主体</param>
            <param name="title">显示的标题</param>
            <param name="email">接收方的邮件地址列表</param>
            <param name="attachs">附件</param>
        </member>
        <member name="P:Pharos.Utility.Helpers.MailHelper.Smtp">
            <summary>
            smtp服务器
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.MailHelper.Sender">
            <summary>
            发送者(邮件地址)
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.MailHelper.ShowName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.MailHelper.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Pharos.Utility.Helpers.MailHelper.Password">
            <summary>
            smtp登陆名密码
            </summary>
        </member>
        <member name="T:Pharos.Utility.Caching.MemoryCacheManager">
            <summary>
            Represents a manager for caching between HTTP requests (long term caching)
            </summary>
        </member>
        <member name="M:Pharos.Utility.Caching.MemoryCacheManager.Get``1(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Pharos.Utility.Caching.MemoryCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified key and object to the cache.
            </summary>
            <param name="key">key</param>
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
        </member>
        <member name="M:Pharos.Utility.Caching.MemoryCacheManager.IsSet(System.String)">
            <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
            <param name="key">key</param>
            <returns>Result</returns>
        </member>
        <member name="M:Pharos.Utility.Caching.MemoryCacheManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the cache
            </summary>
            <param name="key">/key</param>
        </member>
        <member name="M:Pharos.Utility.Caching.MemoryCacheManager.RemoveByPattern(System.String)">
            <summary>
            Removes items by pattern
            </summary>
            <param name="pattern">pattern</param>
        </member>
        <member name="M:Pharos.Utility.Caching.MemoryCacheManager.Clear">
            <summary>
            Clear all cache data
            </summary>
        </member>
        <member name="P:Pharos.Utility.Caching.MemoryCacheManager.Cache">
            <summary>
            Cache object
            </summary>
        </member>
        <member name="M:Pharos.Utility.HttpClient.HttpPost(System.String,System.String,System.String)">
            <summary>
            jsonPost
            </summary>
            <param name="url"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="T:Pharos.Utility.JsonNetResult">
            <summary>
            序列化为JSON格式
            </summary>
        </member>
        <member name="T:Pharos.Utility.Machine">
            <summary>
            机器信息
            </summary>
        </member>
        <member name="P:Pharos.Utility.Machine.GetMAC">
            <summary>
            获取本机MAC编号
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pharos.Utility.Security">
            <summary>
            安全类
            </summary>
        </member>
        <member name="M:Pharos.Utility.Security.MD5_Encrypt(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="text">要加密的文本</param>
            <returns>返回已加密的MD5</returns>
        </member>
        <member name="M:Pharos.Utility.NetWorkInfo.NetPing(System.String)">
            <summary>
            Ping网络设备
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:Pharos.Utility.PageList`1">
            <summary>
            EF 分页方式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Pharos.Utility.PageList`1.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            不分页
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Pharos.Utility.PageList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">page index</param>
            <param name="pageSize">page size</param>
        </member>
        <member name="M:Pharos.Utility.PageList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">page index</param>
            <param name="pageSize">page size</param>
        </member>
        <member name="P:Pharos.Utility.PageList`1.PageIndex">
            <summary>
            page index
            </summary>
        </member>
        <member name="P:Pharos.Utility.PageList`1.PageSize">
            <summary>
            page size
            </summary>
        </member>
        <member name="P:Pharos.Utility.PageList`1.TotalCount">
            <summary>
            page row count
            </summary>
        </member>
        <member name="P:Pharos.Utility.PageList`1.TotalPages">
            <summary>
            total page
            </summary>
        </member>
        <member name="T:Pharos.Utility.Paging">
            <summary>
            分页属性（适用于特定DB存储过程分页）
            </summary>
        </member>
        <member name="M:Pharos.Utility.Paging.SetPaging(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置分页参数（由DBFramework调用）
            </summary>
            <param name="pageIndex">当前页索引号</param>
            <param name="pageSize">每页多少条</param>
            <param name="recordTotal">记录总条数</param>
            <param name="recordStart">当前页起始记录号</param>
            <param name="recordEnd">当前页结束记录号</param>
        </member>
        <member name="P:Pharos.Utility.Paging.PageIndex">
            <summary>
            当前页索引号
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging.PageSize">
            <summary>
            每页多少条
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging.RecordTotal">
            <summary>
            记录总条数
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging.RecordStart">
            <summary>
            当前页起始记录号
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging.RecordEnd">
            <summary>
            当前页结束记录号
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging.HasPreviousPage">
            <summary>
            是否存在上一页
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging.HasNextPage">
            <summary>
            是否存在下一页
            </summary>
        </member>
        <member name="T:Pharos.Utility.Paging`1">
            <summary>
            分页属性（适用于特定DB存储过程分页）
            </summary>
        </member>
        <member name="M:Pharos.Utility.Paging`1.#ctor(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <param name="dt"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Pharos.Utility.Paging`1.SetPaging(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置分页参数（由DBFramework调用）
            </summary>
            <param name="pageIndex">当前页索引号</param>
            <param name="pageSize">每页多少条</param>
            <param name="recordTotal">记录总条数</param>
            <param name="recordStart">当前页起始记录号</param>
            <param name="recordEnd">当前页结束记录号</param>
        </member>
        <member name="P:Pharos.Utility.Paging`1.PageIndex">
            <summary>
            当前页索引号
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging`1.PageSize">
            <summary>
            每页多少条
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging`1.RecordTotal">
            <summary>
            记录总条数
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging`1.RecordStart">
            <summary>
            当前页起始记录号
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging`1.RecordEnd">
            <summary>
            当前页结束记录号
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging`1.HasPreviousPage">
            <summary>
            是否存在上一页
            </summary>
        </member>
        <member name="P:Pharos.Utility.Paging`1.HasNextPage">
            <summary>
            是否存在下一页
            </summary>
        </member>
        <member name="T:Pharos.Utility.SeriesModel">
            <summary>
            图形类
            </summary>
        </member>
        <member name="T:Pharos.Utility.SMSApi">
            <summary>
            SMS 常规小助手
            </summary>
        </member>
        <member name="M:Pharos.Utility.SMSApi.Test">
            <summary>
            发送短信-示例
            </summary>
        </member>
        <member name="M:Pharos.Utility.SMSApi.Send(System.String,System.String,System.String,System.String)">
            <summary>
            发送短信（必填）
            </summary>
            <param name="uid">主用户账号</param>
            <param name="pwd">明文密码</param>
            <param name="mobile">接收号码（多个间用,号分隔；小灵通须加区号）</param>
            <param name="content">短信内容</param>
            <returns></returns>
        </member>
        <member name="P:Pharos.Utility.SMSApi.SetApi">
            <summary>
            设置Api地址（必填）
            </summary>
        </member>
        <member name="T:Pharos.Utility.SMSApi.SendStatus">
            <summary>
            发送状态
            </summary>
        </member>
        <member name="T:Pharos.Utility.Url">
            <summary>
            URL 常规处理
            </summary>
        </member>
        <member name="M:Pharos.Utility.Url.GetDomain(System.String)">
            <summary>
            根据URL提取域名
            </summary>
            <param name="url">URL</param>
        </member>
        <member name="M:Pharos.Utility.Url.GetPath(System.String)">
            <summary>
            根据URL提取路径
            </summary>
            <param name="url">URL</param>
        </member>
        <member name="M:Pharos.Utility.Url.GetFileNameAndParam(System.String)">
            <summary>
            根据URL提取文件全称及参数
            </summary>
            <param name="url">URL</param>
        </member>
        <member name="M:Pharos.Utility.Url.GetFileFullName(System.String)">
            <summary>
            根据URL提取文件全称（含扩展名）
            </summary>
            <param name="url">URL</param>
        </member>
        <member name="M:Pharos.Utility.Url.GetFileName(System.String)">
            <summary>
            根据URL提取文件名称（不含扩展名）
            </summary>
            <param name="url">URL</param>
        </member>
        <member name="M:Pharos.Utility.Url.GetFormat(System.String)">
            <summary>
            根据URL得到文件的格式名
            </summary>
            <param name="fileName">文件全名</param>
            <returns>返回格式名</returns>
        </member>
        <member name="M:Pharos.Utility.Url.ToUrlParms(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            生成URL参数
            </summary>
            <param name="parms"><![CDATA[ Dictionary<key, value>参数集合 ]]></param>
            <returns>返回生成URL格式参数</returns>
        </member>
        <member name="M:Pharos.Utility.Url.ToUrlParms(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            生成URL参数
            </summary>
            <param name="parms"><![CDATA[ Dictionary<key, value>参数集合 ]]></param>
            <param name="isEncrypt">是否需要编码处理</param>
            <returns>返回生成URL格式参数</returns>
        </member>
        <member name="M:Pharos.Utility.Url.ToUrlParms(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            生成URL参数
            </summary>
            <param name="url">URL</param>
            <param name="parms"><![CDATA[ Dictionary<key, value>参数集合 ]]></param>
            <returns>返回生成URL格式参数</returns>
        </member>
        <member name="M:Pharos.Utility.Url.ToUrlParms(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            生成URL参数
            </summary>
            <param name="url">URL</param>
            <param name="parms"><![CDATA[ Dictionary<key, value>参数集合 ]]></param>
            <param name="isEncrypt">是否需要编码处理</param>
            <returns>返回生成URL格式参数</returns>
        </member>
        <member name="M:Pharos.Utility.Url.GetUrlParms(System.String,System.String)">
            <summary>
            获取URL中Key对应的值
            </summary>
            <param name="url">URL字符串</param>
            <param name="key">键</param>
            <returns>返回键对应的值</returns>
        </member>
        <member name="M:Pharos.Utility.Url.GetUrlParms(System.String)">
            <summary>
            获取URL字符串中的所有参数
            </summary>
            <param name="url">URL字符串</param>
            <returns>返回参数字典</returns>
        </member>
        <member name="P:Pharos.Utility.Url.RawUrl">
            <summary>
            获取当前请求的原始URL
            <![CDATA[
            如：http://www.Caisf.test/admin/index.aspx?id=123
            返回：/admin/index.aspx?id=123
            ]]>
            </summary>
        </member>
        <member name="P:Pharos.Utility.Url.Http">
            <summary>
            获取HTTP连接头（即 Https或Http）
            </summary>
        </member>
        <member name="P:Pharos.Utility.Url.CurDomain">
            <summary>
            获取当前请求的主域名称
            </summary>
        </member>
        <member name="P:Pharos.Utility.Url.CurPort">
            <summary>
            获取当前请求主域中的端口号
            </summary>
        </member>
        <member name="P:Pharos.Utility.Url.GetApplicationPath">
            <summary>
            获取虚拟根路径
            </summary>
        </member>
    </members>
</doc>
