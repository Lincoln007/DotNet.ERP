using Pharos.Logic.BLL.LocalServices;
using Pharos.Logic.LocalEntity;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Pharos.POS.Retailing.Models.SalesPromotionRules.Discount
{
    /// <summary>
    /// 满元促销
    /// </summary>
    public class FullYuanDiscount : BaseDiscount<FullYuanPromotionLocalService, FullYuanPromotionDAO>
    {

        public const string DISCOUNTTITLE = "满元促销";
        public FullYuanDiscount()
        {
            RunInSettlement = true;
        }
        public override void SetRestrictionBuyNum()
        {
            foreach (var item in CachePool)
            {
                if (item.RestrictionBuyNum > 0)
                {
                    var date = DateTime.Now.ToString("yyyyMMdd");
                    if (!SalesRecordLocalService.IsExist(o => o.StoreId == PosMachineInfo.Infos.StoreId && o.CommodityId == item.CommodityPromotionId && o.CreateDT == date))
                    {
                        var record = new SalesRecord()
                        {
                            CommodityId = item.CommodityPromotionId,
                            CreateDT = date,
                            StoreId = PosMachineInfo.Infos.StoreId,
                            Number = item.RestrictionBuyNum
                        };
                        SalesRecordLocalService.Add(record);
                    }
                }
            }
        }

        public override void Discount(Product productInfo)
        {

            string barcode = productInfo.Code;
            decimal num = productInfo.Num;
            decimal sysPrice = productInfo.Price;
            decimal sale = productInfo.sale;
            string giftId = productInfo.giftId;
            List<string> promotionIds = productInfo.promotionIds;
            IEnumerable<FullYuanPromotionDAO> infos;
            if (HasDiscount(barcode, out infos))
            {
                List<FullYuanPromotionDAO> ValidDiscount = new List<FullYuanPromotionDAO>();
                foreach (var item in infos)
                {
                    //处理主表限制
                    var hasDiscount = DiscountCommon(barcode, num, ref  sale, item);
                    if (hasDiscount)
                    {
                        ValidDiscount.Add(item);
                    }

                }
                var result1 = ValidDiscount.Where(o => o.RestrictionBuyNum == 0);
                var record = SalesRecordLocalService.FindList(o => o.StoreId == PosMachine.Current.Infos.StoreId).ToList();
                //Todo:每天限购次数（0:不限） 【暂未实现】
                var result2 = (from a in ValidDiscount.Where(o => o.RestrictionBuyNum > 0)
                               from b in record
                               where a.CommodityPromotionId == b.CommodityId && (a.RestrictionBuyNum > 0 && b.Number > 0)
                               select a).ToList();
                ValidDiscount = result1.Concat(result2).ToList();
                if (ValidDiscount.Count == 0)
                {
                    return;
                }
                var tempValidDiscount = new List<FullYuanPromotionDAO>();
                var ValidNumDict = new Dictionary<string, decimal>();
                Dictionary<string, IEnumerable<Product>> discountCollections = new Dictionary<string, IEnumerable<Product>>();

                foreach (var item in ValidDiscount)
                {
                    var collections = PosMachine.Current.BillList.Where(o => VerifyBarCodeInActivity(o.Code, item) && o.Status == ProductStatus.Normal);
                    var totalNum = collections.Sum(o => (o.AveragePrice ?? o.Sale) * o.Num);
                    if (item.FullNumber <= totalNum)
                    {
                        tempValidDiscount.Add(item);
                        if (!ValidNumDict.Keys.Contains(item.CommodityPromotionId))
                        {
                            ValidNumDict.Add(item.CommodityPromotionId, totalNum);
                        }
                        discountCollections.Add(item.CommodityPromotionId, collections);

                    }
                }
                if (tempValidDiscount.Count == 0)
                {
                    return;
                }
                ValidDiscount = tempValidDiscount;
                var info = ValidDiscount.OrderByDescending(o => o.CreateDT).FirstOrDefault();
                //  var oldSales = discountCollections[info.CommodityPromotionId].Sum(o => o.Sale * o.Num);

                if (PosMachine.Current.BillList.DiscountRanges.Exists(o => o == info.CommodityPromotionId))
                    return;
                PosMachine.Current.BillList.DiscountRanges.Add(info.CommodityPromotionId);



                switch (info.PromotionType)
                {
                    case 1://现金返回

                        if (info.AllowedAccumulate == 1)
                        {
                            //var oldDiscount = PosMachine.Current.BillList.DiscountPreferential[info.CommodityPromotionId];
                            //PosMachine.Current.BillList.DiscountPreferential.Remove(info.CommodityPromotionId);
                            var _num = Convert.ToInt32(Math.Truncate(ValidNumDict[info.CommodityPromotionId] / info.FullNumber));
                            // PosMachine.Current.BillList.DiscountPreferential.Add(info.CommodityPromotionId, info.DiscountOrPrice * _num);
                            var fullDiscount = info.DiscountOrPrice * _num;
                            //  sale =Math.Round( sale - (fullDiscount * sale / oldSales),2);
                            //foreach (var item in discountCollections[info.CommodityPromotionId])
                            //{
                            //    if (item != productInfo)
                            //        item.Discount(false);
                            //}
                            //   var saleOrder = discountCollections[info.CommodityPromotionId].Sum(o => o.Sale * o.Num);

                            foreach (var item in discountCollections[info.CommodityPromotionId])
                            {
                                item.AveragePrice = (item.AveragePrice ?? item.Sale) - (fullDiscount * (item.AveragePrice ?? item.Sale) / ValidNumDict[info.CommodityPromotionId]);
                                item.SetSaleToUI();
                                item.ResetTotal();
                            }
                        }
                        else
                        {
                            //PosMachine.Current.BillList.DiscountPreferential.Remove(info.CommodityPromotionId);
                            //PosMachine.Current.BillList.DiscountPreferential.Add(info.CommodityPromotionId, info.DiscountOrPrice);
                            //// sale = Math.Round(sale - (info.DiscountOrPrice * sale / oldSales), 2);
                            //foreach (var item in discountCollections[info.CommodityPromotionId])
                            //{
                            //    if (item != productInfo)
                            //        item.Discount(false);
                            //}
                            // var saleOrder = discountCollections[info.CommodityPromotionId].Sum(o => o.Sale * o.Num);
                            foreach (var item in discountCollections[info.CommodityPromotionId])
                            {
                                item.AveragePrice = (item.AveragePrice ?? item.Sale) - (info.DiscountOrPrice * (item.AveragePrice ?? item.Sale) / ValidNumDict[info.CommodityPromotionId]);
                                item.SetSaleToUI();
                                item.ResetTotal();
                            }
                        }
                        break;
                    case 2:
                        //Todo:赠送代金卷
                        break;
                    case 3://折扣
                        //if (PosMachine.Current.BillList.DiscountPreferential.Keys.Contains(info.CommodityPromotionId))
                        //    PosMachine.Current.BillList.DiscountPreferential.Remove(info.CommodityPromotionId);
                        //PosMachine.Current.BillList.DiscountPreferential.Add(info.CommodityPromotionId, discountCollections[info.CommodityPromotionId].Sum(o => o.Total) * (1 - (info.DiscountOrPrice / 10)));
                        //sale = Math.Round(sale * (1 - (info.DiscountOrPrice / 10)), 2);
                        foreach (var item in discountCollections[info.CommodityPromotionId])
                        {
                            //if (item != productInfo)
                            //    item.Discount(false);
                            item.AveragePrice = (item.AveragePrice ?? item.Sale) * (info.DiscountOrPrice / 10);
                            item.SetSaleToUI();
                            item.ResetTotal();
                        }
                        break;
                    case 4: //加购按具体商品赠送
                        var gifts = PromotionBlendListLocalService.GetGiftList((string)info.CommodityPromotionId);
                        if (info.AllowedAccumulate == 1)
                        {
                            PendingGift.RemoveAll(o => o.Id == info.CommodityPromotionId);
                            var _num = Convert.ToInt32(Math.Truncate(ValidNumDict[info.CommodityPromotionId] / info.FullNumber));
                            gifts.ForEach(o =>
                            {
                                o.AddMoney = info.DiscountOrPrice;
                                o.Number = _num;
                                o.CommodityId = info.CommodityPromotionId;
                                PendingGift.Add(new Gift(o, DISCOUNTTITLE));

                            });
                            PendingGift = PendingGift;
                        }
                        else
                        {
                            if (!PendingGift.Exists(o => o.Id == info.CommodityPromotionId))
                            {
                                var tempGifts = new List<Gift>();
                                gifts.ForEach(o =>
                                {
                                    o.AddMoney = info.DiscountOrPrice;
                                    o.CommodityId = info.CommodityPromotionId;
                                    tempGifts.Add(new Gift(o, DISCOUNTTITLE));
                                });
                                PendingGift = PendingGift.Concat(tempGifts).ToList();
                            }
                        }
                        break;
                    case 5: //加购按单价范围赠送
                        var range = (decimal)info.PriceRange;
                        var products = ProductInfoLocalService.FindList(o => o.SysPrice < range || range == 0).Select(o => new Gift()
                        {
                            AddMoney = info.DiscountOrPrice,
                            Barcode = o.Barcode,
                            GiftNumber = 1,
                            Id = info.CommodityPromotionId,
                            SysPrice = o.SysPrice,
                            Title = o.Title,
                            DiscountTitle = DISCOUNTTITLE,
                            CommodityId = info.CommodityPromotionId
                        });
                        if (info.AllowedAccumulate == 1)
                        {
                            PendingGift.RemoveAll(o => o.Id == info.CommodityPromotionId);
                            List<Gift> currentGifts = new List<Gift>();
                            foreach (var item in products)
                            {
                                item.GiftNumber = Convert.ToInt32(Math.Truncate(ValidNumDict[info.CommodityPromotionId] / info.FullNumber));
                                currentGifts.Add(item);
                            }
                            PendingGift = PendingGift.Concat(currentGifts).ToList();
                        }
                        else
                        {

                            if (!PendingGift.Exists(o => o.Id == info.CommodityPromotionId))
                                PendingGift = PendingGift.Concat(products).ToList();
                        }
                        break;
                }
                foreach (var item in discountCollections[info.CommodityPromotionId])
                {
                    if (!item.PromotionIds.Exists(o => o == info.CommodityPromotionId))
                    {
                        item.PromotionIds.Add(info.CommodityPromotionId);
                    }
                }
            }
        }
        /// <summary>
        /// 验证商品是否在活动中
        /// </summary>
        /// <param name="code"></param>
        /// <param name="info"></param>
        /// <returns></returns>
        private bool VerifyBarCodeInActivity(string code, FullYuanPromotionDAO info)
        {
            var commodityId = info.CommodityPromotionId as string;
            var entity = ProductInfoLocalService.Find(o => o.Barcode == code);
            var ids = ProductCategoryLocalService.FindAllParent(entity.CategorySN).Select(o => o.ToString()).ToList();
            ids.Add(entity.CategorySN.ToString());
            var list = PromotionBlendListLocalService.FindList(o => o.CommodityId == commodityId);
            return !list.Exists(o => (o.BarcodeOrCategorySN == code && o.BlendType == 5)) || list.Exists(o => !ids.Exists(p => p == o.BarcodeOrCategorySN && o.BlendType == 6 && (o.BrandSN == entity.BrandSN || o.BrandSN == 0)));
        }

        //判断是否有折扣
        public override bool HasDiscount(string barcode, out IEnumerable<FullYuanPromotionDAO> discount)
        {
            discount = CachePool.Where(o => o.EndDate >= DateTime.Now.Date && o.StartDate <= DateTime.Now.Date);
            return discount != null && discount.Count() > 0;
        }

        public override bool HasDiscount(string barcode)
        {
            IEnumerable<FullYuanPromotionDAO> info;
            return HasDiscount(barcode, out info);
        }
    }
}
