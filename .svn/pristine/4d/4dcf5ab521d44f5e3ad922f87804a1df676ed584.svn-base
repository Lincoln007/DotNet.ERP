using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using Pharos.DBFramework;
using Pharos.Logic.Entity;
using Pharos.Sys.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;

namespace Pharos.Logic.BLL
{
    public class MakingMembershipCardBLL
    {
        private readonly MakingMembershipCardService _service = new MakingMembershipCardService();

        public OpResult CreateMakingMembershipCard(MakingMembershipCard _shipCard)
        {
            if (_shipCard.Id == 0)
            {
                //新增
                var top1Card = _service.GetFirstMakingMemberShipCard();
                var batchNum = 0;
                var batchNumStr = string.Empty;
                if (top1Card != null)
                {
                    int.TryParse(top1Card.BatchSN.Substring(top1Card.BatchSN.Length - 2, 2), out batchNum);
                }
                batchNum++;
                if (batchNum.ToString().Length < 2)
                {
                    batchNumStr = "0" + batchNum.ToString();
                }
                else
                {
                    batchNumStr = batchNum.ToString();
                }
                _shipCard.BatchSN = DateTime.Now.ToString("yyMMdd") + batchNumStr;
                _shipCard.CompanyId = CommonService.CompanyId;
                _shipCard.CreateDT = DateTime.Now;
                _shipCard.CreateUID = Sys.CurrentUser.UID;
                _shipCard.SecurityCode = new Random().Next(100000, 999999).ToString();
                return _service.CreateMakingMembershipCard(_shipCard);

            }
            else
            {
                //修改
                //var _memberCard = _service.GetShipCardById(_shipCard.Id);
                //_memberCard = _shipCard;
                return _service.UpdateShipCard(_shipCard);
            }
        }

        public object GetMakingMembershipCardByWhere(string cardType, string batchSN, short? state, string createUID, DateTime? beginDate, DateTime? endDate, out int count)
        {
            return _service.GetMakingMembershipCardByWhere(cardType, batchSN, state, createUID, beginDate, endDate, out count);
        }

        public OpResult UpdateState(short state, string ids)
        {
            return _service.UpdateState(state, ids);
        }

        public MakingMembershipCard GetShipCardById(int id)
        {
            return _service.GetShipCardById(id);
        }
        /// <summary>
        /// 获取所有制卡批次
        /// </summary>
        /// <returns></returns>
        public IEnumerable<MakingMembershipCard> GetBatchsToDropDown()
        {
            return _service.GetBatchsToDropDown();
        }
        /// <summary>
        /// 获取所有批次创建人
        /// </summary>
        /// <returns></returns>
        public IEnumerable<SysStoreUserInfo> GetCreateUserToDropDown()
        {
            return _service.GetCreateUserToDropDown();
        }

        public OpResult ExportMemberCard(string ids)
        {
            //查询对应数据
            try
            {
                #region MyRegion
                //var datas = _service.GetMakingMembershipCardByIds(ids);

                //var top1MemberCard = BaseService<MembershipCard>.CurrentRepository.Entities.OrderByDescending(o => o.CreateDT).FirstOrDefault();
                //var oldCardNo = top1MemberCard.CardSN;
                //var currentCardNo = string.Empty;
                //int num = 0;
                //if (top1MemberCard != null && top1MemberCard.CardSN.Length > 6)
                //{
                //    oldCardNo = top1MemberCard.CardSN.Substring(top1MemberCard.CardSN.Length - 7, 7);
                //    int.TryParse(oldCardNo, out num);
                //}
                ////统计当前的所有批次
                //var batchs = string.Empty;
                ////生成相应会员卡信息
                //foreach (var item in datas)
                //{
                //    //判断状态 0=未制卡
                //    if (item.State == 0)
                //    {
                //        batchs += "," + item.BatchSN;
                //        //生成会员卡数据
                //        for (int i = 0; i < item.MakeNumber; i++)
                //        {
                //            num++;
                //            currentCardNo = num.ToString();
                //            while (currentCardNo.Length < 7)
                //            {
                //                currentCardNo = currentCardNo.Insert(0, "0");
                //            }
                //            var cardinfo = BaseService<CardInfo>.CurrentRepository.Entities.Where(o => o.CardTypeId == item.CardType).FirstOrDefault();
                //            var cardType = 1;
                //            if (cardinfo != null)
                //            {
                //                if (cardinfo.CardType == 1)
                //                {
                //                    cardType = 2;
                //                }
                //            }
                //            //生成卡号：1位卡类型（1=固定面值；2=充值卡） 4位区号 7位商户号 7位序列号（港澳6位）
                //            var cardSn = cardType + "3640" + "1000101" + currentCardNo;

                //            var securitycode = ExtendHelper.GetRandomStr(7);
                //            var isExit = BaseService<MakingMembershipCard>.CurrentRepository.Entities.Any(o => o.SecurityCode == securitycode);
                //            while (isExit)
                //            {
                //                securitycode = ExtendHelper.GetRandomStr(7);
                //                isExit = BaseService<MakingMembershipCard>.CurrentRepository.Entities.Any(o => o.SecurityCode == securitycode);
                //            }

                //            MembershipCard _memberCard = new MembershipCard()
                //            {
                //                CompanyId = CommonService.CompanyId,
                //                BatchSN = item.BatchSN,
                //                CardSN = cardSn,
                //                CardType = cardinfo.CardTypeId,
                //                ReChargeTotal = 0,
                //                GiveTotal = 0,
                //                Balance = 0,
                //                Integer = 0,
                //                Deposit = 0,
                //                State = 0,
                //                ExpiryStart = item.ExpiryStart,
                //                ExpiryEnd = item.ExpiryEnd,
                //                CreateDT = DateTime.Now,
                //                CreateUID = Sys.CurrentUser.UID,
                //                SecurityCode = securitycode,
                //                ExportDT = DateTime.Now,//加入导出人，导出时间
                //                ExportUID = Pharos.Sys.CurrentUser.UID//
                //            };

                //            BaseService<MembershipCard>.CurrentRepository.Add(_memberCard, false);
                //        }
                //    }
                //} 

                //BaseService<MembershipCard>.CurrentRepository.Update(new MembershipCard());
                #endregion

                var datas = _service.GetMakingMembershipCardByIds(ids);
                if (datas == null || datas.Count == 0)
                {
                    return new OpResult() { Successed = false, Message = "找不到原数据！" };
                }

                StringBuilder batchs = new StringBuilder();
                foreach (var item in datas)
                {
                    batchs.Append("," + item.BatchSN);
                }


                //导出到excel  new ExportExcel() { IsBufferOutput = true, HeaderText = title }.ToExcel(fileName, dt, fields.ToArray(), names.ToArray(), mergerCols, totalCols);
                string fileName = "会员卡" + DateTime.Now.ToString("hhmmss");

                SqlParameter[] parms ={
                                     new SqlParameter("@batchs",batchs),
                                     new SqlParameter("@companyId",Sys.SysCommonRules.CompanyId)
                                 };
                string sql = "SELECT BatchSN,CardSN,c.CardName AS CardType,Balance,Integer,Deposit,ExpiryStart,ExpiryEnd,SecurityCode,s.FullName as ExportUID FROM dbo.MembershipCard AS m LEFT JOIN dbo.CardInfo AS c ON m.CardType=c.CardTypeId LEFT JOIN dbo.SysStoreUserInfo AS s ON m.ExportUID =s.UID where (( CAST(CHARINDEX(BatchSN, @batchs) AS int)) > 0)  AND m.CompanyId=@companyId";
                //var sql = BaseService<MembershipCard>.CurrentRepository.Entities.Where(o => o.CompanyId == CommonService.CompanyId && batchs.Contains(o.BatchSN));
                var dataResult = new DBHelper().DataTableText(sql, parms);
                string[] fields = { "BatchSN", "CardSN", "CardType", "Balance", "Integer", "Deposit", "ExpiryStart", "ExpiryEnd", "SecurityCode", "ExportUID" };
                string[] names = { "批次", "卡号", "卡类型", "可用金额", "可用积分", "押金", "有效期开始", "有效期截止", "防伪码", "导出人" };
                var fileUrl = new ExportExcel() { IsBufferOutput = true }.ToExcel(fileName, dataResult, fields, names, null);

                //更新导出时间
                SqlParameter[] param1 = { 
                                            new SqlParameter("@UID", Sys.CurrentUser.UID),
                                            new SqlParameter("@companyId", CommonService.CompanyId)
                                        };
                string updateSql = "UPDATE dbo.MembershipCard SET ExportDT=GETDATE(),ExportUID=@UID  where (( CAST(CHARINDEX(BatchSN, @batchs) AS int)) > 0)  AND m.CompanyId=@companyId";
                new DBHelper().DataTableText(updateSql, param1);


                return new OpResult() { Successed = true, Message = "操作成功！", Data = fileUrl };
            }
            catch (Exception e)
            {
                return new OpResult() { Successed = false, Message = e.Message };
            }
        }
        /// <summary>
        /// 生成会员卡
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public OpResult GenerateMemberCard(string ids)
        {
            try
            {
                var datas = _service.GetMakingMembershipCardByIds(ids);

                if (datas == null || datas.Count == 0)
                {
                    return new OpResult() { Successed = false, Message = "找不到原数据！" };
                }

                var top1MemberCard = BaseService<MembershipCard>.CurrentRepository.Entities.OrderByDescending(o => o.CreateDT).FirstOrDefault();
                var oldCardNo = top1MemberCard.CardSN;
                var currentCardNo = string.Empty;
                int num = 0;
                if (top1MemberCard != null && top1MemberCard.CardSN.Length > 6)
                {
                    oldCardNo = top1MemberCard.CardSN.Substring(top1MemberCard.CardSN.Length - 7, 7);
                    int.TryParse(oldCardNo, out num);
                }
                //统计当前的所有批次
                var batchs = string.Empty;
                //生成相应会员卡信息
                foreach (var item in datas)
                {
                    //判断状态 0=未制卡
                    if (item.State == 0)
                    {
                        batchs += "," + item.BatchSN;
                        //生成会员卡数据
                        for (int i = 0; i < item.MakeNumber; i++)
                        {
                            num++;
                            currentCardNo = num.ToString();
                            while (currentCardNo.Length < 7)
                            {
                                currentCardNo = currentCardNo.Insert(0, "0");
                            }
                            var cardinfo = BaseService<CardInfo>.CurrentRepository.Entities.Where(o => o.CardTypeId == item.CardType).FirstOrDefault();
                            var cardType = 1;
                            if (cardinfo != null)
                            {
                                if (cardinfo.CardType == 1)
                                {
                                    cardType = 2;
                                }
                            }
                            //生成卡号：1位卡类型（1=固定面值；2=充值卡） 4位区号 7位商户号 7位序列号（港澳6位）
                            var cardSn = cardType + "3640" + "1000101" + currentCardNo;

                            var securitycode = ExtendHelper.GetRandomStr(7);
                            var isExit = BaseService<MakingMembershipCard>.CurrentRepository.Entities.Any(o => o.SecurityCode == securitycode);
                            while (isExit)
                            {
                                securitycode = ExtendHelper.GetRandomStr(7);
                                isExit = BaseService<MakingMembershipCard>.CurrentRepository.Entities.Any(o => o.SecurityCode == securitycode);
                            }

                            MembershipCard _memberCard = new MembershipCard()
                            {
                                CompanyId = CommonService.CompanyId,
                                BatchSN = item.BatchSN,
                                CardSN = cardSn,
                                CardType = cardinfo.CardTypeId,
                                ReChargeTotal = 0,
                                GiveTotal = 0,
                                Balance = 0,
                                Integer = 0,
                                Deposit = 0,
                                State = 0,
                                ExpiryStart = item.ExpiryStart,
                                ExpiryEnd = item.ExpiryEnd,
                                CreateDT = DateTime.Now,
                                CreateUID = Sys.CurrentUser.UID,
                                SecurityCode = securitycode,
                                //ExportDT = DateTime.Now,//加入导出人，导出时间
                                //ExportUID = Pharos.Sys.CurrentUser.UID//
                            };

                            BaseService<MembershipCard>.CurrentRepository.Add(_memberCard, false);
                        }
                        //更新批次状态
                        _service.UpdateState(2, item.Id.ToString());
                    }
                }

                BaseService<MembershipCard>.CurrentRepository.Update(new MembershipCard());

                return new OpResult() { Successed = true, Message = "操作成功！" };
            }
            catch (Exception e)
            {
                return new OpResult() { Successed = false, Message = e.Message };
            }
        }
    }
}
