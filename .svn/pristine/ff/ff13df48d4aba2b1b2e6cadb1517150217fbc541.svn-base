using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Utility.Helpers;
using Pharos.Logic.Entity;
using Pharos.Utility;
namespace Pharos.Logic.BLL
{
    /// <summary>
    /// 公共类
    /// </summary>
    public class CommonService
    {
        /// <summary>
        /// 分解类别条件
        /// </summary>
        /// <param name="category">原传递值</param>
        /// <param name="big">大类</param>
        /// <param name="mid">中类</param>
        /// <param name="sub">子类</param>
        public static void GetCategory(string category, ref int? big, ref int? mid, ref int? sub)
        {
            if (category.IsNullOrEmpty()) return;
            var cates = category.TrimEnd(',').Split(',');
            if (cates.Length == 3)
            {
                big = int.Parse(cates[0]);
                mid = int.Parse(cates[1]);
                sub = int.Parse(cates[2]);
            }
            else if (cates.Length == 2)
            {
                big = int.Parse(cates[0]);
                mid = int.Parse(cates[1]);
            }
            else if (cates.Length == 1
                && !cates[0].IsNullOrEmpty())
            {
                big = int.Parse(cates[0]);
            }
        }

        /// <summary>
        /// 适用门店名称
        /// </summary>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public static string GetStoreTitleList(string storeId) 
        {
            string storeTitleList = "",storeTitle = "";
            string[] arr = storeId.Split(',');
            for (int i = 0; i < arr.Length; i++)
            {
                if (arr[0] == "")
                {
                    storeTitleList = "全部";
                    break;
                }
                else
                {
                    if (!string.IsNullOrEmpty(arr[i]))
                    {
                        var sId = arr[i];
                        storeTitle = WarehouseService.Find(o => o.StoreId == sId).Title;
                    }
                    storeTitleList += i > 0 ? ("、" + storeTitle) : storeTitle;
                }
            }
            return storeTitleList;     
        }
        public static int CompanyId
        {
            get
            {
                var companyId = System.Configuration.ConfigurationManager.AppSettings["CompanyId"];
                var cid=1;
                if (!companyId.IsNullOrEmpty())
                    cid = int.Parse(companyId);
                return cid;
            }
        }
        /// <summary>
        /// 导入提示信息
        /// </summary>
        /// <param name="errls">错误列表</param>
        /// <param name="count">导入总记录数</param>
        /// <returns></returns>
        public static OpResult GenerateImportHtml(List<string> errls,int count)
        {
            var op = new OpResult();
            if (errls!=null && errls.Any())
            {
                var html = "<ul><li>成功导入{0}条数据,余{1}条导入失败!</li><li><a href=\"javascript:void(0)\" onclick=\"viewErr()\">查看失败记录!</a></li></ul>";
                op.Message = string.Format(html, count - errls.Count, errls.Count);
                op.Descript = "<dl><dt>以下数据导入失败：</dt>{0}</dl>";
                string str = "";
                foreach (var err in errls)
                {
                    str += "<dd>" + err + "</dd>";
                }
                op.Descript = string.Format(op.Descript, str);
            }
            else
                op.Message = "<ul><li>成功导入" + count + "条数据!</li></ul>";
            op.Message = System.Web.HttpUtility.UrlEncode(op.Message);
            op.Descript = System.Web.HttpUtility.UrlEncode(op.Descript);
            op.Successed = true;
            return op;
        }
    }
}
