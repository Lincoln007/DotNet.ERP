using Pharos.POS.Retailing.Models.ApiParams;
using Pharos.POS.Retailing.Models.ApiReturnResults;
using Pharos.POS.Retailing.Models.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using Pharos.POS.Retailing.Extensions;

namespace Pharos.POS.Retailing.Models
{
    internal static class Global
    {
        internal const string PosMachineConfigPath = "PosMachine.Config";
        static Global()
        {
            MachineSettings = new Settings();
            MachineSettings.SettingsLoadEvent += MachineSettings_SettingsLoadEvent;
        }

        static void MachineSettings_SettingsLoadEvent(Settings settings)
        {
            RefreshPayStatus();
            RefreshCategoryTree();
        }
        public static Settings MachineSettings { get; set; }

        static LoginUserInfo currentSaleMen;
        public static LoginUserInfo CurrentSaleMen
        {
            get
            {
                if (currentSaleMen == null)
                {
                    throw new Exception("未登录");
                }
                else
                {
                    return currentSaleMen;
                }
            }
            set
            {
                currentSaleMen = value;
            }
        }

        internal static void RefreshPayStatus()
        {
            Task.Factory.StartNew(() =>
            {
                var result = ApiManager.Post<BaseApiParams, ApiRetrunResult<IEnumerable<PayItem>>>(@"api/PaysStatus", new BaseApiParams()
                {
                    CompanyToken = Global.MachineSettings.MachineInformations.CompanyToken,
                    MachineSn = Global.MachineSettings.MachineInformations.MachineSn,
                    // StoreId = Global.MachineSettings.MachineInformations.StoreId
                });
                if (result.Code == "200")
                {
                    Application.Current.Dispatcher.Invoke(new Action(() =>
                    {
                        Payways = result.Result;
                    }));
                }
                else
                {
                    //Toast.ShowMessage(result.Message, Application.Current.MainWindow);
                    Payways = new List<PayItem>() { new PayItem() { Mode = PosModels.PayMode.CashPay, ApiCodes = "11", DisableIcon = @"..\Images\ZhiFuFangShi\rmb-gray.png", EnableIcon = @"..\Images\ZhiFuFangShi\rmb.png", Enable = true, Title = "现金支付" } };
                }
            });
        }

        internal static void RefreshCategoryTree()
        {
            Task.Factory.StartNew(() =>
            {
                Application.Current.Dispatcher.Invoke(new Action(() =>
                {
                    categoryTree = categoryTree.InitCategory(Application.Current.MainWindow);
                }));
            });
        }
        static IEnumerable<TreeModel> categoryTree;
        public static IEnumerable<TreeModel> CategoryTree
        {
            get
            {
                RefreshCategoryTree();
                return categoryTree;
            }
        }
        static IEnumerable<PayItem> payways;
        public static IEnumerable<PayItem> Payways
        {
            get
            {
                RefreshPayStatus();
                return payways;
            }
            set
            {
                payways = value;
            }
        }
    }
}
