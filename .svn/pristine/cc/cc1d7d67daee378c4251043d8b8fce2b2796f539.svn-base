using Pharos.Infrastructure.Data.Normalize;
using Pharos.Logic.ApiData.Pos;
using Pharos.Logic.BLL;
using Pharos.Logic.Cache;
using Pharos.ObjectModels.DTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Pharos.Service.Retailing.Marketing
{
    /// <summary>
    /// 促销活动管理器
    /// </summary>
    public class MarketingManager : IDisposable
    {
        private bool disposable = false;
        MarketingRuleCache marketingRuleCache = new MarketingRuleCache();
        ActiveMarketingRuleCache activeMarketingRuleCache = new ActiveMarketingRuleCache();
        public MarketingManager(string storeId, int token, int autoRefreshInterval = 30)
        {
            StoreId = storeId;
            CompanyToken = token;

            AutoRefreshInterval = autoRefreshInterval;
            AutoRefresh();
            CurrentRules = new List<MarketingRule>();
            TimelinessTimes = new List<DateTime>();
        }
        private string Key
        {
            get
            {
                return KeyFactory.StoreKeyFactory(CompanyToken, StoreId);
            }
        }
        /// <summary>
        /// 自动刷新间隔（分钟）
        /// </summary>
        public int AutoRefreshInterval { get; set; }

        public int CompanyToken { get; set; }

        /// <summary>
        /// 门店Id
        /// </summary>
        public string StoreId { get; set; }
        /// <summary>
        /// 当前促销规则
        /// </summary>
        public IEnumerable<MarketingRule> CurrentRules
        {
            get
            {
                return activeMarketingRuleCache.Get(Key);
            }
            set
            {
                activeMarketingRuleCache.Set(Key, value);
            }
        }
        /// <summary>
        /// 门店促销活动缓存
        /// </summary>
        public IEnumerable<KeyValuePair<MarketingTimelinessLimit, MarketingRule>> CacheRules
        {
            get
            {
                return marketingRuleCache.Get(Key);
            }
            set
            {
                marketingRuleCache.Set(Key, value);
            }
        }

        /// <summary>
        /// 时效时间
        /// </summary>
        private List<DateTime> TimelinessTimes { get; set; }

        /// <summary>
        /// 时效线程
        /// </summary>
        private Thread TimelinessThread { get; set; }

        public dynamic RunningStates()
        {
            if (CacheRules == null)
            {
                CacheRules = new List<KeyValuePair<MarketingTimelinessLimit, MarketingRule>>();
            }
            if (CurrentRules == null)
            {
                CurrentRules = new List<MarketingRule>();
            }
            var result = new
            {
                StoreId,
                CompanyToken,
                TimelinessTimes = TimelinessTimes.Count,
                TimelinessThread = (TimelinessThread != null),
                CacheRules = CacheRules.Count(),
                CurrentRules = CurrentRules.Count(),
                Rules = CurrentRules.GroupBy(o => o.Type).ToDictionary(o => o.Key, o => o.Count())
            };
            return result;
        }
        /// <summary>
        /// 加载促销信息
        /// </summary>
        /// <returns></returns>
        private IEnumerable<KeyValuePair<MarketingTimelinessLimit, MarketingRule>> Load()
        {
#if Local
            var marketingService = Pharos.Logic.ApiData.Pos.DataAdapter.DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, string.Empty, CompanyToken, string.Empty);
#endif
#if (Local!=true)
            MarketingService marketingService = new MarketingService(StoreId, CompanyToken);
#endif
            return marketingService.GetMarketingRules();
        }
        /// <summary>
        ///自动重载促销信息
        /// </summary>
        private void AutoRefresh()
        {
            Task.Factory.StartNew(() =>
            {
                while (!disposable)
                {
                    try
                    {
                        CacheRules = Load();

                        //刷新时效管理器
                        if (TimelinessThread != null)
                        {
                            TimelinessThread.Abort();
                            TimelinessThread = null;
                        }
                        TimelinessTimes.Add(DateTime.Now);
                        TimeRangeManager();
                    }
                    catch { }

                    //等待下次更新
                    Thread.Sleep(new TimeSpan(0, AutoRefreshInterval, 0));
                }
            });
        }


        /// <summary>
        /// 刷新促销规则托管
        /// </summary>
        private void RefreshHosted()
        {
            var cacheRules = CacheRules;
            TimelinessTimes.Clear();
            List<MarketingRule> rules = new List<MarketingRule>();
            foreach (var item in cacheRules)
            {
                var now = DateTime.Now;
                item.Value.Enable = true;
                if (item.Key.StartTime <= now && item.Key.OverTime >= now)
                {
                    var ranges = item.Key.TimeRanges;
                    if (ranges == null || ranges.Count() == 0)//无时效约束
                    {
                        rules.Add(item.Value);//启动规则
                        TimelinessTimes.Add(item.Key.OverTime);//添加过期时间
                    }
                    else//有时效约束
                    {
                        foreach (var range in ranges)
                        {
                            var start = DateTime.Parse(range.Key);
                            var end = DateTime.Parse(range.Value);
                            if (start <= now && end >= now)
                            {
                                TimelinessTimes.Add(end);//添加时效约束
                                rules.Add(item.Value);//启动规则
                                TimelinessTimes.Add(item.Key.OverTime);

                            }
                            else if (start >= now)
                            {
                                TimelinessTimes.Add(start);//添加启动规则时间
                            }
                        }
                    }
                }
                else if (item.Key.StartTime > now)
                {
                    TimelinessTimes.Add(item.Key.StartTime);//添加启动规则时间
                }
            }
            var repeatRanges = rules.Where(o => o.Type == MarketingType.Danpinzhekou).GroupBy(o => o.BarcodeRange.FirstOrDefault());//处理单品折扣失效覆盖
            foreach (var item in repeatRanges)
            {
                if (item.Count() > 1)
                {
                    var maxDate = item.Max(o => o.CreateRuleDate);
                    foreach (var rule in item)
                    {
                        if (rule.CreateRuleDate != maxDate)
                        {
                            rule.Enable = false;
                        }
                        else
                        {
                            var cache = cacheRules.FirstOrDefault(o => o.Value == rule);
                            TimelinessTimes.Add(cache.Key.OverTime);
                        }
                    }
                }
            }
            CurrentRules = rules;
        }


        /// <summary>
        /// 活动时效管理器
        /// </summary>
        private void TimeRangeManager()
        {
            var task = Task.Factory.StartNew(() =>
            {
                TimelinessThread = Thread.CurrentThread;
                while (!disposable)
                {
                    if (TimelinessTimes != null && TimelinessTimes.Count > 0)
                    {
                        var dates = TimelinessTimes.OrderBy(o => o);
                        var date = dates.FirstOrDefault();
                        var now = DateTime.Now;
                        var timeSpan = date - now;
                        if (date > now)
                            Thread.Sleep(timeSpan);
                        RefreshHosted();
                    }
                    else
                    {
                        Thread.Sleep(1000);
                    }
                }
            });
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                // free managed resources
                if (TimelinessThread != null)
                {
                    TimelinessThread.Abort();
                    TimelinessThread = null;
                }
            }
        }
        ~MarketingManager()
        {
            Dispose(false);
        }
    }
}
