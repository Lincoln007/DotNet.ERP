using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace Pharos.Logic.DAL
{
    internal class OrderDAL:BaseDAL
    {
        public DataTable LoadDetailList(string orderId)
        {
            string sql = @"SELECT a.*,a.IndentNum InboundNumber,b.SubUnit,b.Title,b.ProductCode,b.CategorySN,b.Expiry,
                STUFF((SELECT '<br/>'+Barcode+' '+dbo.F_ProductNameBybarcode(Barcode)+' '+ dbo.F_NumberAutoStr(IndentNum)+'件' FROM IndentOrderList WHERE Nature=1 AND resbarcode=a.Barcode AND IndentOrderId=a.IndentOrderId FOR XML PATH('')),1,11,'') Detail,
                STUFF((SELECT ','+Barcode+'~'+CAST(IndentNum AS VARCHAR(20)) from IndentOrderList WHERE Nature=1 AND resbarcode=a.Barcode AND IndentOrderId=a.IndentOrderId FOR XML PATH('')),1,1,'') Gift
                FROM dbo.IndentOrderList a 
                INNER JOIN dbo.Vw_Product b ON b.Barcode=a.Barcode
                WHERE a.Nature=0 AND a.IndentOrderId='" + orderId+"'";
            //sql += "AND b.StartVal<=" + ordernum + " and b.EndVal>=" + ordernum;
            DataTable dt = new DataTable();
            using (EFDbContext db = new EFDbContext())
            {
                //var dt= db.Database.SqlQuery<DataTable>(sql, new SqlParameter[] { });
                var conn = db.Database.Connection;
                conn.Open();
                var cmd = conn.CreateCommand();
                cmd.CommandText = sql;
                var dr = cmd.ExecuteReader();
                for (int i = 0; i < dr.FieldCount; i++)
                {
                    dt.Columns.Add(dr.GetName(i), dr.GetFieldType(i));
                }
                int k = 0;
                while (dr.Read())
                {
                    var row = dt.NewRow();
                    foreach (DataColumn col in dt.Columns)
                    {
                        var obj = dr[col.ColumnName];
                        row[col.ColumnName] = obj;
                    }
                    dt.Rows.Add(row);
                    k++;
                }
                dr.Close();
                conn.Close();
            }
            return dt;
        }
    }
}
