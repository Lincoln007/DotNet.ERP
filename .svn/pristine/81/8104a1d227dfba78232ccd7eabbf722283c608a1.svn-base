using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Pharos.Logic.MemberDomain.QuanChengTaoProviders
{
    public enum IntegralProviderType
    {
        [Description("按条码计量")]
        BarcodeIntegralProvider = 1
    }

    public enum MeteringMode
    {
        [MeteringModeDescriptionAttribute(IntegralProviderType.BarcodeIntegralProvider, "按金额计量")]
        AmountCounter = 1,


    }

    public class MeteringModeDescriptionAttribute : DescriptionAttribute
    {
        public MeteringModeDescriptionAttribute(IntegralProviderType type, string description)
            : base(description)
        {
            IntegralProviderType = type;
        }
        public IntegralProviderType IntegralProviderType { get; set; }
    }

    public static class EnumExtensions
    {
        public static IDictionary<int, string> GetIntegralProviderTypeTitleAndValue()
        {
            var dict = new Dictionary<int, string>();
            var enumType = typeof(IntegralProviderType);
            var values = Enum.GetValues(enumType);
            foreach (var value in values)
            {
                string name = Enum.GetName(enumType, value);
                if (name != null)
                {
                    // 获取枚举字段。
                    FieldInfo fieldInfo = enumType.GetField(name);
                    if (fieldInfo != null)
                    {
                        // 获取描述的属性。
                        DescriptionAttribute attr = Attribute.GetCustomAttribute(fieldInfo,
                            typeof(DescriptionAttribute), false) as DescriptionAttribute;
                        if (attr != null)
                        {
                            dict.Add((int)value, attr.Description);
                        }
                    }
                }
            }
            return dict;
        }
        public static IDictionary<int, string> GetMeteringModeDescriptionAttributeTitleAndValue(IntegralProviderType integralProviderType)
        {
            var dict = new Dictionary<int, string>();
            var enumType = typeof(MeteringMode);
            var values = Enum.GetValues(enumType);
            foreach (var value in values)
            {
                string name = Enum.GetName(enumType, value);
                if (name != null)
                {
                    // 获取枚举字段。
                    FieldInfo fieldInfo = enumType.GetField(name);
                    if (fieldInfo != null)
                    {
                        // 获取描述的属性。
                        Attribute[] attrs = Attribute.GetCustomAttributes(fieldInfo,
                            typeof(MeteringModeDescriptionAttribute), false);
                        var attr = attrs.FirstOrDefault(o => ((MeteringModeDescriptionAttribute)o).IntegralProviderType == integralProviderType);
                        if (attr != null)
                        {
                            dict.Add((int)value, ((MeteringModeDescriptionAttribute)attr).Description);
                        }
                    }
                }
            }
            return dict;
        }

    }
}
