using Pharos.Logic.OMS.DAL;
using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.IDAL;
using Pharos.Utility;
using Pharos.Utility.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using Pharos.Logic.OMS.DAL;
using System.Transactions;
using System.Web;

namespace Pharos.Logic.OMS.BLL
{
    /// <summary>
    /// 代理商档案BLL
    /// </summary>
    public class AgentsInfoService : BaseService
    {

        [Ninject.Inject]
        // 代理商档案
        IBaseRepository<AgentsInfo> AgentsInfoRepository { get; set; }

        [Ninject.Inject]
        // 代理商下级关系
        IBaseRepository<AgentsRelationship> AgentsRelationshipRepository { get; set; }

        [Ninject.Inject]
        // 字典
        IBaseRepository<SysDataDictionary> sysDataDictionaryRepository { get; set; }

        //代理商下级关系
        [Ninject.Inject]
        AgentsRelationshipService agentsRelationshipService { get; set; }

        //结算账户信息
        [Ninject.Inject]
        BankCardInfoService bankCardInfoService { get; set; }

        //代理商支付渠道
        [Ninject.Inject]
        AgentPayService agentPayService { get; set; }

        /// <summary>
        /// 获取最大AgentsId
        /// </summary>
        /// <returns></returns>
        public int getMaxAgentsId()
        {
            //return TradersRepository.GetQuery().Max(o => (int?)o.CID).GetValueOrDefault() + 1;
            int AgentsId = 0;
            AgentsId = AgentsInfoRepository.GetQuery().Max(o => (int?)o.AgentsId).GetValueOrDefault();
            if (AgentsId < 100001)
            {
                AgentsId = 100001;
            }
            else
            {
                AgentsId = AgentsId + 1;
                if (AgentsId >= 999999)
                {
                    AgentsId = -1;
                }
            }
            return AgentsId;
        }

        /// <summary>
        /// 增加或者修改
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fu">证件照</param>
        /// <returns></returns>
        public OpResult SaveOrUpdate(AgentsInfo model, HttpPostedFileBase hpf)
        {

            //代理商全称是否存在
            IQueryable<AgentsInfo> isExistFullName = null;
            if (model.Id == 0)
            {
                isExistFullName = AgentsInfoRepository.GetQuery(o => o.FullName == model.FullName);
            }
            else
            {
                isExistFullName = AgentsInfoRepository.GetQuery(o => o.FullName == model.FullName && o.Id != model.Id);
            }
            if (isExistFullName.Any())
            {
                return OpResult.Fail("该代理商全称已经存在");
            }

            //代理商简称是否存在
            IQueryable<AgentsInfo> isExistName = null;
            if (model.Id == 0)
            {
                isExistName = AgentsInfoRepository.GetQuery(o => o.Name == model.Name);
            }
            else
            {
                isExistName = AgentsInfoRepository.GetQuery(o => o.Name == model.Name && o.Id != model.Id);
            }
            if (isExistName.Any())
            {
                return OpResult.Fail("该代理商简称已经存在");
            }

            if (model.Id == 0)
            {
                model.AgentsId = getMaxAgentsId();
                AgentsInfoRepository.Add(model);
            }
            else
            {
                var source = AgentsInfoRepository.Get(model.Id);
                model.ToCopyProperty(source, new List<string>() { "AgentsId", "CreateTime", "CreateUid" });
            }
            //上传证件照
            if (!string.IsNullOrEmpty(hpf.FileName))
            {
               string[] s= Tool.fileUpload(hpf, Tool.getIdCardPhotoPath(model.AgentsId));
               if (s[0] != "文件上传成功")
               {
                   return OpResult.Fail(s[0]);
               }
            }
            AgentsInfoRepository.SaveChanges();
            return OpResult.Success(model.AgentsId.ToString());
        }

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="agentsInfo">基本信息</param>
        /// <param name="hpf">证件照</param>
        /// <param name="nvl"></param>
        /// <returns></returns>
        public OpResult Save(AgentsInfo agentsInfo, HttpPostedFileBase hpf, System.Collections.Specialized.NameValueCollection nvl)
        {
            try
            {
                using (EFDbContext context = new EFDbContext())
                {
                    using (TransactionScope transaction = new TransactionScope())
                    {

                        //基本信息
                        OpResult op = SaveOrUpdate(agentsInfo, hpf);
                        //代理商编号
                        int AgentsId = Convert.ToInt32(op.Message);

                        //是否存在下级
                        IQueryable<AgentsInfo> isExistSub = null;
                        isExistSub = AgentsInfoRepository.GetQuery(o=>o.PAgentsId==AgentsId);
                        //不存在下级
                        if (!isExistSub.Any())
                        {
                            //删除已经存在的代理商下级关系
                            int[] ids = AgentsRelationshipRepository.GetQuery(o => o.AgentsId == AgentsId).Select(o => o.Id).ToArray();
                            agentsRelationshipService.Deletes(ids);

                            //上级代理商编号
                            int pid = Convert.ToInt32(op.Message);
                            //代理商下级关系
                            for (int i = 0; i < 2; i++)
                            {
                                AgentsRelationship agentsRelationship = new AgentsRelationship();
                                AgentsInfo aInfo = AgentsInfoRepository.GetQuery(o => o.AgentsId == pid).FirstOrDefault();
                                pid = aInfo.AgentsId;
                                agentsRelationship.SubAgentsId = AgentsId;
                                agentsRelationship.AgentsId = pid;
                                agentsRelationship.Status = 1;
                                if (pid == 0 && i == 0)
                                {
                                    agentsRelationship.Depth = 0;
                                    agentsRelationshipService.SaveOrUpdate(agentsRelationship);
                                    break;
                                }
                                else if (pid == 0 && i != 0)
                                {
                                    break;
                                }
                                else if (pid != 0)
                                {
                                    agentsRelationship.Depth = Convert.ToInt16(i + 1);
                                }
                                agentsRelationshipService.SaveOrUpdate(agentsRelationship);
                            }
                        }

                        //结算银行机构
                        string Agency = (nvl["Agency"] ?? "").Trim();
                        //结算账户类型
                        string BillingType = (nvl["BillingType"] ?? "").Trim();
                        //结算卡号
                        string CardNum = (nvl["CardNum"] ?? "").Trim();
                        //账户名称
                        string CardName = (nvl["CardName"] ?? "").Trim();
                        //账户状态
                        string Status = (nvl["Status"] ?? "").Trim();
                        //交易支付通道
                        string PayChannel = (nvl["PayChannel"] ?? "").Trim();
                        //成本费率（%）
                        string Cost = (nvl["Cost"] ?? "").Trim();
                        //下级费率（%）
                        string Lower = (nvl["Lower"] ?? "").Trim();

                        //结算账户
                        BankCardInfo bankCardInfo = new BankCardInfo();
                        bankCardInfo.AgentsId = AgentsId;
                        bankCardInfo.Type = 1;
                        bankCardInfo.Agency = Agency;
                        bankCardInfo.BillingType = BillingType == "" ? -1 : Convert.ToInt32(BillingType);
                        bankCardInfo.CardNum = CardNum;
                        bankCardInfo.CardName = CardName;
                        bankCardInfo.Status = Status == "" ? -1 : Convert.ToInt32(Status);
                        bankCardInfoService.SaveOrUpdate(bankCardInfo);

                        //支付渠道
                        AgentPay agentPay = new AgentPay();
                        agentPay.AgentsId = AgentsId;
                        agentPay.PayChannel = PayChannel == "" ? -1 : Convert.ToInt32(PayChannel);
                        agentPay.Cost = Cost == "" ? Convert.ToDecimal("0.00") : Convert.ToDecimal(Cost);
                        agentPay.Lower = Lower == "" ? Convert.ToDecimal("0.00") : Convert.ToDecimal(Lower);
                        agentPayService.SaveOrUpdate(agentPay);

                        //提交事务
                        transaction.Complete();
                        return OpResult.Success();
                    }
                }
            }
            catch (Exception e)
            {
                return OpResult.Fail(e.Message);
            }
        }


        /// <summary>
        /// 获取字典（SysDataDictionary）
        /// </summary>
        /// <param name="DicSN"></param>
        /// <returns></returns>
        public SysDataDictionary getData(int DicSN)
        {
            return sysDataDictionaryRepository.Find(o=>o.DicSN==DicSN);
        }


    }
}
