using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.Sale.Suspend
{
    /// <summary>
    /// 挂单列表
    /// </summary>
    public class SuspendList : List<SuspendDetails>
    {
        public SuspendList()
        {
        }
        public SuspendList(string storeId, string machineSn)
        {
            StoreId = storeId;
            MachineSn = machineSn;
        }
        public string StoreId { get; set; }
        public string MachineSn { get; set; }
        public static SuspendList Factory(string storeId, string machineSn, string path)
        {
            SuspendList result = null;
            try
            {
                var fileName = string.Format("SuspendList{0}_{1}.JSON", storeId, machineSn);
                var filePath = Path.Combine(path, fileName);
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }
                if (File.Exists(filePath))
                {
                    using (StreamReader sr = new StreamReader(filePath))
                    {
                        JsonSerializer serializer = new JsonSerializer();
                        JsonReader reader = new JsonTextReader(sr);
                        result = serializer.Deserialize<SuspendList>(reader);
                    }
                }
            }
            catch (Exception)
            {

            }
            if (result == null)
            {
                result = new SuspendList(storeId, machineSn);
            }
            return result;
        }

        public void Save(string path, string storeId, string machineSn)
        {
            var fileName = string.Format("SuspendList{0}_{1}.JSON", storeId, machineSn);
            var filePath = Path.Combine(path, fileName);
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            using (StreamWriter sw = new StreamWriter(filePath, false, Encoding.UTF8))
            {
                JsonSerializer serializer = new JsonSerializer();
                JsonWriter writer = new JsonTextWriter(sw);
                serializer.Serialize(writer, this);
                writer.Close();
                sw.Close();
            }
        }
    }
}
