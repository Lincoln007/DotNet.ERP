// --------------------------------------------------
// Copyright (C) 2015 版权所有
// 创 建 人：蔡少发
// 创建时间：2015-05-27
// 描述信息：数据访问小助手
// --------------------------------------------------

using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Collections.Generic;
using AX.CSF.DBHelper;

namespace Pharos.DBFramework
{
    /// <summary>
    /// 数据访问小助手
    /// </summary>
    public class DBHelper
    {
        #region 初始化

        /// <summary>
        /// 初始化
        /// </summary>
        public DBHelper()
        {
            this.Init();
        }

        private void Init()
        {
            bool isEncrypt = true;
            string conn = string.Empty;
            string connEncrypt = Utility.Config.GetAppSettings("ConnEncrypt");

            if (!string.IsNullOrEmpty(connEncrypt) && bool.TryParse(connEncrypt, out isEncrypt))
            {
                isEncrypt = (isEncrypt == true);
            }

            Sql = new SQLServerDAL();
            Sql.IsConnEncrypt(isEncrypt);

            if (string.IsNullOrEmpty(Utility.Config.GetAppSettings("ConnectionString")))
            {
                if (Utility.DataCache.Get("ConnectionString") == null
                    || Convert.ToString(Utility.DataCache.Get("ConnectionString")) == "非法访问")
                {
                    conn = Convert.ToString(Utility.DataCache.Get("ConnectionString"));
                }
                Sql.ConnectionString = conn;
            }

            this.ConnectionString = Sql.ConnectionString;
        }

        public string ConnectionString { get; private set; }

        private AX.CSF.DBHelper.IDAL Sql;

        /// <summary>
        /// 异常信息
        /// </summary>
        public string Error { get; private set; }

        #endregion

        #region ExecuteNonQuery

        /// <summary>
        /// 逐个执行存储过程命令（注：需开启 SET NOCOUNT 为OFF，否则ON 时受影响行会返回为0）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <returns>返回受影响行数</returns>
        public int ExecuteNonQuery(string storProcName)
        {
            return Sql.ExecuteNonQuery(storProcName);
        }

        /// <summary>
        /// 逐个执行存储过程命令（注：需开启 SET NOCOUNT 为OFF，否则ON 时受影响行会返回为0）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回受影响行数</returns>
        public int ExecuteNonQuery(string storProcName, SqlParameter[] cmdParms)
        {
            return Sql.ExecuteNonQuery(storProcName, cmdParms);
        }

        /// <summary>
        /// 逐个执行SQL语句
        /// </summary>
        /// <param name="sqlString">SQL语句参数化</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回受影响行数</returns>
        public int ExecuteNonQueryText(string sqlString, SqlParameter[] cmdParms)
        {
            return Sql.ExecuteNonQuery(sqlString, cmdParms, CommandType.Text);
        }

        #endregion

        #region ExecuteScalar

        /// <summary>
        /// 逐个执行存储过程命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <returns>返回结果集的第一行第一列</returns>
        public object ExecuteScalar(string storProcName)
        {
            return Sql.ExecuteScalar(storProcName);
        }

        /// <summary>
        /// 逐个执行存储过程命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回结果集的第一行第一列</returns>
        public object ExecuteScalar(string storProcName, SqlParameter[] cmdParms)
        {
            return Sql.ExecuteScalar(storProcName, cmdParms);
        }

        /// <summary>
        /// 逐个执行SQL语句
        /// </summary>
        /// <param name="sqlString">SQL语句参数化</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回结果集的第一行第一列</returns>
        public object ExecuteScalarText(string sqlString, SqlParameter[] cmdParms)
        {
            return Sql.ExecuteScalar(sqlString, cmdParms, CommandType.Text);
        }

        #endregion

        #region ExecuteReader

        /// <summary>
        /// 执行查询命令（向前只读）（注意：调用该方法后，一定要对 DbDataReader 进行Close）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <returns>返回 DbDataReader</returns>
        public SqlDataReader ExecuteReader(string storProcName)
        {
            return (SqlDataReader)Sql.ExecuteReader(storProcName);
        }

        /// <summary>
        /// 执行查询命令（向前只读）（注意：调用该方法后，一定要对 DbDataReader 进行Close）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 DbDataReader</returns>
        public SqlDataReader ExecuteReader(string storProcName, SqlParameter[] cmdParms)
        {
            return (SqlDataReader)Sql.ExecuteReader(storProcName, cmdParms);
        }
        
        /// <summary>
        /// 逐个执行SQL语句
        /// </summary>
        /// <param name="sqlString">SQL语句参数化</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 DbDataReader</returns>
        public SqlDataReader ExecuteReaderText(string sqlString, SqlParameter[] cmdParms)
        {
            return (SqlDataReader)Sql.ExecuteReader(sqlString, cmdParms, CommandType.Text);
        }

        /// <summary>
        /// 逐个执行SQL语句
        /// </summary>
        /// <param name="sqlString">SQL语句参数化</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> ExecuteReaderText<T>(string sqlString, SqlParameter[] cmdParms)
        {
            DbDataReader dr = (SqlDataReader)Sql.ExecuteReader(sqlString, cmdParms, CommandType.Text);

            return ToEntity.ToList<T>((SqlDataReader)dr, true);
        }

        /// <summary>
        /// 执行查询命令（向前只读）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> ExecuteReader<T>(string storProcName, SqlParameter[] cmdParms)
        {
            DbDataReader dr = Sql.ExecuteReader(storProcName, cmdParms);

            return ToEntity.ToList<T>((SqlDataReader)dr, true);
        }

        /// <summary>
        /// 执行查询命令（向前只读）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> ExecuteReader<T>(string storProcName)
        {
            DbDataReader dr = Sql.ExecuteReader(storProcName);

            return ToEntity.ToList<T>((SqlDataReader)dr, true);
        }

        #endregion

        #region DataSet

        /// <summary>
        /// 逐条执行查询命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <returns>返回 DataSet</returns>
        public DataSet DataSet(string storProcName)
        {
            return Sql.DataSet(storProcName);
        }

        /// <summary>
        /// 逐条执行查询命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 DataSet</returns>
        public DataSet DataSet(string storProcName, SqlParameter[] cmdParms)
        {
            return Sql.DataSet(storProcName, cmdParms);
        }

        /// <summary>
        /// 逐个执行SQL语句
        /// </summary>
        /// <param name="sqlString">SQL语句参数化</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 DbDataReader</returns>
        public DataSet DataSetText(string sqlString, SqlParameter[] cmdParms)
        {
            return Sql.DataSet(sqlString, cmdParms, CommandType.Text);
        }

        #endregion

        #region DataTable

        /// <summary>
        /// 逐条执行查询命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <returns>返回 DataTable</returns>
        public DataTable DataTable(string storProcName)
        {
            return Sql.DataTable(storProcName);
        }

        /// <summary>
        /// 逐条执行查询命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 DataTable</returns>
        public DataTable DataTable(string storProcName, SqlParameter[] cmdParms)
        {
            return Sql.DataTable(storProcName, cmdParms);
        }


        /// <summary>
        /// 逐条执行查询命令（适用于存储过程的分页）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <param name="paging">Utility.Paging 分页属性</param>
        /// <returns>返回 DataTable</returns>
        public DataTable DataTable(string storProcName, SqlParameter[] cmdParms, ref Utility.Paging paging)
        {
            DataTable dt = Sql.DataTable(storProcName, cmdParms);

            int recordTotal = 0;
            int recordStart = 0;
            int recordEnd = 0;

            if (dt != null && dt.Rows.Count > 0 && dt.Columns.Contains("RecordTotal"))
            {
                recordTotal = Convert.ToInt32(dt.Rows[0]["RecordTotal"]);
                dt.Columns.Remove("RecordTotal");

                if (dt.Columns.Contains("RecordStart"))
                {
                    recordStart = Convert.ToInt32(dt.Rows[0]["RecordStart"]);
                    dt.Columns.Remove("RecordStart");
                }
                if (dt.Columns.Contains("RecordEnd"))
                {
                    recordEnd = Convert.ToInt32(dt.Rows[0]["RecordEnd"]);
                    dt.Columns.Remove("RecordEnd");
                }
            }

            paging.SetPaging(paging.PageIndex, paging.PageSize, recordTotal, recordStart, recordEnd);

            return dt;
        }

        /// <summary>
        /// 逐个执行SQL语句
        /// </summary>
        /// <param name="sqlString">SQL语句参数化</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 DbDataReader</returns>
        public DataTable DataTableText(string sqlString, SqlParameter[] cmdParms)
        {
            return Sql.DataTable(sqlString, cmdParms, CommandType.Text);
        }

        /// <summary>
        /// 逐个执行SQL语句
        /// </summary>
        /// <param name="sqlString">SQL语句参数化</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> DataTableText<T>(string sqlString, SqlParameter[] cmdParms)
        {
            DataTable dt = Sql.DataTable(sqlString, cmdParms, CommandType.Text);

            return ToEntity.ToList<T>(dt);
        }

        /// <summary>
        /// 逐条执行查询命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> DataTable<T>(string storProcName, SqlParameter[] cmdParms)
        {
            DataTable dt = Sql.DataTable(storProcName, cmdParms);

            return ToEntity.ToList<T>(dt);
        }

        /// <summary>
        /// 逐条执行查询命令（适用于存储过程的分页）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="cmdParms">参数集合</param>
        /// <param name="paging">Utility.Paging 分页属性</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> DataTable<T>(string storProcName, SqlParameter[] cmdParms, ref Utility.Paging paging)
        {
            DataTable dt = Sql.DataTable(storProcName, cmdParms);

            return ToEntity.ToList<T>(dt, ref paging);
        }

        /// <summary>
        /// 逐条执行查询命令
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> DataTable<T>(string storProcName)
        {
            DataTable dt = Sql.DataTable(storProcName);

            return ToEntity.ToList<T>(dt);
        }

        /// <summary>
        /// 逐条执行查询命令（适用于存储过程的分页）
        /// </summary>
        /// <param name="storProcName">存储过程名称</param>
        /// <param name="paging">Utility.Paging 分页属性</param>
        /// <returns>返回 List 实体集</returns>
        public List<T> DataTable<T>(string storProcName, ref Utility.Paging paging)
        {
            DataTable dt = Sql.DataTable(storProcName);

            return ToEntity.ToList<T>(dt, ref paging);
        }
        
        #endregion

        #region 填充实体数据

        /// <summary>
        /// 填充实体数据
        /// </summary>
        /// <example>
        /// <![CDATA[
        /// 使用示例1：
        /// Entity.UserInfo ui;
        /// SqlDataReader dr = dal.GetUserInfo(uid);
        /// if (dr != null)
        /// {
        ///     ui = Logic.DBHelper.ToEntity.ToRow<Entity.UserInfo>(dr, true);
        /// }else{
        ///     new Entity.UserInfo();
        /// }
        /// ]]>
        /// </example>
        public class ToEntity
        {
            #region 将 SqlDataReader 填充到单个实体类

            /// <summary>
            /// 将 SqlDataReader 填充到单个实体类（调用完后自动关闭SqlDataReader）
            /// </summary>
            /// <typeparam name="T">Entity 对象</typeparam>
            /// <param name="reader">SqlDataReader</param>
            /// <returns>返回 Entity</returns>
            public static T ToRow<T>(SqlDataReader reader)
            {
                return AX.CSF.DBHelper.ToEntity.ToRow<T>(reader, true);
            }

            /// <summary>
            /// 将 SqlDataReader 填充到单个实体类
            /// </summary>
            /// <typeparam name="T">Entity 对象</typeparam>
            /// <param name="reader">SqlDataReader</param>
            /// <param name="isCloseReaderFinish">Reader完成后是否关闭</param>
            /// <returns>返回 Entity</returns>
            public static T ToRow<T>(SqlDataReader reader, bool isCloseReaderFinish)
            {
                return AX.CSF.DBHelper.ToEntity.ToRow<T>(reader, isCloseReaderFinish);
            }

            #endregion

            #region 将 SqlDataReader 填充到 List 实体集

            /// <summary>
            /// 将 SqlDataReader 填充到 List 实体集（调用完后自动关闭SqlDataReader）
            /// </summary>
            /// <typeparam name="T">List 实体集</typeparam>
            /// <param name="reader">SqlDataReader</param>
            /// <returns>返回 List 实体集</returns>
            public static List<T> ToList<T>(SqlDataReader reader)
            {
                return AX.CSF.DBHelper.ToEntity.ToList<T>(reader, true);
            }

            /// <summary>
            /// 将 SqlDataReader 填充到 List 实体集
            /// </summary>
            /// <typeparam name="T">List 实体集</typeparam>
            /// <param name="reader">SqlDataReader</param>
            /// <param name="isCloseReaderFinish">Reader完成后是否关闭</param>
            /// <returns>返回 List 实体集</returns>
            public static List<T> ToList<T>(SqlDataReader reader, bool isCloseReaderFinish)
            {
                return AX.CSF.DBHelper.ToEntity.ToList<T>(reader, isCloseReaderFinish);
            }

            #endregion

            #region 将 DataTable 填充到 List 实体集

            /// <summary>
            /// 将 DataTable 填充到 List 实体集
            /// </summary>
            /// <typeparam name="T">List 实体集</typeparam>
            /// <param name="dt">DataTable 对象</param>
            /// <returns>返回 List 实体集</returns>
            public static List<T> ToList<T>(DataTable dt)
            {
                return AX.CSF.DBHelper.ToEntity.ToList<T>(dt);
            }

            /// <summary>
            /// 将 DataTable 填充到 List 实体集（适用于存储过程的分页）
            /// </summary>
            /// <typeparam name="T">List 实体集</typeparam>
            /// <param name="dt">DataTable 对象</param>
            /// <param name="paging">Utility.Paging 分页属性</param>
            /// <returns>返回 List 实体集</returns>
            public static List<T> ToList<T>(DataTable dt, ref Utility.Paging paging)
            {
                int recordTotal = 0;
                int recordStart = 0;
                int recordEnd = 0;
                
                if (dt != null && dt.Rows.Count > 0 && dt.Columns.Contains("RecordTotal"))
                {
                    recordTotal = Convert.ToInt32(dt.Rows[0]["RecordTotal"]);
                    dt.Columns.Remove("RecordTotal");

                    if (dt.Columns.Contains("RecordStart"))
                    {
                        recordStart = Convert.ToInt32(dt.Rows[0]["RecordStart"]);
                        dt.Columns.Remove("RecordStart");
                    }
                    if (dt.Columns.Contains("RecordEnd"))
                    {
                        recordEnd = Convert.ToInt32(dt.Rows[0]["RecordEnd"]);
                        dt.Columns.Remove("RecordEnd");
                    }
                }
                
                paging.SetPaging(paging.PageIndex, paging.PageSize, recordTotal, recordStart, recordEnd);

                return AX.CSF.DBHelper.ToEntity.ToList<T>(dt);
            }

            #endregion
        }

        #endregion
    }
}
