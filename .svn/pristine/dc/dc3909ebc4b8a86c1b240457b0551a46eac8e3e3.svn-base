using Pharos.SocketClient.Retailing.CommandProviders;
using Pharos.SocketClient.Retailing.Protocol.ReceiveFilters;
using SuperSocket.ClientEngine;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Net;
using Newtonsoft.Json;
using System.IO;
using System.Threading.Tasks;
using System.Threading;

namespace Pharos.SocketClient.Retailing.Protocol.Clients
{
    public class PosStoreClient : EasyClient, IDisposable
    {
        private Dictionary<string, Type> cmdRount = new Dictionary<string, Type>();
        private bool isDispose;
        public PosStoreClient()
        {
            ReflectCommand();
            isDispose = false;
            this.Initialize(new PosStoreFixedHeaderReceiveFilter(new PosStoreCommandNameProvider()), (package) =>
            {
                if (cmdRount.ContainsKey(package.Key) && cmdRount[package.Key] != null)
                {
                    var type = cmdRount[package.Key];
                    var cmd = (ICommand)AppDomain.CurrentDomain.CreateInstance(type.Assembly.FullName, type.ToString()).Unwrap();
                    if (cmd.Key == package.Key)
                    {
                        cmd.Execute(this, package);
                    }
                }
            });
            var config = SocketClientConfig.GetConfig();
            var connected = this.ConnectAsync(new IPEndPoint(IPAddress.Parse(config.Ip), config.Port));
            connected.Wait();
            SendHeartbeatPacket();
        }
        public void RegisterCommand(string key, Type type)
        {
            if (cmdRount.ContainsKey(key))
                cmdRount.Remove(key);
            cmdRount.Add(key, type);
        }
        private void ReflectCommand()
        {
            var types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes().Where(t => t.GetInterfaces().Contains(typeof(ICommand)))).ToArray();
            foreach (var type in types)
            {
                if (!type.IsAbstract && !type.IsInterface)
                {
                    var cmd = (ICommand)AppDomain.CurrentDomain.CreateInstance(type.Assembly.FullName, type.ToString()).Unwrap();
                    RegisterCommand(cmd.Key, type);
                }
            }
        }
        private void SendHeartbeatPacket()
        {
            Task.Factory.StartNew(() =>
            {
                if (isDispose)
                    return;
                while (true)
                {
                    JsonSerializer serializer = new JsonSerializer();
                    serializer.NullValueHandling = NullValueHandling.Ignore;
                    var config = SocketClientConfig.GetConfig();

                    MemoryStream s = new MemoryStream();
                    StreamWriter sw = new StreamWriter(s);
                    using (JsonWriter writer = new JsonTextWriter(sw))
                    {
                        serializer.Serialize(writer, new StoreInfo { CompanyId = config.CompanyId, StoreId = config.StoreId });
                    }
                    var body = s.ToArray();
                    sw.Close();
                    s.Close();
                    // Send data to the server
                    var content = this.Format(new byte[4] { 0x00, 0x00, 0x00, 0x01 }, body);
                    this.Send(new ArraySegment<byte>(content));
                    Thread.Sleep(5000);
                }
            });

        }

        public byte[] Format(byte[] cmdCode, byte[] body)
        {
            var len = BitConverter.GetBytes(body.Length);
            var rawMsg = new byte[8 + body.Length];
            Array.Copy(cmdCode, 0, rawMsg, 0, 4);
            Array.Copy(len, 0, rawMsg, 4, 4);
            Array.Copy(body, 0, rawMsg, 8, body.Length);
            return rawMsg;
        }

        public void Dispose()
        {
            isDispose = true;
            this.Close();
        }
    }
}
