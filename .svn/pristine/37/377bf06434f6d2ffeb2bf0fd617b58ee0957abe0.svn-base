using Pharos.SocketService.Retailing.Protocol.AppSessions;
using Pharos.SocketService.Retailing.Protocol.CommandProviders;
using Pharos.SocketService.Retailing.Protocol.ReceiveFilters;
using Pharos.SocketService.Retailing.Protocol.RequestInfos;
using Pharos.SocketService.Retailing.Services;
using SuperSocket.SocketBase;
using Pharos.Infrastructure.Data.Redis;
using Newtonsoft.Json;
using Pharos.Infrastructure.Data.Normalize;

namespace Pharos.SocketService.Retailing.Protocol.AppServers
{
    public class PosStoreServer : AppServer<PosStoreSession, PosStoreRequestInfo>
    {
        public PosStoreServer()
            : base(new IReceiveFilterFactory())
        {
            _cmdNameProvider = new PosStoreCommandNameProvider();
            _sessionManager = new SessionManager(this);
            SubscribeStoreMesssage();
        }

        private ICommandNameProvider _cmdNameProvider = null;

        public ICommandNameProvider CommandNameProvider
        {
            get { return _cmdNameProvider; }
        }
        private ISessionManager _sessionManager = null;

        internal ISessionManager SessionManager
        {
            get { return _sessionManager; }
        }

        private void SubscribeStoreMesssage()
        {
            RedisManager.Subscribe("SyncDatabase", (channel, info) =>
            {

            });
            RedisManager.Subscribe("SyncSerialNumber", (channel, info) =>
            {
                var paysn = JsonConvert.DeserializeObject<PaySn>(info);
                var session = SessionManager.GetRegistered(new Models.Pos.PosStoreSessionInfo() { CompanyId = paysn.CompanyToken, StoreId = paysn.StoreId });
                if (session != null && session.Status == SessionStatus.Started)
                {
                    session.SendObject(new byte[4] { 0x00, 0x00, 0x00, 0x02 }, paysn);
                }
            });
            RedisManager.Subscribe("SyncOnlineCache", (channel, info) =>
            {

            });
            RedisManager.Subscribe("SyncShoppingCartCache", (channel, info) =>
            {

            });
        }
    }
}
