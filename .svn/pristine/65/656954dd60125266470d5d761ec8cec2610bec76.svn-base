using Pharos.Infrastructure.Data.Normalize;
using Pharos.Infrastructure.Data.Redis;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.ApiData.Pos.Sale;
using Pharos.Logic.ApiData.Pos.Sale.Marketings;
using Pharos.Logic.ApiData.Pos.Services;
using Pharos.Logic.ApiData.Pos.Services.ServerServices;
using Pharos.Logic.ApiData.Pos.User;
using Pharos.Logic.ApiData.Pos.ValueObject;
using Pharos.Logic.Entity;
using Pharos.ObjectModels.DTOs;
using Pharos.ObjectModels.Events;
using Pharos.Sys.BLL;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Pharos.Logic.ApiData.Pos.DataAdapter
{
    /// <summary>
    /// 远程数据源适配器（for Sql Server）
    /// </summary>
    public class SqlServerDataAdapter : IDataAdapter
    {
        public string StoreId { get; set; }
        public string DeviceSn { get; set; }

        public string MachineSN { get; set; }

        public int CompanyId { get; set; }
        /// <summary>
        /// 是否在练习模式下
        /// </summary>
        public bool IsSalesclerkTest { get; set; }

        public bool Enable
        {
            get { return SysStoreUserInfoService.CurrentRepository._context.Database.Exists(); }
        }


        public UserInfo GetUser(string account)
        {
            var result = SysStoreUserInfoService.GetStoreUserInfo(account, StoreId, CompanyId);
            return result;
        }


        public ProductInfo GetProductInfoByBarcode(string barcode, bool isFindWeigh = false)
        {
            return ProductRecordService.GetProductRecod(StoreId, barcode, CompanyId, isFindWeigh);
        }

        public PageResult<InventoryResult> CheckedInventory(IEnumerable<int> categorySns, string keyword, decimal price, int pageSize, int pageIndex)
        {
            return WarehouseService.CheckedInventory(StoreId, CompanyId, categorySns, keyword, price, pageSize, pageIndex);
        }


        public IEnumerable<UserInfo> GetStoreUsers(StoreOperateAuth storeOperateAuth)
        {
            return SysStoreUserInfoService.GetStoreUsers(StoreId, storeOperateAuth, CompanyId);
        }


        public MemberInfo GetMemberInfo(string phone, string cardNo, string uid)
        {
            return MembersService.GetMemberInfo(StoreId, CompanyId, phone, uid, cardNo);
        }


        public IEnumerable<CategoryDAO> GetStoreCategory()
        {
            return ProductCategorySerivce.GetStoreCategories(StoreId, CompanyId);
        }





        public ProductInfo GetProductInfoFromBundlingByBarcode(string barcode)
        {
            return BundlingService.GetProductInfoFromBundlingByBarcode(StoreId, barcode, CompanyId);
        }


        public void PosIncomePayout(string uid, decimal money, PosIncomePayoutMode mode)
        {
            PosIncomePayoutService.Save(StoreId, MachineSN, uid, money, mode, CompanyId, IsSalesclerkTest);
        }


        public BillHistoryInfo GetBillDetailsHistory(string paySn)
        {
            return SaleOrdersService.GetBillDetailsHistory(StoreId, MachineSN, paySn, CompanyId, IsSalesclerkTest);
        }

        public IEnumerable<ReasonItem> GetReason(int mode)
        {
            int psn = mode == 1 ? 7 : 8;
            var result = new SysDataDictionaryBLL().GetDicListByPSN(psn).Where(o => o.CompanyId == CompanyId).Select(o => new ReasonItem()
            {
                DicSN = o.DicSN,
                Title = o.Title
            }).ToList();
            return result;
        }

        public DateTime RefundAll(int reason, string paySn, decimal amount, string uid, string apicodes, string newOrderSn, string newCustomOrderSn, DateTime createdt)
        {
            var order = SaleOrdersService.CurrentRepository.Entities.FirstOrDefault(o => o.CompanyId == CompanyId && o.CustomOrderSn == paySn && o.StoreId == StoreId && o.State == 0);
            var newOrder = new SaleOrders()
            {
                StoreId = order.StoreId,//门店id
                MachineSN = order.MachineSN,//pos机号
                PaySN = newOrderSn,//订单流水号
                CustomOrderSn = newCustomOrderSn,//订单流水号
                ReFundOrderCustomOrderSn = order.CustomOrderSn,//原订单流水号
                TotalAmount = -order.TotalAmount,//优惠后金额
                PreferentialPrice = order.PreferentialPrice,//优惠金额
                ApiCode = apicodes,//支付方式  
                CreateUID = uid,//收银员工号
                ReturnOrderUID = uid,
                ReturnDT = createdt,
                CreateDT = createdt,
                CompanyId = order.CompanyId,
                ProductCount = -order.ProductCount,
                Reason = reason,
                Type = 3,
                State = 1,
                MemberId = order.MemberId,
                ActivityId = order.ActivityId,
                Salesman = order.Salesman,
                Receive = -order.Receive,
                IsTest = IsSalesclerkTest,
                OrderDiscount = order.OrderDiscount,
                InInventory = 0,
                IsProcess = false
            };
            var saleOrdersDetails = SaleDetailService.FindList(o => o.PaySN == order.PaySN).ToList();
            foreach (var item in saleOrdersDetails)
            {
                SaleDetail _saleDetail = new SaleDetail()
                {
                    PaySN = newOrderSn,
                    ProductCode = item.ProductCode,
                    AveragePrice = item.AveragePrice,//均价
                    CompanyId = CompanyId,
                    Total = -item.Total,
                    Barcode = item.Barcode,//商品条码
                    PurchaseNumber = -item.PurchaseNumber,//销售数量
                    BuyPrice = item.BuyPrice, //系统进价
                    SysPrice = item.SysPrice,//系统售价
                    ActualPrice = item.ActualPrice,//销售价
                    Title = item.Title,
                    ScanBarcode = item.ScanBarcode,
                    SalesClassifyId = item.SalesClassifyId,//销售分类id
                };
                SaleDetailService.CurrentRepository.Add(_saleDetail, false);
            }
            SaleOrdersService.CurrentRepository.Add(newOrder);
            return createdt;
        }


        public void RecordPayment(string paySn, decimal amount, int apiCode, decimal change, decimal receive, string apiOrderSN = null, string cardNo = null)
        {
            ConsumptionPaymentService.Save(paySn, amount, apiCode, change, receive, apiOrderSN, cardNo, CompanyId);
        }




        public ApiSetting GetApiSettings(int apiCode)
        {
            return ApiLibraryService.GetApiSettings(apiCode, CompanyId);
        }


        public IEnumerable<BillListItem> GetBills(DateTime date, Range range, string paySn, string cashier, string qmachineSn)
        {
            return SaleOrdersService.GetBills(StoreId, qmachineSn, date, CompanyId, range, IsSalesclerkTest, paySn, cashier);
        }


        public void RegisterDevice(string deviceSn, DeviceType type)
        {
            DeviceRegInfoService.RegisterDevice(StoreId, MachineSN, deviceSn, type, CompanyId);
        }

        public bool HasRegister(string deviceSn, DeviceType type, bool verfyState = true)
        {
            return DeviceRegInfoService.HasRegister(StoreId, MachineSN, deviceSn, type, CompanyId, verfyState);

        }

        public IEnumerable<Announcement> Announcements()
        {
            return NoticeService.Announcements(StoreId, MachineSN, CompanyId);
        }

        public IEnumerable<Activity> Activities()
        {
            return NoticeService.Activities(StoreId, MachineSN, CompanyId);

        }

        #region 促销

        public decimal GetMarketingRecordNumber(string marketingId, MarketingQuotaMode mode)
        {
            var result = 0m;
            try
            {
                switch (mode)
                {
                    case MarketingQuotaMode.EveryDay:
                        var start = DateTime.Now.Date;
                        result = MarketingRecordService.CurrentRepository.Entities.Where(o => o.StoreId == StoreId && o.CompanyId == CompanyId && o.MarketingId == marketingId && o.CreateDT >= start).Sum(o => o.Number);
                        break;
                    case MarketingQuotaMode.TotalQuota:
                        result = MarketingRecordService.CurrentRepository.Entities.Where(o => o.StoreId == StoreId && o.CompanyId == CompanyId && o.MarketingId == marketingId).Sum(o => o.Number);
                        break;
                }
            }
            catch
            {
            }
            return result;
        }

        public void SaveMarketingRecord(string marketingId, decimal number)
        {
            MarketingRecordService.CurrentRepository.Add(new SalesRecord()
            {
                MarketingId = marketingId,
                CompanyId = CompanyId,
                CreateDT = DateTime.Now,
                Number = number,
                StoreId = StoreId
            });
        }

        #endregion 促销



        public void SaveOrder(Sale.ShoppingCart shoppingCart, string apiCodes, DateTime saveTime)
        {
            try
            {
                //SaleOrders SaleDetail SaleDetailsTotal 
                var saleOrders = shoppingCart.GetSaleStatistics();//销售清单
                SaleOrders _saleOrder = new SaleOrders()
                {
                    StoreId = shoppingCart.MachineInformation.StoreId,//门店id
                    MachineSN = shoppingCart.MachineInformation.MachineSn,//pos机号
                    PaySN = shoppingCart.OrderSN,//订单流水号
                    CustomOrderSn = shoppingCart.CustomOrderSN,//订单流水号
                    TotalAmount = saleOrders.Receivable,//优惠后金额
                    PreferentialPrice = saleOrders.Preferential,//优惠金额
                    ApiCode = apiCodes,//支付方式  TODO:
                    CreateUID = shoppingCart.MachineInformation.CashierUid,//收银员工号
                    CreateDT = saveTime,
                    CompanyId = CompanyId,
                    ProductCount = saleOrders.Num,
                    Type = 0,
                    State = 0,
                    MemberId = shoppingCart.MemberId,
                    ActivityId = shoppingCart.ActivityId,
                    Salesman = shoppingCart.SaleMan,
                    Receive = shoppingCart.WipeZeroAfter,
                    IsTest = IsSalesclerkTest,
                    InInventory = 0,
                    IsProcess = false,
                    OrderDiscount = shoppingCart.OrderDiscount
                };
                SaleOrdersService.CurrentRepository.Add(_saleOrder, false);

                var saleOrdersDetails = shoppingCart.GetOrdeList();//订单信息
                foreach (var item in saleOrdersDetails)
                {
                    SaleDetail _saleDetail = new SaleDetail()
                    {
                        PaySN = _saleOrder.PaySN,
                        ProductCode = item.ProductCode,
                        AveragePrice = item.AveragePrice,//均价
                        CompanyId = CompanyId,
                        Total = item.Details.Total,
                        Barcode = item.MainBarcode,//商品条码
                        PurchaseNumber = item.SaleNumber,//销售数量
                        BuyPrice = item.Details.BuyPrice, //系统进价
                        SysPrice = item.Details.SystemPrice,//系统售价
                        ActualPrice = item.MarketingPrice,//销售价
                        Title = item.Details.Title,
                        ScanBarcode = item.CurrentString,
                        SalesClassifyId = (int)item.Details.SaleStatus,//销售分类id
                    };
                    SaleDetailService.CurrentRepository.Add(_saleDetail, false);
                }
                SaleOrdersService.CurrentRepository.Update(_saleOrder);
                var orderEvent = new OrderCompletedEvent()
                {
                    MemberId = shoppingCart.MemberId,
                    CompanyId = CompanyId,
                    MachineSn = MachineSN,
                    StoreId = StoreId,
                    OrderAmount = saleOrders.Receivable,
                    OrderProductCount = saleOrders.Num,
                    SourceRecordId = shoppingCart.OrderSN,
                    OrderReceiveAmount = shoppingCart.WipeZeroAfter,
                    OperatorUid = shoppingCart.MachineInformation.CashierUid,
                    OrderDetails = shoppingCart.GetOrdeList().Select(o =>
                        new OrderDetail()
                        {
                            AveragePrice = o.AveragePrice,
                            ActualPrice = o.MarketingPrice,
                            Barcode = o.MainBarcode,
                            PurchaseNumber = o.SaleNumber,
                            BuyPrice = o.Details.BuyPrice,
                            ProductCode = o.ProductCode,
                            SalesClassifyId = (int)o.Details.SaleStatus,
                            ScanBarcode = o.CurrentString,
                            SysPrice = o.Details.SystemPrice,
                            Title = o.Details.Title,
                            Total = o.Details.Total,
                            Category = o.Details.Category,
                            Size = o.Details.Size
                        })
                };
                RedisManager.Publish<OrderCompletedEvent>("OrderCompleted", orderEvent);
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// 日结月结
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="range"></param>
        /// <returns></returns>
        public DayReportResult DayMonthReport(DateTime from, DateTime to, Range range)
        {
            DayReportResult result = new DayReportResult();
            result.Summary = new List<DayReportDetailItem>();
            result.SalesmanRecords = new List<SalesmanDayReportResult>();
            var machineParams = range == Range.Local ? MachineSN : "";
            var users = SaleOrdersService.DayMonthReport(from, to, ref result, StoreId, machineParams, CompanyId, IsSalesclerkTest);
            SaleDetailService.DayMonthReport(from, to, ref result, StoreId, machineParams, CompanyId, IsSalesclerkTest, users);
            PosIncomePayoutService.DayMonthReport(from, to, ref result, StoreId, machineParams, CompanyId, IsSalesclerkTest);
            return result;
        }
        /// <summary>
        /// 不分公司取出所以门店
        /// </summary>
        /// <returns></returns>
        public IEnumerable<WarehouseInformations> GetWarehouseInformations()
        {
            var result = WarehouseService.CurrentRepository.Entities.Where(o => o.State == 1).Select(o => new WarehouseInformations()
              {
                  CompanyId = o.CompanyId,
                  StoreId = o.StoreId
              }).ToList();
            return result;
        }


        public DateTime ChangeOrRefund(Sale.AfterSale.OrderChangeRefundSale changeList, int reason, MachineInformation machineInformation, string newPaySn, decimal amount, decimal receive, string uid, string apiCodes, DateTime saveTime, string saleman, string oldOrderSn)
        {
            //to do save change
            //orders
            var oldOrder = (from a in SaleOrdersService.CurrentRepository.Entities.Where(o => o.StoreId == machineInformation.StoreId && o.CompanyId == machineInformation.CompanyId && o.CustomOrderSn == oldOrderSn)
                            join b in SaleDetailService.CurrentRepository.Entities
                            on a.PaySN equals b.PaySN
                            select new
                            {
                                a,
                                b
                            }).ToList();

            try
            {
                SaleOrders _saleOrder = new SaleOrders()
                {
                    PaySN = changeList.PaySn,
                    CustomOrderSn = changeList.CustomOrderSn,
                    MachineSN = machineInformation.MachineSn,
                    StoreId = machineInformation.StoreId,
                    TotalAmount = amount,
                    Receive = receive,
                    PreferentialPrice = 0,
                    ApiCode = apiCodes,
                    CreateUID = machineInformation.CashierUid,
                    CreateDT = saveTime,
                    ReturnDT = saveTime,
                    CompanyId = machineInformation.CompanyId,
                    ProductCount = changeList.RecordCount,
                    Type = (short)changeList.Mode,
                    State = 0,
                    MemberId = null,
                    IsTest = IsSalesclerkTest,
                    InInventory = 0,
                    IsProcess = false,
                    Reason = reason,
                    Salesman = saleman,//退换货原导购员  来自客户端
                    ReFundOrderCustomOrderSn = oldOrderSn//退换货原单号 来自客户端
                };
                SaleOrdersService.CurrentRepository.Add(_saleOrder, false);
                foreach (var item in changeList.ChangingList)
                {
                    var buyPrice = 0m;
                    if (oldOrder != null)
                    {
                        foreach (var itm in oldOrder)
                        {
                            if ((short)changeList.Mode == 2)
                            {
                                if (itm.b.Barcode == item.CurrentBarcode.MainBarcode)
                                {
                                    buyPrice = itm.b.BuyPrice;
                                }
                            }
                            else
                            {
                                if (itm.b.PurchaseNumber > 0)
                                {
                                    buyPrice = item.BuyPrice;
                                }
                                else
                                {
                                    if (itm.b.Barcode == item.CurrentBarcode.MainBarcode)
                                    {
                                        buyPrice = itm.b.BuyPrice;
                                    }
                                }
                            }
                        }
                    }
                    SaleDetail _saleDetail = new SaleDetail()
                    {
                        PaySN = changeList.PaySn,
                        ScanBarcode = item.CurrentBarcode.CurrentString,
                        ProductCode = item.CurrentBarcode.ProductCode,
                        AveragePrice = item.ChangePrice,//均价
                        CompanyId = machineInformation.CompanyId,
                        Total = item.ChangePrice * item.ChangeNumber,
                        Barcode = item.CurrentBarcode.MainBarcode,
                        PurchaseNumber = item.ChangeNumber,
                        BuyPrice = buyPrice,//进价
                        SysPrice = item.SysPrice,
                        ActualPrice = item.ChangePrice,
                        SalesClassifyId = (int)item.SaleStatus,
                        Title = item.CurrentBarcode.Details.Title
                    };
                    SaleDetailService.CurrentRepository.Add(_saleDetail, false);
                }
                SaleOrdersService.CurrentRepository.Update(_saleOrder);
            }
            catch (Exception ex)
            {
                throw;
            }

            return saveTime;
        }
        /// <summary>
        /// 添加抹零信息记录
        /// </summary>
        public void AddWipeZero(int companyId, string paySn, decimal money)
        {
            WipeZero _wipe = new WipeZero()
            {
                CompanyId = companyId,
                PaySN = paySn,
                Number = money
            };
            WipeZeroService.CurrentRepository.Add(_wipe);
        }


        public string GetStoreName()
        {
            var result = WarehouseService.CurrentRepository.Entities.Where(o => o.StoreId == StoreId && o.CompanyId == CompanyId).FirstOrDefault();
            return result.Title;
        }
        //Pharos.Logic.ApiData.Pos.ValueObject.
        //Pharos.Logic.ApiData.Pos.ValueObject
        public ChangeOrRefundReturnOrderData IsHasCustomerOrderSn(string customerOrderSn)
        {
            ChangeOrRefundReturnOrderData _data = new ChangeOrRefundReturnOrderData();
            //Pharos.Logic.ApiData.Pos.ValueObject
            //Pharos.Logic.ApiData.Pos.ValueObject
            SaleManInfo _saleman = new SaleManInfo();
            List<ChangingList> _datalist = new List<ChangingList>();
            _data.OldOrderList = _datalist;
            _data.SaleMan = _saleman;
            var order = SaleOrdersService.CurrentRepository.Entities.Where(o => o.CustomOrderSn == customerOrderSn && o.CompanyId == CompanyId && o.StoreId == StoreId).FirstOrDefault();
            if (order != null)
            {
                var detail = SaleDetailService.CurrentRepository.Entities.Where(o => o.PaySN == order.PaySN).ToList();
                if (!string.IsNullOrEmpty(order.Salesman))
                {
                    var saleman = SysStoreUserInfoService.CurrentRepository.Entities.Where(o => o.UID == order.Salesman).FirstOrDefault();
                    _saleman.SaleManCode = saleman.UserCode;
                    _saleman.SaleManName = saleman.FullName;
                }
                foreach (var item in detail)
                {
                    ChangingList _list = new ChangingList();
                    _list.Barcode = item.ScanBarcode;
                    _list.ChangeNumber = item.PurchaseNumber;
                    _data.OldOrderList.Add(_list);
                }
            }
            return _data;
        }
        public IEnumerable<object> GetAreas(int pid)
        {
            var items = AreaService.CurrentRepository.Entities.Where(o => o.AreaPID == pid).ToList();
            return items;
        }
        public void AddMember(MemberDto member)
        {
            var info = Pharos.Logic.ApiData.Pos.User.Salesclerk.GetMachineInfo(StoreId, MachineSN, CompanyId, DeviceSn);
            if (info == null)
            {
                throw new PosException("无法获取操作员信息！");
            }
            var members = MembersService.CurrentRepository.FindList(o => o.CompanyId == CompanyId &&
                ((o.Email == member.Email && !string.IsNullOrEmpty(o.Email))
                || (o.Weixin == member.Weixin && !string.IsNullOrEmpty(o.Weixin))
                || (o.MobilePhone == member.MobilePhone && !string.IsNullOrEmpty(o.MobilePhone))
                || (o.Zhifubao == member.Zhifubao && !string.IsNullOrEmpty(o.Zhifubao))
                || (o.MemberNo == member.MemberNo && !string.IsNullOrEmpty(o.MemberNo))
                )).ToList();
            if (members.Count > 0)
            {
                string exitItems = string.Empty;
                if (members.Exists(o => o.MobilePhone == member.MobilePhone))
                    exitItems += string.Format("手机号【{0}】", member.MobilePhone);
                if (members.Exists(o => o.Weixin == member.Weixin) && !string.IsNullOrEmpty(member.Weixin))
                    exitItems += string.Format("微信号【{0}】", member.Weixin);
                if (members.Exists(o => o.Email == member.Email) && !string.IsNullOrEmpty(member.Email))
                    exitItems += string.Format("Email【{0}】", member.Email);
                if (members.Exists(o => o.Zhifubao == member.Zhifubao) && !string.IsNullOrEmpty(member.Zhifubao))
                    exitItems += string.Format("支付宝【{0}】", member.Zhifubao);
                if (members.Exists(o => o.MemberNo == member.MemberNo) && !string.IsNullOrEmpty(member.MemberNo))
                    exitItems += string.Format("会员编号【{0}】", member.MemberNo);
                throw new PosException(string.Format("会员已存在{0}！", exitItems));
            }
            var card = MembershipCardService.CurrentRepository.Entities.FirstOrDefault(o => o.CardSN == member.CardNo && o.CompanyId == CompanyId);
            if (card == null)
                throw new PosException("无法获取到卡信息！");
            if (!string.IsNullOrEmpty(card.MemberId))
                throw new PosException(string.Format("该卡号[{0}]已被绑定，请换卡！", card.CardSN));
            var memberId = Guid.NewGuid().ToString("N");
            card.MemberId = memberId;
            card.LeadTime = DateTime.Now;
            card.Deposit = member.YaJin;
            card.State = 1;
            MembersService.CurrentRepository.Add(new Members()
            {
                Address = member.Address,
                Birthday = member.Birthday,
                CompanyId = CompanyId,
                CreateDT = DateTime.Now,
                CreateUID = info.CashierUid,
                CurrentCityId = member.CurrentCityId,
                CurrentCountyId = member.CurrentCountyId,
                CurrentProvinceId = member.ProvinceID,
                Email = member.Email,
                MemberNo = member.MemberNo,
                Weixin = member.Weixin,
                Zhifubao = member.Zhifubao,
                MobilePhone = member.MobilePhone,
                StoreId = StoreId,
                Status = 1,
                MemberId = memberId,
                RealName = member.RealName,
                Sex = member.Sex ? (short)1 : (short)0
            });
        }


        public MembershipCard GetStoredValueCardInfo(string cardNo)
        {
            var cardinfo = MembershipCardService.CurrentRepository.Entities.FirstOrDefault(o => o.CardSN == cardNo && o.CompanyId == CompanyId);
            if (cardinfo.State != 1)
            {
                throw new PosException("该储值卡处于非激活状态！");
            }
            if (cardinfo != null)
            {

                return cardinfo;
            }
            throw new PosException(string.Format("未找到储值卡{0}！", cardNo));
        }

        public void SaveToStoredValueCard(string cardNo, decimal amount, decimal balance)
        {
            string key = KeyFactory.MachineKeyFactory(CompanyId, StoreId, MachineSN, DeviceSn);
            var machineInfo = Salesclerk.onlineCache.Get(key);
            if (machineInfo == null)
            {
                throw new PosException("未能找到收银员信息，请重新登陆！");
            }
            var shoppingCart = ShoppingCartFactory.Factory(StoreId, MachineSN, CompanyId, DeviceSn);
            var cardinfo = MembershipCardService.CurrentRepository.Entities.FirstOrDefault(o => o.CardSN == cardNo && o.CompanyId == CompanyId);
            if (cardinfo != null)
            {
                cardinfo.Balance = balance;
                MembershipCardService.CurrentRepository.Update(cardinfo, false);
                Pharos.Logic.BLL.BaseGeneralService<Pharos.Logic.Entity.StoredValueCardPayRecord, Pharos.Logic.DAL.EFDbContext>.CurrentRepository.Add(new StoredValueCardPayRecord()
                {
                    Amount = amount,
                    CardNo = cardNo,
                    CompanyId = CompanyId,
                    CreateDT = DateTime.Now,
                    OrderSn = shoppingCart.OrderSN,
                    StoreId = StoreId,
                    CreateUID = machineInfo.CashierUid,
                });
            }
            else
            {
                throw new PosException(string.Format("未找到储值卡{0}！", cardNo));
            }
        }


        public IEnumerable<StoredValueCardPayDetailsItem> GetStoredValueCardPayDetails(string cardNo, DateTime start, DateTime end)
        {
            start = start.Date;
            end = end.Date;
            var query = (from a in SaleOrdersService.CurrentRepository.Entities
                         from b in ConsumptionPaymentService.CurrentRepository.Entities
                         from c in WarehouseService.CurrentRepository.Entities
                         where a.PaySN == b.PaySN && a.CompanyId == b.CompanyId && b.ApiCode == 16 && (b.CardNo == cardNo || string.IsNullOrEmpty(cardNo)) && a.CreateDT >= start && a.CreateDT <= end && a.CompanyId == CompanyId
                         && a.CompanyId == c.CompanyId && a.StoreId == c.StoreId
                         select new StoredValueCardPayDetailsItem()
                         {
                             OrderAmount = a.Receive,
                             OrderSN = a.CustomOrderSn,
                             PayAmount = b.Received,
                             CardNo = b.CardNo,
                             PayDate = a.CreateDT,
                             Store = "[" + c.StoreId + "]" + c.Title
                         });
            return query.ToList();
        }


        public string GetLastMemberNo()
        {
            return MembersService.CurrentRepository._context.Database.SqlQuery<string>(string.Format("select top(1) memberNo from Members where memberNo like '%{0:0000000}{1:00}%' order by memberNo desc", CompanyId, StoreId)).FirstOrDefault();
        }

        public StoredValueCardRechargeResult StoredValueCardRecharge(string cardNo, decimal amount)
        {
            var info = Pharos.Logic.ApiData.Pos.User.Salesclerk.GetMachineInfo(StoreId, MachineSN, CompanyId, DeviceSn);
            if (info == null)
            {
                throw new PosException("无法获取操作员信息！");
            }
            //判断最低充值
            var checkData = (from a in MembershipCardService.CurrentRepository.Entities
                             where a.CardSN == cardNo
                             join b in CardInfoService.CurrentRepository.Entities
                             on a.CardTypeId equals b.CardTypeId
                             select new
                             {
                                 MinRecharge = b.MinRecharge
                             }).FirstOrDefault();
            if (checkData == null)
            {
                throw new PosException("无法找到对应卡类型信息！");
            }
            if (checkData.MinRecharge > amount)
            {
                throw new PosException("该卡最低充值 " + checkData.MinRecharge + " 元！");
            }
            var beforeAmount = 0m;
            Members member = null;
            //更新会员卡金额、积分信息
            var membershipCard = MembershipCardService.CurrentRepository.Entities.Where(o => o.CardSN == cardNo && o.CompanyId == CompanyId).FirstOrDefault();
            if (membershipCard != null)
            {
                member = MembersService.Find(o => o.CompanyId == CompanyId && o.MemberId == membershipCard.MemberId);

                if (member != null)
                {
                    beforeAmount = membershipCard.Balance;
                    membershipCard.ReChargeTotal += amount;
                    membershipCard.Balance += amount;
                }
                else
                {
                    throw new PosException("未能找到持卡人信息！");
                }
            }
            else
            {
                throw new PosException("未能找到储值卡信息！");
            }

            var result = new StoredValueCardRechargeResult() { Amount = amount, balance = membershipCard.Balance, CardNo = cardNo, Name = member.RealName };

            MemberRechargeService.Add(new MemberRecharge()
            {
                CompanyId = CompanyId,
                CreateDT = DateTime.Now,
                CreateUID = info.CashierUid,
                RechargeSN = DateTime.Now.ToString("yyyyMMddHHmmss"),
                BeforeAmount = beforeAmount,
                AfterAmount = beforeAmount + amount,
                CardId = cardNo,
                Type = 1,
                RechargeAmount = amount
            });
            return result;
        }
    }
}
