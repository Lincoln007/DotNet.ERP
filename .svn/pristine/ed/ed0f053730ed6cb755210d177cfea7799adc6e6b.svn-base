using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Pharos.Logic.OMS;
using Pharos.Logic.OMS.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Http.Results;
using QCT.Pay.Common.Helpers;

namespace QCT.Api.Pay.Utils
{
    /// <summary>
    /// 支付帮助类
    /// </summary>
    public static class PayHelper
    {
        /// <summary>
        /// 发送Post支付请求
        /// </summary>
        /// <param name="request"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        public static string SendPost(this string url, Dictionary<string, object> reqParams)
        {
            var result = PayHelper.SendPost(url, reqParams.ToSignString());
            return result;
        }
        /// <summary>
        /// 发送Post支付请求
        /// </summary>
        /// <param name="url"></param>
        /// <param name="paramsStr"></param>
        /// <returns></returns>
        public static string SendPost(this string url, string paramsStr)
        {
            var httpRequest = (HttpWebRequest)WebRequest.Create(url);
            httpRequest.Method = "POST";
            httpRequest.ContentType = "application/x-www-form-urlencoded";
            httpRequest.Timeout = 60000;
            byte[] byteRequest = System.Text.Encoding.UTF8.GetBytes(paramsStr);
            httpRequest.ContentLength = byteRequest.Length;
            Stream requestStream = httpRequest.GetRequestStream();
            requestStream.Write(byteRequest, 0, byteRequest.Length);
            requestStream.Close();

            //获取服务端返回
            var response = (HttpWebResponse)httpRequest.GetResponse();
            //获取服务端返回数据
            StreamReader sr = new StreamReader(response.GetResponseStream(), Encoding.UTF8);
            var result = sr.ReadToEnd().Trim();
            sr.Close();
            result = HttpUtility.UrlDecode(result, Encoding.UTF8);
            return result;
        }

        #region 过期
        ///// <summary>
        ///// JSON转请求对象并验证输入数据的有效性
        ///// </summary>
        ///// <typeparam name="T"></typeparam>
        ///// <param name="reqParams"></param>
        ///// <param name="errMsg"></param>
        ///// <returns></returns>
        //public static T ToRequestObject<T>(JObject reqParams, out string errMsg) where T : BaseTradeRequest
        //{
        //    var reqObj = reqParams.ToObject<T>();
        //    //参数验证有效性
        //    errMsg = reqObj.TryValidateObject(reqObj);
        //    //fishtodo：验签
        //    return reqObj;
        //}

        ///// <summary>
        ///// 
        ///// </summary>
        ///// <typeparam name="T"></typeparam>
        ///// <param name="result"></param>
        ///// <param name="secretKey"></param>
        ///// <param name="signField"></param>
        ///// <returns></returns>
        //public static JsonResult<Dictionary<string, object>> ToSignJson<T>(T result, string secretKey, string signField)
        //{
        //    var rstRsp = ToDicAndSign(result, secretKey, signField);
        //    return Json(rstRsp);
        //}
        #endregion
    }
}