using Microsoft.Synchronization;
using Pharos.SyncService.SyncProviders;
using System;
using System.ServiceModel;
using System.Collections;
using System.Collections.Generic;

namespace Pharos.SyncService
{
    // 注意: 使用“重构”菜单上的“重命名”命令，可以同时更改代码、svc 和配置文件中的类名“PosServerDbSyncService”。
    // 注意: 为了启动 WCF 测试客户端以测试此服务，请在解决方案资源管理器中选择 PosServerDbSyncService.svc 或 PosServerDbSyncService.svc.cs，然后开始调试。
    [ServiceBehavior(
       ConcurrencyMode = ConcurrencyMode.Single,
       InstanceContextMode = InstanceContextMode.PerSession,
       IncludeExceptionDetailInFaults = true)]
    public class PosServerDbSyncService : IPosServerDbSyncService
    {

        IDictionary<SyncDirectionOrder, PosDbSyncProvider> _serverSyncProviders = new Dictionary<SyncDirectionOrder, PosDbSyncProvider>();
        private void InitSyncProvider(int companyId, string storeId)
        {
            var dataServiceGroups = SyncDataServiceGroupFactory.Factory(new RemoteSyncContext());
            foreach (var item in dataServiceGroups)
            {
                if (!_serverSyncProviders.ContainsKey(item.SyncDirectionOrder))
                {
                    _serverSyncProviders.Add(item.SyncDirectionOrder, new PosDbSyncProvider(companyId, storeId, item));
                }
            }
        }
        private PosDbSyncProvider FindProvider(SyncDirectionOrder _SyncDirectionOrder)
        {
            if (_serverSyncProviders.ContainsKey(_SyncDirectionOrder))
            {
                return _serverSyncProviders[_SyncDirectionOrder];
            }
            else
            {
                throw new SyncException("未找到服务提供程序！");
            }
        }

        public SyncIdFormatGroup GetIdFormats(int _SyncDirectionOrder)
        {
            return FindProvider((SyncDirectionOrder)_SyncDirectionOrder).IdFormats;
        }

        public void CreateProviderForSyncSession(int companyId, string storeId, int _SyncDirectionOrder)
        {
            InitSyncProvider(companyId, storeId);
        }

        public void BeginSession(int _SyncDirectionOrder)
        {
            FindProvider((SyncDirectionOrder)_SyncDirectionOrder).BeginSession();
        }

        public void EndSession(int _SyncDirectionOrder)
        {
            FindProvider((SyncDirectionOrder)_SyncDirectionOrder).EndSession();
        }

        public ChangeBatch GetChangeBatch(
            uint batchSize,
            SyncKnowledge destinationKnowledge, int _SyncDirectionOrder,
            out CachedChangeDataRetriever changeDataRetriever)
        {
            object dataRetriever;

            ChangeBatch changeBatch = FindProvider((SyncDirectionOrder)_SyncDirectionOrder).GetChangeBatch(
                batchSize,
                destinationKnowledge,
                out dataRetriever);

            changeDataRetriever = new CachedChangeDataRetriever(
                dataRetriever as IChangeDataRetriever,
                changeBatch);

            return changeBatch;
        }

        public FullEnumerationChangeBatch GetFullEnumerationChangeBatch(
            uint batchSize,
            SyncId lowerEnumerationBound,
            SyncKnowledge knowledgeForDataRetrieval, int _SyncDirectionOrder,
            out CachedChangeDataRetriever changeDataRetriever)
        {
            object dataRetriever;

            FullEnumerationChangeBatch changeBatch = FindProvider((SyncDirectionOrder)_SyncDirectionOrder).GetFullEnumerationChangeBatch(
                batchSize,
                lowerEnumerationBound,
                knowledgeForDataRetrieval,
                out dataRetriever);

            changeDataRetriever = new CachedChangeDataRetriever(
                dataRetriever as IChangeDataRetriever,
                changeBatch);

            return changeBatch;
        }

        public void GetSyncBatchParameters(int _SyncDirectionOrder,
            out uint batchSize,
            out SyncKnowledge knowledge)
        {
            FindProvider((SyncDirectionOrder)_SyncDirectionOrder).GetSyncBatchParameters(
                out batchSize,
                out knowledge);
        }

        public byte[] ProcessChangeBatch(int _SyncDirectionOrder,
            ConflictResolutionPolicy resolutionPolicy,
            ChangeBatch sourceChanges,
            CachedChangeDataRetriever changeDataRetriever,
            byte[] changeApplierInfo)
        {
            return FindProvider((SyncDirectionOrder)_SyncDirectionOrder).ProcessRemoteChangeBatch(
                resolutionPolicy,
                sourceChanges,
                changeDataRetriever,
                changeApplierInfo);
        }

        public byte[] ProcessFullEnumerationChangeBatch(int _SyncDirectionOrder,
            ConflictResolutionPolicy resolutionPolicy,
            FullEnumerationChangeBatch sourceChanges,
            CachedChangeDataRetriever changeDataRetriever,
            byte[] changeApplierInfo)
        {
            return FindProvider((SyncDirectionOrder)_SyncDirectionOrder).ProcessRemoteFullEnumerationChangeBatch(
                resolutionPolicy,
                sourceChanges,
                changeDataRetriever,
                changeApplierInfo);
        }

        #region For demo purpose, not required for RCA pattern
        public void CleanupTombstones(TimeSpan timespan, int _SyncDirectionOrder)
        {
            FindProvider((SyncDirectionOrder)_SyncDirectionOrder).CleanupTombstones(timespan);
        }

        #endregion
    }
}
