using Pharos.Logic.ApiData.Mobile.EaseMob;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using Pharos.Utility;
using Pharos.Sys.BLL;

namespace Pharos.Logic.ApiData.Mobile.Services
{
    public class ChatService
    {
        private static EmChat emChat;

        static ChatService()
        {
            emChat = new EmChat(ConfigurationManager.AppSettings["em_reqUrlBase"],
                ConfigurationManager.AppSettings["em_app_id"],
                ConfigurationManager.AppSettings["em_app_secret"],
                ConfigurationManager.AppSettings["em_app_org"],
                ConfigurationManager.AppSettings["em_app_name"]);
        }

        /// <summary>
        /// 创建一个环信用户
        /// </summary>
        /// <param name="enUserName">环信用户账号</param>
        /// <param name="emPassword">环信密码</param>
        /// <param name="emNickName">环信昵称，（可选）用于IOS推送</param>
        /// <returns>OpResult</returns>
        public static OpResult AccountCreate(string enUserName, string emPassword, string emNickName)
        {
            StringBuilder _build = new StringBuilder();
            _build.Append("{");
            _build.AppendFormat("\"username\": \"{0}\",\"password\": \"{1}\"", enUserName, emPassword);
            if (!string.IsNullOrEmpty(emNickName))
                _build.AppendFormat(",\"nickname\": \"{0}\"", emNickName);
            _build.Append("}");
            try
            {
                var response = emChat.AccountCreate(_build.ToString());
                if (response.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    return OpResult.Fail(message: "注册环信IM用户失败！HTTP错误状态码：" + response.StatusCode, data: response.ResponseBody);
                }
                return OpResult.Success(data: response.ResponseBody);
            }
            catch (Exception ex)
            {
                new Sys.LogEngine().WriteError(ex);
                return OpResult.Fail("注册环信IM用户失败！");
            }
        }


        /// <summary>
        /// 删除一个指定环信用户
        /// </summary>
        /// <param name="emUserName">环信用户账号</param>
        /// <returns>OpResult</returns>
        public static OpResult AccountDel(string emUserName)
        {
            try
            {
                var response = emChat.AccountDel(emUserName);
                if (response.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    return OpResult.Fail(message: "删除环信IM用户失败！HTTP错误状态码：" + response.StatusCode, data: response.ResponseBody);
                }
                return OpResult.Success(data: response.ResponseBody);
            }
            catch (Exception ex)
            {
                new Sys.LogEngine().WriteError(ex);
            }
            return OpResult.Fail("删除环信IM用户失败！");
        }
        /// <summary>
        /// 禁用环信用户账号
        /// </summary>
        /// <param name="emUserName">环信用户账号</param>
        /// <returns></returns>
        public static ResponseResult AccountDeactivate(string emUserName) { return emChat.AccountDeactivate(emUserName); }
        /// <summary>
        /// 启用环信用户账户
        /// </summary>
        /// <param name="emUserName">环信用户账号</param>
        /// <returns></returns>
        public static ResponseResult AccountActivate(string emUserName) { return emChat.AccountActivate(emUserName); }

        /// <summary>
        /// 当修改用户的IM信息时，给其他联系人发送透传消息通知更新
        /// </summary>
        /// <returns></returns>
        public static string SendCmdMessage(Pharos.Sys.Entity.SysUserInfo userInfo)
        {

            return "";
        }

        public static string GetIMPassport(string uid)
        {
            var userAccount = Logic.BLL.UserInfoService.Find(a => a.UID.Equals(uid, StringComparison.OrdinalIgnoreCase));
            if (string.IsNullOrWhiteSpace(userAccount.HuanXinUUID))
            {//不存在环信IM账号时，创建
                var emCreateResult = ChatService.AccountCreate(uid, uid, userAccount.FullName);
                JObject jo = JObject.Parse(emCreateResult.Data as string);
                if (emCreateResult.Successed)
                {//创建IM账号成功，存入数据库
                    JArray ja = JArray.Parse(jo.GetValue("entities").ToString());
                    var uuid = ja[0]["uuid"].ToString();
                    userAccount.HuanXinUUID = uuid;
                    Logic.BLL.UserInfoService.Update(userAccount);
                }
                else
                {//创建IM账号失败，根据返回判断是否已在IM服务器上注册
                    if (jo.GetValue("error").ToString() == "duplicate_unique_property_exists")
                    {
                        var existedAccountResp = emChat.AccountGet(uid);
                        JObject existedJo = JObject.Parse(existedAccountResp.ResponseBody);
                        JArray ja = JArray.Parse(jo.GetValue("entities").ToString());
                        var uuid = ja[0]["uuid"].ToString();
                        userAccount.HuanXinUUID = uuid;
                        Logic.BLL.UserInfoService.Update(userAccount);
                    }
                }
            }
            return userAccount.UID;
        }
    }
}
