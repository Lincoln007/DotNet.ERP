using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Pharos.CRM.Retailing.Controllers;
using Pharos.Logic.BLL;
using Pharos.Logic.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;

namespace Pharos.Store.Retailing.Controllers
{
    public class ProductController : BaseController
    {
        //
        // GET: /ProductWeight/

        //public ActionResult Index()
        //{
        //    return View();
        //}

        private readonly ScaleSettingsBLL settingbll = new ScaleSettingsBLL();
        private readonly ScaleHistoryBLL scaleHistory = new ScaleHistoryBLL();
        public ActionResult ProductWeight()
        {
            //门店下拉数据
            //ViewBag.stores = ListToSelect(WarehouseService.GetList().Select(o => new SelectListItem() { Value = o.StoreId, Text = o.Title }), emptyTitle: "全部");
            ViewBag.stores = WarehouseService.GetAdminList(CommonService.CompanyId, Pharos.Utility.Config.GetAppSettings("store")).FirstOrDefault().Title;
            //电子秤下拉数据
            ViewBag.scale = ListToSelect(settingbll.GetAllSettingsByStore().Select(o => new SelectListItem() { Value = o.IpAddress, Text = o.SN + " " + o.Title }));
            //历史批次下拉数据
            ViewBag.history = ListToSelect(scaleHistory.GetAllHistoryByStore().Select(o => new SelectListItem() { Value = o, Text = o }), emptyTitle: "重新选择商品");
            //商品分类数据

            return View();
        }
        /// <summary>
        /// 菜单树
        /// </summary>
        /// <returns></returns>
        public ActionResult FindTreeList()
        {
            int count = 0;
            var list = ProductCategoryService.FindPageList(Request.Params, out count, false);
            list.Each(o =>
            {
                o.Childrens.Each(i =>
                {
                    i.OnOff = i.Childrens != null && i.Childrens.Any() ? "closed" : "open";
                });
            });
            var trees = new List<ProductCategory>(){
                new ProductCategory(){
                Id = 0,
                Title = "商品分类",
                OnOff="open",
                Childrens = new List<ProductCategory>()
                }
            };
            trees[0].Childrens.AddRange(list);
            return new JsonNetResult(trees);
        }
        /// <summary>
        /// 根据菜单选择的类别 加载商品
        /// </summary>
        /// <returns></returns>
        public ActionResult FindProductByCategory(int category)
        {
            int count = 0;
            var result = ProductService.GetProductByStore(category, Pharos.Utility.Config.GetAppSettings("store"), out count);
            return ToDataGrid(result, count);
        }



        /// <summary>
        /// 保存电子秤的配置
        /// </summary>
        /// <param name="setting"></param>
        /// <returns></returns>
        public ActionResult CreateSetting(ScaleSettings setting)
        {
            var result = settingbll.CreateSetting(setting);
            return Content(result.ToJson());
        }
        /// <summary>
        /// 删除配置信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult RemoveSetting(int id)
        {
            var result = settingbll.RemoveSetting(id);
            return Content(result.ToJson());

        }

        public ActionResult ProductWeightSetting()
        {
            //设备类型
            ViewBag.deviceBands = (new List<DropdownItem>() { new DropdownItem() { IsSelected = true, Text = "友声", Value = "友声" } }).ToJson();
            ViewBag.deviceModel = (new List<DropdownItem>() { new DropdownItem() { IsSelected = true, Text = "TM-15A", Value = "TM-15A" } }).ToJson();
            ViewBag.keyCount = (new List<DropdownItem>() { new DropdownItem() { IsSelected = true, Text = "63", Value = "63" } }).ToJson();
            ViewBag.pageModel = (new List<DropdownItem>() { new DropdownItem() { IsSelected = true, Text = "单页", Value = "1" }, new DropdownItem() { IsSelected = false, Text = "双页", Value = "2" } }).ToJson();

            return View();
        }
        /// <summary>
        /// 网格数据
        /// </summary>
        /// <returns></returns>
        public ActionResult ProductWeigtSettingPageList()
        {
            int count = 0;
            var result = settingbll.FindPageList(out count);
            return ToDataGrid(result, count);
        }
        /// <summary>
        /// 商品传秤
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="ips"></param>
        /// <param name="isClear"></param>
        /// <returns></returns>
        public ActionResult SendProduct(string ids, string ips, bool isClear, string batch, int type)
        {
            var result = new OpResult();


            List<string> ipArr = new List<string>();
            if (string.IsNullOrEmpty(ips))
            {
                result.Successed = false;
                result.Message = "秤号数据异常，请重试！";
            }
            else
            {
                //if (type == 1)
                //{
                //判断配置信息
                //var setting= settingbll.GetSettingByIp()

                if (ips.Contains(","))
                {
                    var arr = ips.Split(',');
                    foreach (var item in arr)
                    {
                        ipArr.Add(item);
                    }
                }
                else
                {
                    ipArr.Add(ips);
                }
                //}
                result = ProductService.SendProduct(ids, ipArr, isClear, batch, type);
            }
            return Content(result.ToJson());
        }
    }
}
