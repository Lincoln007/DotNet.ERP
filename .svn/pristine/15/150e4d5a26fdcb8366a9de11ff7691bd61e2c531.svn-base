using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.IDAL;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Utility.Helpers;
using Pharos.Utility;
using QCT.Pay.Common;

namespace Pharos.Logic.OMS.BLL
{
    /// <summary>
    /// 金融接口-支付接口相关业务操作
    /// </summary>
    public class PayApiService
    {
        [Ninject.Inject]
        IBaseRepository<PayApi> PayApiRepository { get; set; }
        [Ninject.Inject]
        IBaseRepository<PayChannelInfo> PayChannelRepository { get; set; }
        [Ninject.Inject]
        IBaseRepository<SysUserInfo> UserRepository { get; set; }

        /// <summary>
        /// 支付接口列表-获取分页数据
        /// </summary>
        /// <returns></returns>
        public IEnumerable<dynamic> GetPayApiPaging(System.Collections.Specialized.NameValueCollection nvl, out int totalCount)
        {
            var pms = new
            {
                ChannelNo = nvl["ChannelNo"] == null ? 0 : nvl["ChannelNo"].ToObject<int>(),
                Status = nvl["Status"] == null ? new List<short>() : nvl["Status"].Split(',').Select(o => short.Parse(o)).ToList()
            };
            var query = PayApiRepository.GetQuery();
            if (pms.ChannelNo > 0)
                query.Where(o => o.ChannelNo == pms.ChannelNo);
            if (pms.Status.Count > 0)
                query = query.Where(o => pms.Status.Contains(o.Status));
            else
            {
                query = query.Where(o => o.Status != (short)PayApiStatus.Expired);
            }

            query = from upay in query
                    join juc in UserRepository.GetQuery() on upay.CreateUID equals juc.UserId into iuc
                    from uc in iuc.DefaultIfEmpty()
                    join jur in UserRepository.GetQuery() on upay.CreateUID equals jur.UserId into iur
                    from ur in iur.DefaultIfEmpty()
                    join jpc in PayChannelRepository.GetQuery() on upay.ChannelNo equals jpc.ChannelNo into ipc
                    from pc in ipc.DefaultIfEmpty()
                    select new PayApiExt()
                    {
                        Id = upay.Id,
                        Method = upay.Method,
                        Title = upay.Title,
                        ApiNo = upay.ApiNo,
                        Status = upay.Status,
                        TerminalType = upay.TerminalType,
                        TradeMode = upay.TradeMode,
                        OptType = upay.OptType,
                        Memo = upay.Memo,
                        ChannelNo = upay.ChannelNo,
                        ChannelCode = pc.ChannelCode,
                        CreateDT = upay.CreateDT,
                        CreateUID = upay.CreateUID,
                        Creater = uc.FullName,
                        ReleasedDT = upay.ReleasedDT,
                        ReleasedUID = upay.ReleasedUID,
                        Releaseder = ur.FullName,
                        OnIcon1 = upay.OnIcon1,
                        OnIcon2 = upay.OnIcon2,
                        OffIcon1 = upay.OffIcon1,
                        OffIcon2 = upay.OffIcon2
                    };
            totalCount = query.Count();
            return query.ToPageList();
        }

        /// <summary>
        /// 获取PayApi支付表里已有支付通道的收单渠道list
        /// </summary>
        /// <returns></returns>
        public List<DropdownItem> GetPayChannels()
        {
            var result = new List<DropdownItem>();
            var query = from pa in PayApiRepository.GetQuery()
                        join jpc in PayChannelRepository.GetQuery() on pa.ChannelNo equals jpc.ChannelNo into ipc
                        from pc in ipc.DefaultIfEmpty()
                        where pa.Status == 1
                        select new { Text = pc.ChannelCode, Value = pa.ChannelNo };
            var data = query.ToList();
            if (data != null && data.Count > 0)
            {
                data.ForEach(o => { result.Add(new DropdownItem() { Text = o.Text, Value = o.Value.ToString() }); });
            }
            return result;
        }
        /// <summary>
        /// 支付接口列表-新增或编辑支付接口表单-保存
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public OpResult SaveOrUpdate(PayApi model)
        {
            var source = model;
            var existsObj = PayApiRepository.GetQuery(o => o.Id != model.Id && o.Method == model.Method).FirstOrDefault();
            if (existsObj != null)
                return OpResult.Fail(message: "接口参数名称已经存在，不可重复");
            if (source.Id > 0)
            {
                source = PayApiRepository.GetQuery(o => o.Id == model.Id).FirstOrDefault();
                model.ToCopyProperty(source, new List<string>() { "Id", "ChannelNo", "Status", "CreateDT", "CreateUID", "ReleasedDT", "Releaseder" });
            }
            else
            {
                var existsCodeObj = PayApiRepository.GetQuery(o => o.Method == model.Method).FirstOrDefault();
                if (existsCodeObj != null)
                    return OpResult.Fail(message: "接口参数名称已经存在，不可重复");

                source.CreateDT = DateTime.Now;
                source.CreateUID = CurrentUser.UID;
                source.ApiNo = CommonPayService.GetMaxNo("PayApis", "ApiNo"); ;
                PayApiRepository.Add(source, false);
            }

            var result = PayApiRepository.SaveChanges();
            if (result)
                return OpResult.Success(data: source);
            else
                return OpResult.Fail(message: "保存失败");
        }
        /// <summary>
        /// 支付接口列表-新增或编辑支付接口表单-获取支付接口Model
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public PayApiExt GetOne(int id)
        {
            var obj = (from upay in PayApiRepository.GetQuery(o => o.Id == id)
                       join juc in UserRepository.GetQuery() on upay.CreateUID equals juc.UserId into iuc
                       from uc in iuc.DefaultIfEmpty()
                       join jur in UserRepository.GetQuery() on upay.CreateUID equals jur.UserId into iur
                       from ur in iur.DefaultIfEmpty()
                       select new PayApiExt()
                       {
                           Id = upay.Id,
                           Method = upay.Method,
                           Title = upay.Title,
                           ApiNo = upay.ApiNo,
                           Status = upay.Status,
                           TerminalType = upay.TerminalType,
                           TradeMode = upay.TradeMode,
                           OptType = upay.OptType,
                           Memo = upay.Memo,
                           ChannelNo = upay.ChannelNo,
                           CreateDT = upay.CreateDT,
                           CreateUID = upay.CreateUID,
                           Creater = uc.FullName,
                           ReleasedDT = upay.ReleasedDT,
                           ReleasedUID = upay.ReleasedUID,
                           Releaseder = ur.FullName,
                           OnIcon1 = upay.OnIcon1,
                           OnIcon2 = upay.OnIcon2,
                           OffIcon1 = upay.OffIcon1,
                           OffIcon2 = upay.OffIcon2
                       }).FirstOrDefault();
            if (obj == null)
                obj = new PayApiExt();
            return obj;
        }
        /// <summary>
        /// 设置启用或关闭接口
        /// </summary>
        /// <param name="id"></param>
        /// <param name="apiStatus"></param>
        /// <returns></returns>
        public OpResult SetStatus(int id, short status)
        {
            var entity = PayApiRepository.GetQuery(o => o.Id == id).FirstOrDefault();
            if (entity != null)
            {
                entity.Status = status;
                entity.ReleasedDT = DateTime.Now;
                entity.ReleasedUID = CurrentUser.UID;
                return OpResult.Result(PayApiRepository.SaveChanges());
            }
            else
            {
                return OpResult.Fail("所选项状态已失效！");
            }
        }
        /// <summary>
        /// 删除PayApi
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public OpResult RemovePayApi(int id) {
            var entity = PayApiRepository.GetQuery(o => o.Id == id && o.Status == (short)PayApiStatus.NotReleased).FirstOrDefault();
            if (entity != null)
            {//未发布状态的通道才可以删除
                PayApiRepository.Remove(entity, true);
                return OpResult.Result(true);
            }
            else
            {
                return OpResult.Fail("所选项状态已失效！");
            }
        }
        /// <summary>
        /// 根据接口参数名获得接口实体对象
        /// </summary>
        /// <param name="method"></param>
        /// <returns></returns>
        public PayApi GetPayApiByMethod(string method)
        {
            var entity = PayApiRepository.GetQuery(o => o.Method==method && o.Status == (short)PayApiStatus.HasReleased).FirstOrDefault();
            return entity;
        }
    }
}
