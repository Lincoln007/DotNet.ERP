using Pharos.Logic.OMS.DAL;
using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.IDAL;
using Pharos.Utility;
using Pharos.Utility.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;

namespace Pharos.Logic.OMS.BLL
{
    public class BankCardInfoService : BaseService
    {
        [Ninject.Inject]
        // 设备档案信息
        public IBaseRepository<BankCardInfo> bankCardInfoRepository { get; set; }

        /// <summary>
        /// 获取最大代理商编号或商家编号
        /// </summary>
        /// <returns></returns>
        public int getMaxOrgId()
        {
            return bankCardInfoRepository.GetQuery().Max(o => (int?)o.CardId).GetValueOrDefault() + 1;
        }

        /// <summary>
        /// 增加或者修改
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public OpResult SaveOrUpdate(BankCardInfo model)
        {
            IQueryable<BankCardInfo> isExistCardNum = null;
            if (model.Id == 0)
            {
                isExistCardNum = bankCardInfoRepository.GetQuery(o => o.CardNum.Trim() == model.CardNum.Trim());
            }
            else
            {
                isExistCardNum = bankCardInfoRepository.GetQuery(o => o.CardNum.Trim() == model.CardNum.Trim() && o.Id != model.Id);
            }
            if (isExistCardNum.Any())
            {
                return OpResult.Fail("该结算卡号已经存在");
            }

            
            IQueryable<BankCardInfo> isExistAgentsCard = null;
            if (model.Id == 0)
            {
                isExistAgentsCard = bankCardInfoRepository.GetQuery(o => o.AgentsId==model.AgentsId&&o.Type==1);
            }
            else
            {
                isExistAgentsCard = bankCardInfoRepository.GetQuery(o => o.AgentsId == model.AgentsId && o.Type == 1 && o.Id != model.Id);
            }
            if (isExistAgentsCard.Any())
            {
                return OpResult.Fail("该代理商结算账户已经存在");
            }

            if (model.Id == 0)
            {
                model.CardId = getMaxOrgId();
                bankCardInfoRepository.Add(model);
            }
            else
            {
                var source = bankCardInfoRepository.Get(model.Id);
                model.ToCopyProperty(source, new List<string>() { "OrgId", "Type", "CreateUid", "CreateTime" });
            }
            bankCardInfoRepository.SaveChanges();
            return OpResult.Success();
        }
    }
}
