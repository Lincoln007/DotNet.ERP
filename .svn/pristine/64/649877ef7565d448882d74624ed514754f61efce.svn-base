using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.Entity;
using Pharos.Sys.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;


namespace Pharos.Logic.BLL
{
    public class MemberLevelService : BaseService<MemberLevel>
    {
        /// <summary>
        /// 新增会员等级
        /// </summary>
        /// <param name="level"></param>
        /// <returns></returns>
        public OpResult CreateMemberLevel(MemberLevel level)
        {
            level.MemberLevelId = CommonRules.GUID;
            return MemberLevelService.Add(level);
        }

        public object FindMemberLevelByCompanyId(out int count)
        {
            count = CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId).Count();
            if (count > 0)
            {
                var result = (from a in CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId)
                              join b in BaseService<SysStoreUserInfo>.CurrentRepository.Entities
                              on a.CreateUID equals b.UID
                              select new
                              {
                                  Id = a.Id,
                                  LevelSN = a.LevelSN,
                                  LevelTitle = a.LevelTitle,
                                  CouponType = a.CouponType,
                                  Discount = a.Discount,
                                  //IntegerType = a.IntegerType,
                                  AutoUpdate = a.AutoUpdate,
                                  UpgradeScore = a.UpgradeScore,
                                  Memo = a.Memo,
                                  State = a.State,
                                  CreateDT = a.CreateDT,
                                  CreateUID = b.FullName,
                                  ConverRatio = a.ConverRatio,
                                  MemberCount = BaseService<Members>.CurrentRepository.Entities.Where(o => o.MemberLevelId == a.MemberLevelId && CommonService.CompanyId == o.CompanyId).Count(),//统计会员数量
                              }).ToPageList();
                return result;

            }
            else
            {
                return new MemberLevel();
            }
        }

        public OpResult UpdateMemberStateByIds(short state, string ids)
        {
            try
            {
                var levels = CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId && ("," + ids + ",").Contains("," + o.Id + ",")).ToList();
                foreach (var item in levels)
                {
                    if (item.State != state)
                    {
                        item.State = state;
                    }
                }
                var result = CurrentRepository.Update(new MemberLevel());
                return new OpResult() { Successed = true, Message = "操作成功!" };
            }
            catch (Exception e)
            {
                throw;
            }
        }

        public IEnumerable<MemberLevel> GetAllMemberLevelInfo()
        {
            return CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId).ToList();
        }


        public MemberLevel GetTop1MemberLevelByDTDesc()
        {
            return CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId).OrderByDescending(o => o.CreateDT).FirstOrDefault();
        }


        public static List<MemberLevel> GetList()
        {
            return CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId && o.State == 0).ToList();
        }

        public MemberLevel GetMemberLevelById(int id)
        {
            return CurrentRepository.QueryEntity.FirstOrDefault(o => o.Id == id);
        }

        internal OpResult UpdateMemberLevel(MemberLevel level)
        {
            var data = CurrentRepository.QueryEntity.FirstOrDefault(o => o.Id == level.Id);
            if (data != null)
            {
                //data.LevelSN = level.LevelSN;
                data.LevelTitle = level.LevelTitle;
                data.CouponType = level.CouponType;
                data.Discount = level.Discount;
                //data.IntegerType = level.IntegerType;
                data.AutoUpdate = level.AutoUpdate;
                data.UpgradeScore = level.UpgradeScore;
                data.Memo = level.Memo;
                data.State = level.State;
                var result = CurrentRepository.Update(data);
                if (result)
                {
                    return OpResult.Success("操作成功！");
                }
                else {
                    return OpResult.Fail("请核对提交数据！");
                }
            }
            else
            {
                return OpResult.Fail("找不到原数据！");
            }
        }
    }
}
