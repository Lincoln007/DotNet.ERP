using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using Pharos.Logic.ApiData.Mobile.Exceptions;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.BLL;
using Pharos.Logic.Entity;
using Pharos.Utility.Helpers;
namespace Pharos.Logic.ApiData.Mobile.Services
{
    public class OrderService
    {
        public static object GetOrderDetail(string orderId,string userCode,short type)
        {
            if (string.IsNullOrWhiteSpace(orderId))
                throw new MessageException("订单号为空!");
            if (string.IsNullOrWhiteSpace(userCode))
                throw new MessageException("员工编号为空!");
            var query = from a in BaseService<VwOrder>.CurrentRepository.QueryEntity
                        join b in BaseService<IndentOrderList>.CurrentRepository.QueryEntity on a.IndentOrderId equals b.IndentOrderId
                        join c in BaseService<VwProduct>.CurrentRepository.QueryEntity on b.Barcode equals c.Barcode
                        where a.IndentOrderId == orderId
                        select new
                        {
                            a,
                            c.ProductCode,
                            c.Barcode,
                            c.Title,
                            c.SysPrice,
                            c.SubUnit,
                            b.IndentNum,
                            DeliveryNum = b.IndentNum - b.DeliveryNum
                        };
            var list = query.ToList();
            if (!list.Any()) return null;
            var order = list.Select(o => o.a).FirstOrDefault();
            var obj = new
            {
                OrderId=order.IndentOrderId,
                order.StoreTitle,
                order.RecipientsTitle,
                order.SupplierTitle,
                order.OrderTotal,
                order.ShippingAddress,
                order.DeliveryDate,
                StateTitle=GetStateTitle(order.State,type),
                Details=list.Select(o=>new{o.ProductCode,o.Barcode,o.Title,o.SysPrice,o.SubUnit,o.IndentNum,o.DeliveryNum}) };
            ReaderService.Add(type, userCode, new List<int>() { order.Id });
            return obj;
        }
        public static object GetOrderApproveList(string date, string pageIndex, string pageSize)
        {
            if (string.IsNullOrWhiteSpace(date))
                throw new MessageException("当前日期为空!");
            var query = BaseService<VwOrder>.CurrentRepository.QueryEntity;
            var st1 = DateTime.Parse(date).Date;
            var st2 = st1.AddMonths(1);
            query = query.Where(o => o.CreateDT >= st1 && o.CreateDT < st2 && (o.State ==0 || o.State== 1));
            var nl= new NameValueCollection();
            nl.Add("page", pageIndex);
            nl.Add("rows", pageSize);
            var list = query.OrderBy(o=>o.CreateDT).ToList();
            var days = new List<object>();
            var dates =list.Select(o=>o.CreateDT.Date).GroupBy(o=>o.Date).ToList();
            foreach(var dt in dates)
            {
                var orders = list.Where(o => o.CreateDT.Date == dt.Key).Select(o => new
                {
                    o.StoreTitle,
                    o.OrderTotal,
                    OrderId = o.IndentOrderId,
                    StateTitle = o.State==0?"待审批":o.State==1?"已审批":"未提交",
                    Time = o.CreateDT.ToShortTimeString()
                }).ToList();
                days.Add(new { Day = dt.Key.Day, Orders = orders });
            }
            return new {Year=st1.Year,Month=st1.Month,Days=days };

        }
        public static IEnumerable<dynamic> GetOrderApproveNewList(string userCode)
        {
            if (userCode.IsNullOrEmpty()) throw new MessageException("员工编号为空!");
            if (!UserInfoService.IsExist(o => o.UserCode == userCode))
                throw new MessageException("员工编号不存在!");
            var query = from x in BaseService<VwOrder>.CurrentRepository.QueryEntity
                        let o = from y in BaseService<Reader>.CurrentRepository.QueryEntity where x.Id == y.MainId && y.Type == 2 && y.ReadCode == userCode select y
                        orderby x.CreateDT descending
                        where x.State == 0 && !o.Any()
                        select x;
            var list = query.ToList();
            var orders = list.Select(o => new
            {
                o.StoreTitle,
                o.OrderTotal,
                OrderId = o.IndentOrderId,
                o.IndentNums,
                Time = o.CreateDT.ToString("yyyy-MM-dd HH:mm")
            }).ToList();
            return orders;
        }
        public static object GetOrderApproveDayList(string date)
        {
            if (string.IsNullOrWhiteSpace(date))
                throw new MessageException("当前日期为空!");
            var query = BaseService<VwOrder>.CurrentRepository.QueryEntity;
            var st1 = DateTime.Parse(date);
            var st2 = st1.AddDays(1);
            query = query.Where(o => o.CreateDT >= st1 && o.CreateDT < st2 && o.State < 2);
            return query.ToList().Select(o => new
            {
                o.StoreTitle,
                o.OrderTotal,
                OrderId = o.IndentOrderId,
                StateTitle = o.StateTitle,
                Time = o.CreateDT.ToShortTimeString()
            });

        }
        public static void Approve(string orderId)
        {
            var obj = BaseService<IndentOrder>.Find(o => o.IndentOrderId == orderId && o.State<1);
            if (obj == null) throw new MessageException("订单号不存在!");
            obj.State = 1;
            BaseService<IndentOrder>.Update(obj);
        }
        // <param name="type">2-订单新审批,3-供应商新订单</param>
        static string GetStateTitle(short state, short type)
        {
            if (type == 2)
                return state == 0 ? "待审批" : state == 1 ? "已审批" : "未提交";
            else if (type == 3)
                return state == 0 ? "待审批" : state == 1 ? "未配送" : state == 4 ? "已配送" : state == 3 ? "已中止" : state == 5 ? "已收货" : "配送中";
            return "";
        }
    }
}
