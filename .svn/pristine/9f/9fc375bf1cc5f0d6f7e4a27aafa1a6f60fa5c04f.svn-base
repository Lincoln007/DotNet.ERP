using Pharos.POS.Retailing.ChildWin;
using Pharos.POS.Retailing.Models.ApiParams;
using Pharos.POS.Retailing.Models.ApiReturnResults;
using Pharos.POS.Retailing.Models.PosModels;
using Pharos.Wpf.ViewModelHelpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace Pharos.POS.Retailing.Models.ViewModels.Pay
{
    public class WeChatPayViewModel : BaseViewModel
    {
        public WeChatPayViewModel(decimal _amount, PayAction _payAction, int reason = 0)
        {
            IsOperatEnabled = true;
            Amount = _amount;
            PayAction = _payAction;
            Reason = reason;

            WipeZeroAfter = Math.Round(_amount, 1, MidpointRounding.AwayFromZero);//摸零后
            WipeZero = _amount - WipeZeroAfter;//摸零金额
        }
        private decimal wipeZeroAfter;

        public decimal WipeZeroAfter
        {
            get { return wipeZeroAfter; }
            set { wipeZeroAfter = value; this.OnPropertyChanged(o => o.WipeZeroAfter); }
        }

        /// <summary>
        /// 抹零
        /// </summary>
        private decimal wipeZero;

        public decimal WipeZero
        {
            get { return wipeZero; }
            set
            {
                wipeZero = value;
                this.OnPropertyChanged(o => o.WipeZero);
            }
        }
        int Reason { get; set; }
        /// <summary>
        /// 支付类型 正常销售、退换货补款
        /// </summary>
        private PayAction payAction;

        public PayAction PayAction
        {
            get { return payAction; }
            set { payAction = value; }
        }


        /// <summary>
        /// 钱
        /// </summary>
        private decimal amount;

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; this.OnPropertyChanged(o => o.Amount); }
        }

        /// <summary>
        /// 微信完成支付
        /// </summary>
        public ICommand ConfirmCommand
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    IsOperatEnabled = false;
                    this.OnPropertyChanged(o => o.IsOperatEnabled);
                    //直接调支付接口
                    //接口参数
                    Task.Factory.StartNew(() =>
                    {
                        var _machineInfo = Global.MachineSettings.MachineInformations;
                        List<PayWay> payWay = new List<PayWay>();
                        PayWay _payWay = new PayWay()
                        {
                            Amount = Amount,
                            Change = 0,
                            Receive = WipeZeroAfter,
                            Type = PayMode.UnionPay,
                            WipeZero = WipeZero
                        };
                        payWay.Add(_payWay);
                        ApiPayParams _params = new ApiPayParams()
                        {
                            StoreId = _machineInfo.StoreId,
                            MachineSn = _machineInfo.MachineSn,
                            CompanyToken = _machineInfo.CompanyToken,
                            Mode = PayAction,
                            Receivable = WipeZeroAfter,
                            Payway = payWay,
                            OrderAmount = Amount,
                            Reason = Reason
                        };
                        var result = ApiManager.Post<ApiPayParams, ApiRetrunResult<object>>(@"api/Pay", _params);
                        CurrentWindow.Dispatcher.Invoke(new Action(() =>
                        {
                            if (result.Code == "200")
                            {
                                //  PosViewModel.Current.ClearOrder.Execute(null);
                                //跳到支付成功界面
                                ZhiFuWanCheng page = new ZhiFuWanCheng(Amount, Amount, 0, "微信", PayAction);
                                page.Owner = Application.Current.MainWindow;

                                CurrentWindow.Hide();
                                page.ShowDialog();
                                CurrentWindow.Close();
                            }
                            else
                            {
                                Toast.ShowMessage(result.Message, CurrentWindow);
                            }
                            IsOperatEnabled = true;
                        }));
                    });

                });
            }
        }

        bool _IsOperatEnabled = true;

        public bool IsOperatEnabled
        {
            get { return _IsOperatEnabled; }
            set
            {
                _IsOperatEnabled = value;
                this.OnPropertyChanged(o => o.IsOperatEnabled);
            }
        }
    }
}
