using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.Entity;
using Pharos.Sys.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;

namespace Pharos.Logic.BLL
{
    public class CardInfoService : BaseService<CardInfo>
    {
        /// <summary>
        /// 新建卡类型
        /// </summary>
        /// <returns></returns>
        public OpResult CreateMemberCardType(CardInfo cardinfo)
        {
            return CardInfoService.Add(cardinfo, true);
        }

        /// <summary>
        /// 获取所有的卡信息
        /// </summary>
        /// <returns></returns>
        public object FindMemberCardTypeList(out int count)
        {
            try
            {
                count = CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId).Count();
                //return CurrentRepository.FindList(o => o.CompanyId == CommonService.CompanyId).ToPageList();
                var result = (from a in CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId)
                              join b in BaseService<SysStoreUserInfo>.CurrentRepository.Entities
                              on
                              a.CreateUID equals b.UID
                              select new
                              {
                                  Id = a.Id,
                                  CardType = a.CardType,
                                  CardName = a.CardName,
                                  CardTypeId = a.CardTypeId,
                                  Category = a.Category,
                                  CouponType = a.CouponType,
                                  Discount = a.Discount,
                                  IntegrationType = a.IntegrationType,
                                  MinRecharge = a.MinRecharge,
                                  DefaultIntegr = a.DefaultIntegr,
                                  DefaultPrice = a.DefaultPrice,
                                  Memo = a.Memo,
                                  State = a.State,
                                  CreateDT = a.CreateDT,
                                  CreateUID = b.FullName
                              }).ToPageList();

                return result;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw ex;
            }
        }
        /// <summary>
        /// 更改卡类型状态
        /// </summary>
        /// <param name="state">状态</param>
        /// <param name="id">卡类型id</param>
        /// <returns></returns>
        public OpResult UpdateState(int state, string ids)
        {
            var cardInfos = CurrentRepository.QueryEntity.Where(o => ("," + ids + ",").Contains("," + o.Id + ",")).ToList();
            foreach (var item in cardInfos)
            {
                if (state != item.State)
                {
                    if (item.State == 0)
                    {
                        item.State = 1;
                    }
                    if (item.State == 1)
                    {
                        item.State = 0;
                    }
                    CurrentRepository.Update(item, false);
                }
            }
            var result = CurrentRepository.Update(new CardInfo());

            if (result)
            {
                return new OpResult() { Successed = true, Message = "操作成功！" };
            }
            return new OpResult() { Successed = false, Message = "未找到该卡类型！" };
        }

    }
}
