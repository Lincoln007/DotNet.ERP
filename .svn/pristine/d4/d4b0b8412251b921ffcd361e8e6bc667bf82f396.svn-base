using Pharos.Logic.OMS.IDAL;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.Entity;
using Pharos.Utility.Helpers;
using Pharos.Utility;

namespace Pharos.Logic.OMS.BLL
{
    public class ProductVerService:BaseService<Entity.ProductVer>
    {
        [Ninject.Inject]
        IBaseRepository<Entity.ProductVer> ProductVerRepository { get; set; }
        [Ninject.Inject]
        IBaseRepository<Entity.ProductMenu> ProductMenuRepository { get; set; }
        [Ninject.Inject]
        IBaseRepository<Entity.SysUser> UserRepository { get; set; }
        public IEnumerable<dynamic> GetPageList(System.Collections.Specialized.NameValueCollection nvl, out int recordCount)
        {
            var query = ProductVerRepository.GetQuery();
            var queryUser = UserRepository.GetQuery();
            var code = nvl["code"].ToType<int?>();
            var state = nvl["state"].ToType<short?>();
            var q = from x in query
                    select new
                    {
                        x.Id,
                        x.ProductCode,
                        x.ProductId,
                        x.Name,
                        x.SysName,
                        x.Alias,
                        x.Forced,
                        x.VerCode,
                        x.CreateDT,
                        x.CreateUID,
                        x.Status,
                        StateTitle = x.Status == 0 ? "未发布" :x.Status == 1 ? "已发布":"已失效",
                        MenusetTitle = x.ProductMenus.Any() ? "已配置" : "未配置",
                        LimitsetTitle = x.ProductLimits.Any() ? "已配置" : "未配置",
                        ForceTitle= x.Forced?"是":"否",
                        x.Memo,
                        x.UpdateDT,
                        x.PublishDT,
                        Updater = queryUser.Where(o => o.UserId == x.UpdateUID).Select(o => o.FullName).FirstOrDefault(),
                        Publisher = queryUser.Where(o => o.UserId == x.PublishUID).Select(o => o.FullName).FirstOrDefault()
                    };
            if (code.HasValue)
                q = q.Where(o => o.ProductCode == code);
            if(state.HasValue)
                q = q.Where(o => o.Status == state);
            recordCount = q.Count();
            return q.ToPageList();
        }
        public OpResult SaveOrUpdate(Entity.ProductVer obj)
        {
            if(obj.Id==0)
            {
                obj.ProductCode = ProductVerRepository.GetQuery().Max(o => o.ProductCode).GetValueOrDefault() + 1;
                obj.VerCode = 1;
                obj.CreateDT = DateTime.Now;
                obj.UpdateDT = obj.CreateDT;
                obj.ProductId = CommonService.GUID;
                obj.UpdateUID = CurrentUser.UID;
                obj.CreateUID = obj.UpdateUID;
                ProductVerRepository.Add(obj, false);
            }
            else
            {
                var product = ProductVerRepository.Get(obj.Id);
                product.Name = obj.Name;
                product.SysName = obj.SysName;
                product.Alias = obj.Alias;
                product.Memo = obj.Memo;
            }
            ProductVerRepository.SaveChanges();
            return OpResult.Success();
        }
        public OpResult SaveMenu(Entity.ProductMenu obj)
        {
            if(obj.Id==0)
            {
                obj.MenuId = ProductMenuRepository.GetQuery().Max(o => (int?)o.MenuId).GetValueOrDefault() + 1;
                obj.CreateDT = DateTime.Now;
                obj.CreateUID = CurrentUser.UID;
                obj.SortOrder =(short)(ProductMenuRepository.GetQuery().Max(o => (short?)o.SortOrder).GetValueOrDefault()+1);
                ProductMenuRepository.Add(obj, false);
            }
            else
            {
                var menu = ProductMenuRepository.Get(obj.Id);
                obj.ToCopyProperty(menu, new List<string>() { "CreateDT", "CreateUID", "MenuId" });
            }
            ProductMenuRepository.SaveChanges();
            return OpResult.Success();
        }
        public void RemoveMenu(int menuId)
        {
            var obj = GetMenu(menuId);
            ProductMenuRepository.Remove(obj);
        }
        public OpResult Deletes(int[] ids)
        {
            var list= ProductVerRepository.GetQuery(o => ids.Contains(o.Id)).Include(o=>o.ProductMenus).Include(o=>o.ProductLimits).Include(o=>o.ProductUpdateLogs).ToList();
            ProductVerRepository.RemoveRange(list);
            return OpResult.Success();
        }
        public Entity.ProductVer Get(int id)
        {
            return ProductVerRepository.GetQuery(o => o.Id==id).Include(o=>o.ProductMenus).Include(o=>o.ProductLimits).FirstOrDefault();
        }
        public Entity.ProductMenu GetMenu(int menuid)
        {
            return ProductMenuRepository.GetQuery(o=>o.MenuId==menuid).FirstOrDefault();
        }
        public OpResult Publish(int id, short state)
        {
            var obj = Get(id);
            if(obj!=null)
            {
                if (!obj.ProductMenus.Any())
                    return OpResult.Fail("请先配置菜单！");
                if (!obj.ProductLimits.Any())
                    return OpResult.Fail("请先配置权限！");
                obj.PublishDT = DateTime.Now;
                obj.PublishUID = CurrentUser.UID;
                obj.Forced = state > 0;
                obj.Status = 1;
                //obj.VerCode += 0.1m;
                var list= ProductVerRepository.GetQuery(o => o.ProductCode == obj.ProductCode && o.ProductId != obj.ProductId).ToList();
                list.Each(o => o.Status == 2);
                ProductVerRepository.SaveChanges();
                return OpResult.Success();
            }
            return OpResult.Fail();
        }
        public Dictionary<int?,string> GetList()
        {
            var list = ProductVerRepository.GetQuery().Select(o => new { o.ProductCode, o.Name }).Distinct().ToDictionary(o=>o.ProductCode,o=>o.Name);
            return list;
        }

        public List<Entity.ProductMenu> MenuList(string productid)
        {
            var menus = ProductMenuRepository.GetQuery(o => o.ProductId == productid).OrderBy(o=>o.SortOrder).ToList();
            var list = new List<Entity.ProductMenu>();
            foreach (var menu in menus.Where(o => o.PMenuId <= 0))
            {
                SetChilds(menu, menus);
                menu.Index = list.Count;
                list.Add(menu);
            }
            return list;
        }

        public void MoveMenuItem(short mode, int menuId)
        {
            var obj = ProductMenuRepository.Find(o => o.MenuId == menuId);
            var list = ProductMenuRepository.GetQuery(o => o.PMenuId == obj.PMenuId).OrderBy(o => o.SortOrder).ToList();
            switch (mode)
            {
                case 2://下移
                    var obj1 = list.LastOrDefault();
                    if (obj.Id != obj1.Id)
                    {
                        Entity.ProductMenu next = null;
                        for (var i = 0; i < list.Count; i++)
                        {
                            if (obj.Id == list[i].Id)
                            {
                                next = list[i + 1]; break;
                            }
                        }
                        if (next != null)
                        {
                            var sort = obj.SortOrder;
                            obj.SortOrder = next.SortOrder;
                            next.SortOrder = sort;
                            ProductMenuRepository.SaveChanges();
                        }
                    }
                    break;
                default://上移
                     var obj2 = list.FirstOrDefault();
                    if (obj.Id != obj2.Id)
                    {
                        Entity.ProductMenu prev = null;
                        for (var i=0;i<list.Count;i++)
                        {
                            if (obj.Id == list[i].Id)
                            {
                                prev = list[i - 1]; break;
                            }
                        }
                        if (prev != null)
                        {
                            var sort = obj.SortOrder;
                            obj.SortOrder = prev.SortOrder;
                            prev.SortOrder = sort;
                            ProductMenuRepository.SaveChanges();
                        }
                    }
                    break;
            }
        }

        void SetChilds(Entity.ProductMenu menu,List<Entity.ProductMenu> alls)
        {
            menu.Childrens = alls.Where(o => o.PMenuId == menu.MenuId).ToList();
            int i = 0;
            foreach (var child in menu.Childrens)
            {
                child.Index = i++;
                child.ParentId = menu.Id;
                SetChilds(child, alls);
            }
        }
    }
}
