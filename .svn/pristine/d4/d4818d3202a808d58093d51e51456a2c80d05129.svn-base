using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Pharos.POS.Retailing.Models;
using Pharos.POS.Retailing.Models.PosModels;

namespace Pharos.POS.Retailing.Devices.POSDevices
{
    /// <summary>
    /// ME31
    /// </summary>
    public class NewLandPOSDevice : IPOSDevice
    {
        [DllImport("UnitPad_dll.dll")]
        public extern static int OpenComm(int lPComPort, long lPBaudRate, int timeout);
        [DllImport("UnitPad_dll.dll")]
        public extern static int CloseComm();
        [DllImport("UnitPad_dll.dll")]
        public extern static int SendReq(int nReqInfoLen, string ReqInfo);
        [DllImport("UnitPad_dll.dll")]
        public extern static int RecvResp([MarshalAs(UnmanagedType.LPStr)] StringBuilder RecvInfo);

        private static CancellationToken Token { get; set; }
        public bool DoPay(CancellationToken token, POSDevicePayRequest request, out POSDevicePayResponse response, out string msg)
        {
            return CallDevice(token, request, out response, out msg);
        }
        internal bool CallDevice(CancellationToken token, POSDevicePayRequest request, out POSDevicePayResponse response, out string msg, string code = "", string qrcode = "")
        {
            try
            {
                response = null;
                Token = token;
                var result = 0;
                result = OpenComm(Global.MachineSettings.DevicesSettingsConfiguration.POSCOM, Global.MachineSettings.DevicesSettingsConfiguration.POSCOMRate, 5000);
                if (result < 0)
                {
                    msg = "支付失败，未能打开设备！";
                    return false;
                }
                var machineSn = Global.MachineSettings.MachineInformations.MachineSn;
                if (string.IsNullOrEmpty(code))
                {
                    switch (request.Type)
                    {
                        case TransactionType.Consumption:
                            code = "00";
                            break;
                        case TransactionType.Refund:
                            code = "20";
                            break;
                    }
                }
                var userCode = "0000" + request.CashierId;
                userCode = userCode.Substring(userCode.Length - 4, 4);
                var orderSn = "00000000000000000000" + request.OrderSn;
                orderSn = orderSn.Substring(orderSn.Length - 20, 20);

                var reqInfo = string.Format("{10}{0:000000000000}{1,8}{2:0000}{3:MMddHHmmss}{4:00000000000000000000}{5,6}{6,10}{7,6}{8,12}{11,512}{9,20}", Math.Round(request.Amount * 100), machineSn, userCode, DateTime.Now, orderSn, request.OldTransactionCode, "", "", "", "", code, qrcode);

                result = SendReq(110, reqInfo);
                if (result < 0)
                {
                    msg = "请求支付失败！";
                    CloseComm();
                    return false;
                }
                var timeoutCounter = 0;
                int timeout = 0;
                StringBuilder info = new StringBuilder(200);
                while (true)
                {
                    try
                    {
                        if (token.IsCancellationRequested)
                        {
                            msg = "支付失败或者支付取消！";
                            CloseComm();
                            return false;
                        }
                        result = RecvResp(info);
                        if (result > 0)
                        {

                            var returnStr = info.ToString();
                            var isSuccessCode = returnStr.Substring(2, 2);
                            if (isSuccessCode == "00")
                            {
                                response = new POSDevicePayResponse();
                                var cardno = returnStr.Substring(4, 19);
                                cardno = cardno.Insert(6, "***");
                                response.CardNo = cardno;
                                response.CardPin = returnStr.Substring(23, 12).Trim();
                                response.CardName = returnStr.Substring(35, 10).Trim();
                                response.BankTransactionCode = returnStr.Substring(45, 12).Trim();
                                response.DeviceTranDate = returnStr.Substring(57, 10).Trim();
                                response.TransactionCode = returnStr.Substring(79, 6).Trim();
                                response.AuthCode = returnStr.Substring(85, 6).Trim();
                            }
                            else
                            {
                                msg = "支付失败或者支付取消！";
                                CloseComm();
                                return false;
                            }
                            break;
                        }
                        else if (timeoutCounter >= timeout)
                        {
                            msg = "等待支付超时！";
                            CloseComm();
                            return false;
                        }
                        Thread.Sleep(100);
                        timeoutCounter++;
                    }
                    catch (Exception ex)
                    {
                    }
                }
                CloseComm();
                msg = string.Format("成功支付{0:N}元！", request.Amount);
                return true;
            }
            catch
            {
                CloseComm();
                msg = " 支付请求失败！";
                response = null;
                return false;
            }
        }
        public POSDeviceType POSDeviceType
        {
            get { return POSDeviceType.NewLandPOSDevice; }
        }
    }
}
