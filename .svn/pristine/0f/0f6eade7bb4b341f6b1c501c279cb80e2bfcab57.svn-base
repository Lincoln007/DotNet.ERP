using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using Pharos.Logic.Entity;
using Pharos.Utility.Helpers;
namespace Pharos.Logic.DAL
{
    public class CommonDAL:BaseDAL
    {
        public string StockLockValidMsg(string storeId)
        {
            if (!string.IsNullOrWhiteSpace(storeId))
            {
                using (EFDbContext db = new EFDbContext())
                {
                    var sql = string.Format("SELECT dbo.F_StockLockValidMsg('{0}',"+Sys.SysCommonRules.CompanyId+")", storeId);
                    return db.Database.SqlQuery<string>(sql).FirstOrDefault();
                }
            }
            return "";
        }
        public DataTable FindTakeStockPages(System.Collections.Specialized.NameValueCollection nvl, out int recordCount,bool ispage=true)
        {
            var storeId = nvl["storeId"];
            var userId = nvl["userId"];
            var date1 = nvl["date1"];
            var date2 = nvl["date2"];
            var searchText = (nvl["searchText"] ?? "").Trim();
            var checkBatch = nvl["checkBatch"];
            var barcode = nvl["barcode"];
            var state = nvl["state"];
            var dispType = nvl["dispType"];
            var actualFlag = nvl["actualFlag"];
            var id = nvl["id"];
            if (!date2.IsNullOrEmpty()) date2 = DateTime.Parse(date2).AddDays(1).ToString("yyyy-MM-dd");
            string sql = @"select * from Vw_StockTaking where 1=1 and CompanyId="+Sys.SysCommonRules.CompanyId;
            if (!storeId.IsNullOrEmpty())
                sql += " and LockStoreID='"+storeId+"'";
            if (!userId.IsNullOrEmpty())
                sql += " and CheckUID='" + userId + "'";
            if (!searchText.IsNullOrEmpty())
                sql += " and (Barcode like '%" + searchText + "%' or Title like '%" + searchText + "%')";
            if (!barcode.IsNullOrEmpty())
                sql += " and Barcode='" + barcode + "'";
            if (!checkBatch.IsNullOrEmpty())
                sql += " and CheckBatch ='" + checkBatch + "'";
            if (!date1.IsNullOrEmpty() && !date2.IsNullOrEmpty())
                sql += " and LockDate between '" + date1 + "' and '" + date2 + "'";
            else if (!date1.IsNullOrEmpty())
                sql += " and LockDate>='" + date1 + "'";
            else if (!date2.IsNullOrEmpty())
                sql += " and LockDate<'" + date2 + "'";
            if (!id.IsNullOrEmpty())
                sql += " and id='"+id+"'";
            if(!state.IsNullOrEmpty())
                sql += " and state=" + state + "";
            if (dispType == "1")
                sql += " and SubstractNum is not null";
            if (actualFlag == "1")
                sql += " and ActualNumber is null";
            recordCount = 0;
            return ispage ? base.ExceuteSqlForPage(sql, out recordCount, nvl) : _db.DataTableText(sql+" order by id desc", null);
        }
        public DataTable FindStockLogs(int companyId, string checkBatch, string checkUID,string state)
        {
            string sql = @"SELECT a.Barcode,b.Title,b.SubUnit,b.CategoryTitle,a.Id,a.SysPrice,a.CreateDT,dbo.F_UserNameById(a.CheckUID) FullName,a.CheckUID,a.State,a.Number FROM dbo.StockTakingLog a
				INNER JOIN dbo.Vw_Product b ON b.CompanyId = a.CompanyId AND (b.Barcode = a.Barcode OR ','+b.Barcodes+',' LIKE '%,'+a.Barcode+',%')
				WHERE a.CompanyId=@CompanyId and a.CheckBatch=@CheckBatch and a.state in(@state)";
            if (!checkUID.IsNullOrEmpty())
                sql += " and checkUID='" + checkUID + "'";
            if (state == "0")//初盘过滤已复盘
                sql += " AND not EXISTS(SELECT 1 FROM StockTakingLog WHERE CompanyId=a.CompanyId AND CheckBatch=a.CheckBatch AND Barcode=a.Barcode AND State=1)";
            sql += "  ORDER BY CreateDT";
            return _db.DataTableText(sql, new SqlParameter[] { 
                new SqlParameter("@CompanyId",companyId),
                new SqlParameter("@CheckBatch",checkBatch),
                new SqlParameter("@state",state)
            });
        }
        public DataTable FindOutInNumDetails(string bars,DateTime takingTime,int companyId)
        {
            var parms = new SqlParameter[] { 
                new SqlParameter("@barcodes",bars),
                new SqlParameter("@TakingTime",takingTime.ToString("yyyy-MM-dd HH:mm:ss")),
                new SqlParameter("@companyId",companyId),
            };
            var dt = _db.DataTable("OutInNumDetails", parms);
            return dt;
        }
        public DataTable GetInventoryBalanceLast(int companyId, string storeId, string barcodes)
        {
            if (!string.IsNullOrWhiteSpace(storeId))
            {
                var sql = string.Format(@"SELECT a.Value Barcode,ISNULL(b.Number,0) Number,a.Id FROM SplitString('{0}',',',1) a
                LEFT JOIN (
					SELECT *,ROW_NUMBER() OVER(PARTITION BY StoreId,Barcode ORDER BY BalanceDate DESC) row FROM dbo.InventoryBalance WHERE CompanyId={1} AND StoreId='{2}'
                ) b ON a.Value=b.Barcode AND row=1", barcodes,companyId,storeId);
                return _db.DataTableText(sql, null);
            }
            return null;
        }
        public DataTable GetProductsBySupplierId(string supplierId, out int recordCount)
        {

            var sql = @"SELECT *,ISNULL((SELECT SUM(acceptnum) FROM dbo.Vw_OrderList 
                WHERE ((OrderType='采购' AND State=5) OR OrderType='入库') and SupplierId=v.SupplierId AND barcode=v.barcode GROUP BY Barcode),0) AcceptNum FROM dbo.Vw_Product v
                where SupplierId='" + supplierId+"'";
            return base.ExceuteSqlForPage(sql, out recordCount);
        }
        public DataTable GetTuiHuanPages(System.Collections.Specialized.NameValueCollection nvl, out int recordCount)
        {
            var sql = @"SELECT isnull(a.ReturnDT,a.CreateDT) CreateDT,a.PaySN,a.Receive,b.Id,b.Barcode,b.Title,b.ProductCode,b.PurchaseNumber,(CASE WHEN a.State=1 THEN '退整单' WHEN a.type=1 THEN '换货' ELSE '退货' END) ReturnType,dbo.F_UserNameById(a.CreateUID) FullName  FROM dbo.SaleOrders a 
                INNER JOIN dbo.SaleDetail b ON a.PaySN=b.PaySN AND b.CompanyId = a.CompanyId
                WHERE NOT (a.State=0 AND a.Type=0) and a.companyid=" +Sys.SysCommonRules.CompanyId;
            if (!nvl["startDate"].IsNullOrEmpty())
                sql += " and isnull(a.ReturnDT,a.CreateDT)>='" + nvl["startDate"] + "'";
            if (!nvl["endDate"].IsNullOrEmpty())
                sql += " and isnull(a.ReturnDT,a.CreateDT)<DATEADD(DAY,1,'" + nvl["endDate"] + "')";
            if (!nvl["returnType"].IsNullOrEmpty())
            {
                if (nvl["returnType"] == "0")
                    sql += " and a.State=1";
                else
                    sql += " and a.Type=" + nvl["returnType"];
            }
            return base.ExceuteSqlForGroupPage(sql,out recordCount);
        }
        /// <summary>
        /// 更新退换库存量
        /// </summary>
        public void UpdateTuiHuanStock()
        {
            System.Threading.Tasks.Task.Factory.StartNew(() =>
            {
                _db.ExecuteNonQuery("Auto_OrderToInventory");
            });
        }
        public void BulkCopy(string tableName, DataTable dt)
        {
            SqlTransaction sqlTran = null;
            try
            {
                var connStr= Utility.Config.GetAppSettings("ConnectionString");
                using (SqlConnection conn = new SqlConnection(connStr))
                {
                    conn.Open();
                    sqlTran= conn.BeginTransaction();
                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(conn, SqlBulkCopyOptions.Default, sqlTran))
                    {
                        bulkCopy.DestinationTableName = tableName;
                        bulkCopy.BatchSize = 2000;//缓存大小
                        foreach (DataColumn dc in dt.Columns)
                            bulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);
                        bulkCopy.WriteToServer(dt);
                        sqlTran.Commit();
                    }
                    conn.Close();
                }
            }
            catch(Exception ex)
            {
                if (sqlTran != null)
                {
                    try { sqlTran.Rollback(); }
                    catch { }
                }
                throw ex;
            }
        }
    }
    public static class DbExtend
    {
        public static DataTable SqlQueryForDataTatable(this Database db, string sql,CommandType type, params SqlParameter[] parms)
        {
            using (var conn = (SqlConnection)db.Connection)
            {
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = conn;
                cmd.CommandText = sql;
                cmd.CommandType = type;
                cmd.CommandTimeout = 60;
                if (parms != null)
                {
                    parms.Each(o =>
                    {
                        cmd.Parameters.Add(o);
                    });
                }
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                DataTable table = new DataTable();
                adapter.Fill(table);

                conn.Close();//连接需要关闭
                conn.Dispose();
                return table;
            }
        }
    }
}
