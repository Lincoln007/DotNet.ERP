using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.Entity;
using Pharos.Sys.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;

namespace Pharos.Logic.BLL
{
    public class MakingMembershipCardService : BaseService<MakingMembershipCard>
    {
        public OpResult CreateMakingMembershipCard(MakingMembershipCard _shipCard)
        {
            return MakingMembershipCardService.Add(_shipCard);
        }

        public MakingMembershipCard GetShipCardById(int id)
        {
            return CurrentRepository.FindById(id);
        }
        public OpResult UpdateShipCard(MakingMembershipCard _shipcard)
        {
            try
            {

                var oldShipCard = CurrentRepository.FindById(_shipcard.Id);
                //if (oldShipCard == null || oldShipCard.State >= 0)
                //{
                //    return new OpResult() { Successed = false, Message = "改制卡批次不允许修改！" };
                //}
                oldShipCard.CardType = _shipcard.CardType;
                oldShipCard.ExpiryStart = _shipcard.ExpiryStart;
                oldShipCard.ExpiryEnd = _shipcard.ExpiryEnd;
                oldShipCard.NumberEnd = _shipcard.NumberEnd;
                oldShipCard.NumberStart = _shipcard.NumberStart;
                oldShipCard.State = _shipcard.State;
                var isSuccess = CurrentRepository.Update(oldShipCard);
                if (isSuccess)
                {
                    return new OpResult() { Successed = true, Message = "操作成功！" };
                }
                else
                {
                    return new OpResult() { Successed = false };
                }
            }
            catch (Exception e)
            {
                return new OpResult() { Successed = false, Message = e.Message };
            }
        }

        public object GetMakingMembershipCardByWhere(string cardType, string batchSN, short? state, string createUID, DateTime? beginDate, DateTime? endDate, out int count)
        {
            var query = CurrentRepository.Entities.Where(o => o.CompanyId == CommonService.CompanyId);
            if (!string.IsNullOrEmpty(cardType))
            {
                query = query.Where(o => o.CardType == cardType);
            }
            if (!string.IsNullOrEmpty(batchSN))
            {
                query = query.Where(o => o.BatchSN == batchSN);
            }
            if (state != null)
            {
                query = query.Where(o => o.State == state);
            }
            if (!string.IsNullOrEmpty(createUID))
            {
                query = query.Where(o => o.CreateUID == createUID);
            }
            if (beginDate != null)
            {
                query = query.Where(o => o.CreateDT > beginDate);
            }
            if (endDate != null)
            {
                query = query.Where(o => o.CreateDT > endDate);
            }
            count = query.Count();
            if (count > 0)
            {
                var result = (from a in query
                              join b in BaseService<SysStoreUserInfo>.CurrentRepository.Entities
                              on a.CreateUID equals b.UID
                              join c in BaseService<CardInfo>.CurrentRepository.Entities
                              on a.CardType equals c.CardTypeId
                              select new
                              {
                                  Id = a.Id,
                                  BatchSN = a.BatchSN,
                                  CardName = c.CardName,
                                  NumberStart = a.NumberStart,
                                  NumberEnd = a.NumberEnd,
                                  MakeNumber = a.MakeNumber,
                                  State = a.State,
                                  ExpiryStart = a.ExpiryStart,
                                  ExpiryEnd = a.ExpiryEnd,
                                  SecurityCode = a.SecurityCode,
                                  CreateDT = a.CreateDT,
                                  CreateUID = b.FullName,
                                  CardType = c.Category,
                                  AllRechange = c.CardType == 1 ? "是" : "否",
                                  MinRecharge = c.MinRecharge,
                                  CouponType = c.CouponType,
                                  IntegrationType = c.IntegrationType
                              }).ToPageList();
                return result;

            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public List<MakingMembershipCard> GetMakingMembershipCardByIds(string ids)
        {
            return CurrentRepository.Entities.Where(o => ("," + ids + ",").Contains("," + o.Id + ",")).ToList();
        }

        public OpResult UpdateState(short state, string ids)
        {
            try
            {
                var query = GetMakingMembershipCardByIds(ids);
                //query.Each(o => o.State = state);
                var top1MemberCard = BaseService<MembershipCard>.CurrentRepository.Entities.OrderByDescending(o => o.CreateDT).FirstOrDefault();
                var oldCardNo = top1MemberCard.CardSN;
                var currentCardNo = string.Empty;
                int num = 0;
                if (top1MemberCard != null && top1MemberCard.CardSN.Length > 6)
                {
                    oldCardNo = top1MemberCard.CardSN.Substring(top1MemberCard.CardSN.Length - 7, 7);
                    int.TryParse(oldCardNo, out num);
                }
                query.ForEach(o => o.State = state);
                #region MyRegion
                //foreach (var item in query)
                //{
                //    if (state == 1 && item.State != 1)
                //    {
                //        for (int i = 0; i < item.MakeNumber; i++)
                //        {
                //            num++;
                //            currentCardNo = num.ToString();
                //            while (currentCardNo.Length < 7)
                //            {
                //                currentCardNo = currentCardNo.Insert(0, "0");
                //            }
                //            //生成卡号：1位卡类型（1=固定面值；2=充值卡） 4位区号 7位商户号 7位序列号（港澳6位）
                //            var cardSn = Convert.ToInt32(item.CardType) + "3640" + "1000101" + currentCardNo;

                //            var securitycode = ExtendHelper.GetRandomStr(7);
                //            var isExit = CurrentRepository.Entities.Any(o => o.SecurityCode == securitycode);
                //            while (isExit)
                //            {
                //                securitycode = ExtendHelper.GetRandomStr(7);
                //                isExit = CurrentRepository.Entities.Any(o => o.SecurityCode == securitycode);
                //            }

                //            MembershipCard _memberCard = new MembershipCard()
                //            {
                //                CompanyId = CommonService.CompanyId,
                //                BatchSN = item.BatchSN,
                //                CardSN = cardSn,
                //                CardType = item.CardType,
                //                ReChargeTotal = 0,
                //                GiveTotal = 0,
                //                Balance = 0,
                //                Integer = 0,
                //                Deposit = 0,
                //                State = 0,
                //                ExpiryStart = item.ExpiryStart,
                //                ExpiryEnd = item.ExpiryEnd,
                //                CreateDT = DateTime.Now,
                //                CreateUID = Sys.CurrentUser.UID,
                //                SecurityCode = securitycode
                //            };

                //            BaseService<MembershipCard>.CurrentRepository.Add(_memberCard, false);
                //        }
                //    }
                //    //else
                //    //{
                //    //    return new OpResult() { Successed = false, Message = "该批次已制卡！" };
                //    //}
                //    item.State = state;
                //} 
                #endregion

                CurrentRepository.Update(new MakingMembershipCard());
                return new OpResult() { Successed = true, Message = "操作成功！" };
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        /// <summary>
        /// 取最大批次信息
        /// </summary>
        /// <returns></returns>
        public MakingMembershipCard GetFirstMakingMemberShipCard()
        {
            var date = Convert.ToDateTime(DateTime.Now.ToShortDateString());
            return CurrentRepository.Entities.Where(o => o.CreateDT > date).OrderByDescending(o => o.CreateDT).FirstOrDefault();
        }

        //public DataTable GetDatasByWhere()
        //{ 
        //var dt=
        //}
    }
}
