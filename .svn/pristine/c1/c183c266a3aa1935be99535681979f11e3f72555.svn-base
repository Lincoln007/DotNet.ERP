using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.Entity;
using Pharos.Sys.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;


namespace Pharos.Logic.BLL
{
    public class IntegralRuleService : BaseService<IntegralRule>
    {
        public OpResult CreateIntegralRule(IntegralRule rule)
        {
            return IntegralRuleService.Add(rule);
        }

        public object FindIntegralRuleList(short ruleTypeId, string value, out int count)
        {
            var query = CurrentRepository.Entities.Where(o => o.CompanyId == CommonService.CompanyId);
            count = query.Count();
            if (count > 0)
            {
                var result = (from a in query
                              join b in BaseService<SysStoreUserInfo>.CurrentRepository.Entities
                              on a.CreateUID equals b.UID
                              select new
                              {
                                  Id = a.Id,
                                  State = a.State,
                                  ExpiryStart = a.ExpiryStart,
                                  ExpiryEnd = a.ExpiryEnd,
                                  UseUsers = a.UseUsers,
                                  Condition = a.Condition,
                                  ReturnValue = a.ReturnValue,
                                  InContainsPromotion = a.InContainsPromotion,
                                  RuleTypeId = a.RuleTypeId,
                                  PayType = a.PayType,
                                  CreateDT = a.CreateDT,
                                  CreateUID = b.FullName
                              }).ToPageList();
                return result;
            }
            else
            {
                return new IntegralRule();
            }
        }

        public OpResult UpdateIntegralRule(string ids, short state)
        {
            try
            {
                var updateData = CurrentRepository.Entities.Where(o => o.CompanyId == CommonService.CompanyId && ("," + ids + ",").Contains("," + o.Id + ","));
                if (updateData.Count() > 0)
                {
                    foreach (var item in updateData)
                    {
                        if (item.State != state)
                        {
                            item.State = state;
                        }
                    }
                    var result = CurrentRepository.Update(new IntegralRule());
                    if (result)
                    {
                        return new OpResult() { Successed = true, Message = "操作成功！" };
                    }
                    else
                    {
                        return new OpResult() { Successed = true, Message = "无数据更新！" };
                    }
                }
                else
                {
                    return new OpResult() { Successed = true, Message = "未找到对应数据！" };
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
    }
}
