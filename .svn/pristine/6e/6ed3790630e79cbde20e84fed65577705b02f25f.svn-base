using Pharos.POS.Retailing.Models;
using Pharos.POS.Retailing.Models.ApiParams;
using Pharos.POS.Retailing.Models.ApiReturnResults;
using Pharos.POS.Retailing.Models.PosModels;
using Pharos.Wpf.ViewModelHelpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace Pharos.POS.Retailing.Models.ViewModels
{
    public class ProductEdit : BaseViewModel
    {
        public ProductEdit(Product product)
        {
            this.PropertyChanged += ProductEdit_PropertyChanged;
            Barcode = product.Barcode;
            Title = product.Title;
            SysPrice = product.Price;
            Num = product.Number;
            Discount = 10;
            Status = product.Status;
        }
        SaleStatus status;
        public SaleStatus Status
        {
            get
            {
                return status;
            }
            set
            {
                status = value;
                this.OnPropertyChanged(o => o.Status);
            }
        }

        string fristProperty = string.Empty;
        void ProductEdit_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "Num")
            {
                //Total
                Total = Num * Preferential;
                fristProperty = string.Empty;
            }
            else if (e.PropertyName == "Discount" && fristProperty != "Preferential")
            {
                fristProperty = e.PropertyName;
                //Preferential
                Preferential = SysPrice * (Discount / 10);
                Total = Num * Preferential;
            }
            else if (e.PropertyName == "Preferential")
            {
                if (fristProperty != "Discount")
                {
                    fristProperty = e.PropertyName;

                    //Discount
                    Discount = Preferential / SysPrice * 10;
                    Total = Num * Preferential;
                }
                //Total
                fristProperty = string.Empty;
            }
        }
        /// <summary>
        /// 条码
        /// </summary>
        private string barcode;

        public string Barcode
        {
            get { return barcode; }
            set { barcode = value; this.OnPropertyChanged(o => o.Barcode); }
        }
        /// <summary>
        /// 标题
        /// </summary>
        private string title;

        public string Title
        {
            get { return title; }
            set { title = value; this.OnPropertyChanged(o => o.Title); }
        }
        /// <summary>
        /// 数量
        /// </summary>
        private decimal num;

        public decimal Num
        {
            get { return num; }
            set { num = value; this.OnPropertyChanged(o => o.Num); }
        }

        private decimal sysPrice = 100.00m;

        public decimal SysPrice
        {
            get { return sysPrice; }
            set { sysPrice = value; }
        }



        /// <summary>
        /// 折扣
        /// </summary>
        private decimal dicount;

        public decimal Discount
        {
            get { return dicount; }
            set { dicount = value; this.OnPropertyChanged(o => o.Discount); }
        }
        /// <summary>
        /// 折后/特价
        /// </summary>
        private decimal preferential;

        public decimal Preferential
        {
            get { return preferential; }
            set { preferential = value; this.OnPropertyChanged(o => o.Preferential); }
        }
        /// <summary>
        /// 小计
        /// </summary>
        private decimal total;

        public decimal Total
        {
            get { return total; }
            set { total = value; this.OnPropertyChanged(o => o.Total); }
        }

        public ICommand NumAdd
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    Num += 1;
                });
            }
        }
        public ICommand NumDec
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    Num -= 1;
                    if (Num < 1)
                    {
                        Num = 1;
                    }
                });
            }
        }

        public ICommand Confirm
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    Task.Factory.StartNew(() =>
                    {
                        var _machineInfo = Global.MachineSettings.MachineInformations;
                        SaleParams _params = new SaleParams() { StoreId = _machineInfo.StoreId, MachineSn = _machineInfo.MachineSn, Barcode = Barcode, Status = Status, Number = Num, SalePrice = Preferential, CompanyToken = _machineInfo.CompanyToken };
                        var result = ApiManager.Post<SaleParams, ApiRetrunResult<ApiSaleReturn>>(@"api/Sale", _params);

                        if (result.Code == "200")
                        {
                            CurrentWindow.Dispatcher.Invoke(new Action(() =>
                            {
                                PosViewModel.Current.OrderList = result.Result.BuyList;
                                PosViewModel.Current.Preferential = result.Result.Statistics.Preferential;
                                PosViewModel.Current.Receivable = result.Result.Statistics.Receivable;
                                PosViewModel.Current.Num = result.Result.Statistics.Num;
                                CurrentWindow.Close();
                            }));
                        }
                        else
                        {
                            Toast.ShowMessage(result.Message, CurrentWindow);
                        }
                    });
                });
            }
        }


    }
}
