using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.ApiData.Pos.Sale.Barcodes;
using Pharos.Logic.ApiData.Pos.DataAdapter;
using Pharos.Logic.ApiData.Pos.ValueObject;
using Pharos.Logic.ApiData.Pos.Sale.Payment;
using Pharos.Logic.ApiData.Pos.Exceptions;

namespace Pharos.Logic.ApiData.Pos.Sale.AfterSale
{
    public class OrderChangeRefundSale : OrderMiddleware
    {
        public OrderChangeRefundSale()
        {
            ChangingList = new List<ChangeProduct>();
        }
        public AfterSaleMode Mode { get; set; }
        public List<ChangeProduct> ChangingList { get; set; }

        public string PaySn { get; internal set; }
        public string CustomOrderSn { get; internal set; }

        /// <summary>
        /// 购物车与结算POS机关联信息
        /// </summary>
        internal MachineInformation machineInformation { get; set; }
        /// <summary>
        /// 件数
        /// </summary>
        public int RecordCount
        {
            get
            {
                var products = ChangingList.Where(o => o.ProductType != ProductType.Weigh);
                var weighProducts = ChangingList.Where(o => o.ProductType == ProductType.Weigh);
                var count = Convert.ToInt32(products.Sum(o => o.ChangeNumber));
                count += weighProducts.Count();
                return count;
            }
        }

        public decimal Difference
        {
            get
            {
                return ChangingList.Sum(o => o.Total);
            }
        }
        public override bool VerfyProduct(IIdentification newBarcode, IIdentification oldBarcode)
        {
            if (base.VerfyProduct(newBarcode, oldBarcode))
            {
                var newP = (newBarcode as ChangeProduct);
                var oldP = (oldBarcode as ChangeProduct);
                if (string.IsNullOrEmpty(newBarcode.RecordId))
                {
                    return newP.IsChange == oldP.IsChange;
                }
                else
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// 增加退换货商品
        /// </summary>
        /// <param name="barcodeStr"></param>
        /// <param name="storeId"></param>
        /// <param name="machineSn"></param>
        /// <param name="companyToken"></param>
        /// <returns></returns>
        public object Add(string barcodeStr, string storeId, string machineSn, int companyToken, bool status)
        {
            var changingItem = ChangingList.Where(o => VerfyProduct(new ChangeProduct() { IsChange = status, MainBarcode = barcodeStr, }, o)).FirstOrDefault();

            if (changingItem == null)
            {
                var barcode = BarcodeFactory.Factory(storeId, machineSn, companyToken, barcodeStr);
                ChangingList.Add(new ChangeProduct(barcode, status));
            }
            else
            {
                if (status)
                { changingItem.ChangeNumber++; }
                else
                { changingItem.ChangeNumber--; }

                changingItem.Total = changingItem.ChangeNumber * changingItem.ChangePrice;
            }
            return new { ChangingList, Difference, PaySn = CustomOrderSn };
        }

        public object Edit(string barcodeStr, string storeId, string machineSn, int companyToken, decimal num, decimal price, string recordId, ProductType productType)
        {
            ChangeProduct changingItem;
            try
            {
                changingItem = ChangingList.Where(o => VerfyProduct(new ChangeProduct() { MainBarcode = barcodeStr, ProductType = productType, RecordId = recordId ?? "errorrecordid" }, o)).FirstOrDefault();
            }
            catch
            {
                goto ThrowException;
            }
            if (changingItem.Barcode != barcodeStr)
            {
                goto ThrowException;
            }
            if (changingItem != null)
            {
                changingItem.ChangeNumber = num;
                if (Math.Abs(changingItem.ChangePrice - price) >= 0.01m)
                {
                    changingItem.ChangePrice = price;
                    changingItem.HasEditPrice = true;
                }
                changingItem.Total = changingItem.ChangePrice * changingItem.ChangeNumber;
            }
            return new { ChangingList, Difference, PaySn = CustomOrderSn };
        ThrowException:
            throw new PosException("指定修改行失败！");
        }

        public object Remove(string barcodeStr, string storeId, string machineSn, int companyToken, string recordId, ProductType productType)
        {
            ChangeProduct changingItem;
            try
            {
                changingItem = ChangingList.Where(o => VerfyProduct(new ChangeProduct() { MainBarcode = barcodeStr, ProductType = productType, RecordId = recordId ?? "errorrecordid" }, o)).FirstOrDefault();
            }
            catch
            {
                goto ThrowException;
            }
            if (changingItem.Barcode != barcodeStr)
            {
                goto ThrowException;
            }

            ChangingList.Remove(changingItem);
            return new { ChangingList, Difference, PaySn = CustomOrderSn };
        ThrowException:
            throw new PosException("指定修改行失败！");
        }

        public void SaveRecord(string storeId, string machineSn, int token, int reason, decimal amount, decimal receive, IPay pay, string deviceSn)
        {
            var dataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, storeId, machineSn, token, deviceSn);
            var shoppingcart = ShoppingCartFactory.Factory(storeId, machineSn, token, deviceSn);
            var uid = shoppingcart.MachineInformation.CashierUid;
            string apiCodes = pay != null ? pay.ApiCodes : "-1";
            dataAdapter.ChangeOrRefund(this, reason, shoppingcart.MachineInformation, this.CustomOrderSn, amount, receive, uid, apiCodes);
        }
        public static IEnumerable<ReasonItem> GetChangeReason(string storeId, string machineSn, int token, string deviceSn)
        {
            var dataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, storeId, machineSn, token, deviceSn);
            return dataAdapter.GetReason(1);
        }

        public static void RefundAll(string storeId, string machineSn, int token, int reason, string paySn, decimal amount, string deviceSn)
        {
            var dataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, storeId, machineSn, token, deviceSn);
            var shoppingcart = ShoppingCartFactory.Factory(storeId, machineSn, token, deviceSn);
            var uid = shoppingcart.MachineInformation.CashierUid;
            dataAdapter.RefundAll(reason, paySn, amount, uid);
        }

        public static IEnumerable<ReasonItem> GetRefundReason(string storeId, string machineSn, int token, string deviceSn)
        {
            var dataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, storeId, machineSn, token, deviceSn);
            return dataAdapter.GetReason(2);
        }
    }
}
