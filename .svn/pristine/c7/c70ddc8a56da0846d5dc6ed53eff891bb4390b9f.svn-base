using Pharos.Logic.MemberDomain.Interfaces;
using Pharos.Logic.MemberDomain.QuanChengTaoProviders.IntegralRules;
using Pharos.Logic.MemberDomain.QuanChengTaoProviders.Scenes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace Pharos.Logic.MemberDomain.QuanChengTaoProviders
{
    public class BarcodeIntegralProvider : IIntegralRuleProvider
    {
        public int ProviderId
        {
            get { return (int)IntegralProviderType.BarcodeIntegralProvider; }
        }

        public IEnumerable<IIntegralRule> GetRules(object info = null)
        {
            return null;
        }

        //private Expression<Func<IScene, decimal>> GetIntegralExpression(Pharos.Logic.Entity.ReturnRules entity)
        //{
        //    var p = Expression.Parameter(typeof(IScene), "p");
        //    if(entity.Mode==)
        //    var propertyName = Expression.Property(p, "");

        //    switch (entity.LeftSign)
        //    {
        //        case 223: 

        //            break;
        //    }
        //}

        public IEnumerable<int> GetMeteringModes(IEnumerable<IIntegralRule> providerRules)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<IIntegralRule> VerifyRules(IEnumerable<IIntegralRule> providerRules, IScene scene)
        {
            throw new NotImplementedException();
        }

        public IDictionary<IIntegralRule, decimal> RunExpression(IEnumerable<IIntegralRule> efficientRules, IScene scene)
        {
            throw new NotImplementedException();
        }

        public IScene GetScene(object channelMessage, IEnumerable<int> meteringModes)
        {
            throw new NotImplementedException();
        }
    }
}
