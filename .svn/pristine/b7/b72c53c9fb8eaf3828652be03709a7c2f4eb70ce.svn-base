using Pharos.Infrastructure.Data.Normalize;
using Pharos.Logic.ApiData.Pos.Cache;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.ApiData.Pos.Sale.Suspend;
using Pharos.Logic.ApiData.Pos.User;
using Pharos.Logic.ApiData.Pos.ValueObject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.Sale
{
    /// <summary>
    /// 购物车工厂
    /// </summary>
    public static class ShoppingCartFactory
    {
        internal static ShoppingCartCache shoppingCartCache = new ShoppingCartCache();

        public static ShoppingCart Factory(string storeId, string machineId, int token, string deviceSn, bool isNew = false)
        {
            string key = KeyFactory.MachineKeyFactory(token, storeId, machineId, deviceSn);
#if(Local!=true)
            shoppingCartCache.JsonSerializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
#endif

            if (shoppingCartCache.ContainsKey(key) && !isNew)
            {
#if(Local!=true)
                shoppingCartCache.JsonSerializerSettings.Converters.Add(new BarcodeConverter(token, storeId, machineId));
                shoppingCartCache.JsonSerializerSettings.Converters.Add(new IdentificationConverter(token, storeId, machineId));
#endif
                var shoppingCart = shoppingCartCache.Get(key);
                var machineInfo = Salesclerk.OnlineCache.Get(key);
                shoppingCart.MachineInformation = machineInfo;

                if (shoppingCart == null || shoppingCart.MachineInformation == null || !shoppingCart.MachineInformation.Enable)
                {
                    goto TheSaleException;
                }
                return shoppingCart;
            }
            else
            {
                shoppingCartCache.Remove(key);
                var machineInfo = Salesclerk.OnlineCache.Get(key);
                if (machineInfo != null)
                {
                    var shoppingCart = new ShoppingCart();
                    shoppingCart.MachineInformation = machineInfo;
                    shoppingCart.NewAndResetOrderSN();
                    shoppingCartCache.Set(key, shoppingCart);
                    return shoppingCart;
                }
                else
                {
                    goto TheSaleException;
                }
            }

        TheSaleException:
            throw new SaleException("400", "未登录或者未授权，不允许操作！");
        }

        public static void ResetCache(ShoppingCart shoppingCart, string storeId, string machineId, int token, string deviceSn) 
        {
            string key = Pharos.Infrastructure.Data.Normalize.KeyFactory.MachineKeyFactory(token, storeId, machineId, deviceSn);
            shoppingCartCache.Set(key, shoppingCart);
        }
    }
}
