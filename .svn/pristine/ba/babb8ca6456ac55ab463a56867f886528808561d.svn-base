using Pharos.POS.Retailing.ChildWin;
using Pharos.POS.Retailing.Models.ApiParams;
using Pharos.POS.Retailing.Models.ApiReturnResults;
using Pharos.POS.Retailing.Models.PosModels;
using Pharos.Wpf.ViewModelHelpers;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace Pharos.POS.Retailing.Models.ViewModels
{
    /// <summary>
    /// 多方式支付
    /// </summary>
    public class MultiPaymentViewModel : BaseViewModel
    {
        public MultiPaymentViewModel(decimal _amount, PayAction _payAction, int reason = 0)
        {
            IsOperatEnabled = true;
            Amount = _amount;
            PayAction = _payAction;
            Reason = reason;
            WipeZeroAfter = Math.Round(_amount, 1, MidpointRounding.AwayFromZero);
            WipeZero = Amount - WipeZeroAfter;
            if (WipeZero < 0)
            {
                WipeZero = 0;
            }
        }
        private decimal wipeZeroAfter;
        /// <summary>
        /// 抹零后金额
        /// </summary>
        public decimal WipeZeroAfter
        {
            get { return wipeZeroAfter; }
            set
            {
                wipeZeroAfter = value;
                this.OnPropertyChanged(o => o.WipeZeroAfter);
            }
        }
        private decimal wipeZero;

        /// <summary>
        /// 抹零金额
        /// </summary>
        public decimal WipeZero
        {
            get { return wipeZero; }
            set { wipeZero = value; this.OnPropertyChanged(o => o.WipeZero); }
        }


        int Reason { get; set; }
        /// <summary>
        /// 付款类型
        /// </summary>
        private PayAction payAction;

        public PayAction PayAction
        {
            get { return payAction; }
            set { payAction = value; }
        }

        /// <summary>
        /// 支付金额
        /// </summary>
        private decimal amount;

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; this.OnPropertyChanged(o => o.Amount); }
        }
        /// <summary>
        /// 现金支付
        /// </summary>
        private decimal cashPay = 0m;

        public decimal CashPay
        {
            get { return cashPay; }
            set
            {
                cashPay = value;
                this.OnPropertyChanged(o => o.CashPay);
                SumTotal();

            }
        }
        /// <summary>
        /// 银联支付
        /// </summary>
        private Decimal unionPay = 0m;

        public Decimal UnionPay
        {
            get { return unionPay; }
            set
            {
                unionPay = value;
                this.OnPropertyChanged(o => o.UnionPay); SumTotal();
            }
        }
        /// <summary>
        /// 代金卡支付
        /// </summary>
        private decimal giftCard = 0m;

        public decimal GiftCard
        {
            get { return giftCard; }
            set { giftCard = value; this.OnPropertyChanged(o => o.GiftCard); SumTotal(); }
        }
        /// <summary>
        /// 储值卡支付
        /// </summary>
        private decimal prepaidCard = 0m;

        public decimal PrepaidCard
        {
            get { return prepaidCard; }
            set { prepaidCard = value; this.OnPropertyChanged(o => o.PrepaidCard); SumTotal(); }
        }
        /// <summary>
        /// 储值卡卡号
        /// </summary>
        private string prepaidCardNo;

        public string PrepaidCardNo
        {
            get { return prepaidCardNo; }
            set { prepaidCardNo = value; this.OnPropertyChanged(o => o.PrepaidCardNo); }
        }
        /// <summary>
        /// 实收总计
        /// </summary>
        private decimal total = 0m;

        public decimal Total
        {
            get { return total; }
            set { total = value; this.OnPropertyChanged(o => o.Total); }
        }
        /// <summary>
        /// 尚欠
        /// </summary>
        private decimal stillOwe = 0m;

        public decimal StillOwe
        {
            get { return stillOwe; }
            set { stillOwe = value; this.OnPropertyChanged(o => o.StillOwe); }
        }
        /// <summary>
        /// 找零
        /// </summary>
        private decimal change = 0m;

        public decimal Change
        {
            get { return change; }
            set { change = value; this.OnPropertyChanged(o => o.Change); }
        }
        /// <summary>
        /// 统计
        /// </summary>
        /// <returns></returns>
        public void SumTotal()
        {
            var tempAmount = WipeZeroAfter - GiftCard;
            if (tempAmount <= 0)
            {
                Change = 0m;
                StillOwe = 0m;
            }
            else
            {
                tempAmount = tempAmount - UnionPay - PrepaidCard;
                if (tempAmount > 0)
                {
                    tempAmount -= CashPay;
                    if (tempAmount > 0)
                    {
                        Change = 0m;
                        StillOwe = tempAmount;
                    }
                    else
                    {
                        Change = Math.Abs(tempAmount);
                        StillOwe = 0m;
                    }
                }
                else
                {
                    Change = Math.Abs(tempAmount);
                    StillOwe = 0m;
                }
            }
            Total = CashPay + UnionPay + GiftCard + PrepaidCard;

        }

        /// <summary>
        /// 完成支付
        /// </summary>
        public ICommand ConfirmCommand
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    IsOperatEnabled = false;
                    if (Total < WipeZeroAfter)
                    {
                        Toast.ShowMessage("收款金额不可小于应收金额！", CurrentWindow);
                        IsOperatEnabled = true;

                        return;
                    }
                    if ((UnionPay + PrepaidCard) > (WipeZeroAfter - GiftCard))
                    {
                        Toast.ShowMessage("银联、储值卡收款金额超出！", CurrentWindow);
                        IsOperatEnabled = true;
                        return;
                    }
                    Task.Factory.StartNew(() =>
                    {
                        MachineInformations _machineInfo = Global.MachineSettings.MachineInformations;
                        //判读是否有用该支付方式支付
                        List<PayWay> payWay = new List<PayWay>();
                        if (CashPay > 0)
                        {
                            PayWay _payWay = new PayWay()
                            {
                                Amount = Amount - GiftCard - UnionPay - PrepaidCard - WipeZero,
                                Change = Change,
                                Receive = CashPay,
                                Type = PayMode.CashPay,
                                WipeZero = WipeZero
                            };
                            payWay.Add(_payWay);
                        }
                        if (UnionPay > 0)
                        {
                            PayWay _payWay = new PayWay()
                            {
                                Amount = UnionPay,
                                Change = 0,
                                Receive = UnionPay,
                                Type = PayMode.UnionPay
                            };
                            payWay.Add(_payWay);
                        }
                        if (GiftCard > 0)
                        {
                            PayWay _payWay = new PayWay()
                            {
                                Amount = GiftCard > Amount ? Amount : GiftCard,
                                Change = 0,
                                Receive = GiftCard,
                                Type = PayMode.CashCoupon
                            };
                            payWay.Add(_payWay);
                        }
                        if (PrepaidCard > 0)
                        {
                            PayWay _payWay = new PayWay()
                            {
                                Amount = PrepaidCard,
                                Change = 0,
                                Receive = PrepaidCard,
                                Type = PayMode.StoredValueCard
                            };
                            payWay.Add(_payWay);
                        }
                        ApiPayParams _params = new ApiPayParams()
                        {
                            StoreId = _machineInfo.StoreId,
                            MachineSn = _machineInfo.MachineSn,
                            CompanyToken = _machineInfo.CompanyToken,
                            Mode = PayAction,
                            Receivable = WipeZeroAfter,
                            Payway = payWay,
                            OrderAmount = Amount,
                            Reason = Reason
                        };
                        var result = ApiManager.Post<ApiPayParams, ApiRetrunResult<ApiPayResult>>(@"api/Pay", _params);
                        CurrentWindow.Dispatcher.Invoke(new Action(() =>
                        {
                            if (result.Code == "200")
                            {
                                //返回成功则打开微信支付界面
                                ZhiFuWanCheng page = new ZhiFuWanCheng(Amount, Total, Change, "多方式支付", PayAction);//支付方式参数
                                page.Owner = Application.Current.MainWindow;

                                CurrentWindow.Hide();
                                page.ShowDialog();
                                CurrentWindow.Close();
                            }
                            else
                            {
                                Toast.ShowMessage(result.Message, CurrentWindow);
                            }
                            IsOperatEnabled = true;
                        }));
                    });
                });
            }
        }
        bool _IsOperatEnabled = true;

        public bool IsOperatEnabled
        {
            get { return _IsOperatEnabled; }
            set
            {
                _IsOperatEnabled = value;
                this.OnPropertyChanged(o => o.IsOperatEnabled);
            }
        }
    }
}
