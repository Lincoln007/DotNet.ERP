using Pharos.Api.Retailing.Models;
using Pharos.Api.Retailing.Models.Pos;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.ApiData.Pos.Sale;
using Pharos.Logic.ApiData.Pos.Sale.Category;
using Pharos.Logic.ApiData.Pos.User;
using Pharos.Logic.ApiData.Pos.ValueObject;
using System;
using System.Collections.Generic;
using System.Web.Http;
using System.Linq;
using Pharos.Logic.ApiData.Pos;
using Pharos.Logic.ApiData.Pos.Sale.Suspend;
using Pharos.Logic.ApiData.Pos.Sale.AfterSale;
using Pharos.Logic.ApiData.Pos.Sale.Payment;
using System.Configuration;

namespace Pharos.Api.Retailing.Controllers.Pos
{
    /// <summary>
    /// 销售相关接口
    /// </summary>
    [RoutePrefix("api")]
    public class SaleController : ApiController
    {
        /// <summary>
        /// 公告
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Announcements")]
        [HttpPost]
        public IEnumerable<Announcement> Announcements([FromBody] PaysStatusRequest requestParams)
        {
            return new WarehouseManager().Announcements(requestParams.StoreId, requestParams.MachineSn);
        }
        /// <summary>
        /// 设备注册
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("RegisterDevice")]
        [HttpPost]
        public object RegisterDevice([FromBody] DeviceRequest requestParams)
        {
            MachinesSettings.RegisterDevice(requestParams.StoreId, requestParams.MachineSn, requestParams.DeviceSn, requestParams.Type);
            return null;
        }

        /// <summary>
        /// 购物清单接口
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Sale")]
        [HttpPost]
        public OrdersDetails Sale([FromBody] SaleRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn);
            shoppingcart.Add(requestParams.Barcode, requestParams.Number, requestParams.SalePrice, requestParams.Status, requestParams.GiftId, requestParams.GiftPromotionId);

            var result = new OrdersDetails()
              {
                  BuyList = shoppingcart.GetBuyList(),
                  Gifts = new List<GiftResult>()  
                  {
                     new GiftResult()
                     {
                         GiftId= "6e2f62208b0d448da0ca4f515e78880b",
                         GiftPromotionId = "a5d62e18510549139ce4b7616e04c6cf",
                         GiftNumber = 5,
                         Mode = GiftMode.Free,
                         GiftList= new List<GiftListItem>()
                         {
                            new GiftListItem()
                            {
                                Barcode= "9556483900852",
                                Title= "阿莎力番石榴汁(300ml)",
                                Size= "1*24",
                                Brand= "阿莎力",
                                Category= "特产/饮料/果汁",
                                Unit= "瓶", 
                                Inventory =5,
                                SysPrice = 7
                            },
                            new GiftListItem()
                            {
                                Barcode= "9556483900845",
                                Title= "阿莎力含果肉芒果汁(300ml)",
                                Size= "1*24",
                                Brand= "阿莎力",
                                Category= "特产/饮料/果汁",
                                Unit= "瓶",
                                SysPrice= 7
                            }
                         },
                         Price = 0,
                         Amount =0,
                         PromotionActivity = "买赠促销"
                     }
                  },
                  Statistics = shoppingcart.GetSaleStatistics()
              };
            return result;
        }
        /// <summary>
        /// 取消/清空销售清单接口
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>

        [Route("ClearOrder")]
        [HttpPost]
        public OrdersDetails ClearOrder([FromBody] MachineInfo requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn);
            shoppingcart.Clear();
            var result = new OrdersDetails()
            {
                BuyList = shoppingcart.GetBuyList(),
                Gifts = new List<GiftResult>(),
                Statistics = shoppingcart.GetSaleStatistics()
            };
            return result;
        }
        /// <summary>
        /// 查库存
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("GetProductStock")]
        [HttpPost]
        public PageResult<InventoryResult> ProductStock(InventoryRequest requestParams)
        {
            WarehouseManager warehouse = new WarehouseManager();
            var pageSize = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageSize"]);
            var pageIndex = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageIndex"]);
            var result = warehouse.CheckedInventory(requestParams.StoreId, requestParams.MachineSn, requestParams.CategorySns, requestParams.Keyword, pageSize, pageIndex);
            return result;
        }
        /// <summary>
        /// 查价格
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("FindWithPriceRange")]
        [HttpPost]
        public PageResult<InventoryResult> FindWithPriceRange(CheckPriceRequest requestParams)
        {
            WarehouseManager warehouse = new WarehouseManager();
            var pageSize = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageSize"]);
            var pageIndex = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageIndex"]);
            var result = warehouse.CheckedPrice(requestParams.StoreId, requestParams.MachineSn, requestParams.CategorySns, requestParams.From, requestParams.To, pageSize, pageIndex);
            return result;
        }
        /// <summary>
        /// 店长授权
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Authorization")]
        [HttpPost]
        public object Authorization(AuthorizationRequest requestParams)
        {
            if (new Salesclerk().VerfyStoreManagerOperateAuth(requestParams.StoreId, requestParams.MachineSn, requestParams.Password))
            {
                return null;
            }
            throw new PosException("400", "密码错误，授权失败！");
        }

        /// <summary>
        /// 获取会员信息
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("SetMember")]
        [HttpPost]
        public object SetMember(SetMemberRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSN);
            shoppingcart.SetMember(requestParams.Phone, requestParams.To);
            shoppingcart.SetActivityId(requestParams.ActivityId);
            return null;
        }
        /// <summary>
        /// 门店产品分类
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("GetProductCategory")]
        [HttpPost]
        public Category GetProductCategory(CategoryRequest requestParams)
        {
            return new CategoryTree().GetCategoryTree(requestParams.StoreId, requestParams.MachineSn);
        }
        /// <summary>
        /// 出入款
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("PosIncomePayout")]
        [HttpPost]
        public object PosIncomePayout(PosIncomePayoutRequest requestParams)
        {
            var salesclerk = new Salesclerk();
            salesclerk.PosIncomePayout(requestParams.StoreId, requestParams.MachineSn, requestParams.UserCode, requestParams.Password, requestParams.Money, requestParams.Type);
            return null;
        }
        /// <summary>
        /// 挂单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("HandBill")]
        [HttpPost]
        public OrdersDetails HandBill([FromBody] HandBillRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn);
            SaleSuspend.Suspend(shoppingcart);
            var result = new OrdersDetails()
            {
                BuyList = shoppingcart.GetBuyList(),
                Gifts = new List<GiftResult>(),
                Statistics = shoppingcart.GetSaleStatistics()
            };
            return result;
        }
        /// <summary>
        /// 读单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("ReadHandBill")]
        [HttpPost]
        public OrdersDetails ReadHandBill([FromBody] HandBillRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn);
            var barcodes = SaleSuspend.Read(shoppingcart, requestParams.OrderSn);
            var result = new OrdersDetails()
            {
                BuyList = shoppingcart.GetBuyList(),
                Gifts = new List<GiftResult>()  
                  {
                     new GiftResult()
                     {
                         GiftId= "6e2f62208b0d448da0ca4f515e78880b",
                         GiftPromotionId = "a5d62e18510549139ce4b7616e04c6cf",
                         GiftNumber = 5,
                         Mode = GiftMode.Free,
                         GiftList= new List<GiftListItem>()
                         {
                            new GiftListItem()
                            {
                                Barcode= "9556483900852",
                                Title= "阿莎力番石榴汁(300ml)",
                                Size= "1*24",
                                Brand= "阿莎力",
                                Category= "特产/饮料/果汁",
                                Unit= "瓶", 
                                Inventory =5,
                                SysPrice = 7
                            },
                            new GiftListItem()
                            {
                                Barcode= "9556483900845",
                                Title= "阿莎力含果肉芒果汁(300ml)",
                                Size= "1*24",
                                Brand= "阿莎力",
                                Category= "特产/饮料/果汁",
                                Unit= "瓶",
                                SysPrice= 7
                            }
                         },
                         Price = 0,
                         PromotionActivity = "买赠促销"
                     }
                  },
                Statistics = shoppingcart.GetSaleStatistics()
            };
            return result;
        }
        /// <summary>
        /// 挂单清单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("HandBillList")]
        [HttpPost]
        public SuspendList HandBillList([FromBody] HandBillRequest requestParams)
        {
            return SuspendList.Factory(requestParams.StoreId, requestParams.MachineSn, MachinesSettings.CachePath);
        }
        /// <summary>
        /// 撤销挂单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("RemoveHandBill")]
        [HttpPost]
        public SuspendList RemoveHandBill([FromBody] HandBillRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn);
            var result = SaleSuspend.Remove(shoppingcart, requestParams.OrderSn);
            return result;

        }
        /// <summary>
        /// 通过日期查找历史订单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("FindBills")]
        [HttpPost]
        public IEnumerable<BillListItem> FindBills([FromBody] FindBillsRequest requestParams)
        {
            return BillHistory.GetBills(requestParams.StoreId, requestParams.MachineSn, requestParams.Date);
        }

        /// <summary>
        /// 通过流水号查找历史订单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("FindBillHistory")]
        [HttpPost]
        public BillHistoryInfo FindBillHistory([FromBody] FindBillHistoryRequest requestParams)
        {
            return BillHistory.GetBillDetails(requestParams.StoreId, requestParams.MachineSn, requestParams.PaySn);
        }
        /// <summary>
        /// 获取退换货原因列表
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("GetReason")]
        [HttpPost]
        public IEnumerable<ReasonItem> GetReason([FromBody] ReasonRequest requestParams)
        {
            IEnumerable<ReasonItem> result = null;
            switch (requestParams.Type)
            {
                case 1:
                    result = ChangeSale.GetReason(requestParams.StoreId, requestParams.MachineSn);
                    break;
                case 2:
                    result = RefundSale.GetReason(requestParams.StoreId, requestParams.MachineSn);
                    break;
                default:
                    throw new PosException("无法获取原因列表！");
            }
            return result;
        }
        /// <summary>
        /// 退货
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Refund")]
        [HttpPost]
        public object Refund([FromBody] RefundRequest requestParams)
        {
            RefundSale.Refund(requestParams.StoreId, requestParams.MachineSn, requestParams.RefundList, requestParams.Reason, requestParams.PaySn, requestParams.Amount);
            return null;
        }
        /// <summary>
        /// 整单退出（退单）
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("RefundAll")]
        [HttpPost]
        public object RefundAll([FromBody] RefundRequest requestParams)
        {
            RefundSale.RefundAll(requestParams.StoreId, requestParams.MachineSn, requestParams.Reason, requestParams.PaySn, requestParams.Amount);
            return null;
        }
        /// <summary>
        /// 支付
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Pay")]
        [HttpPost]
        public object Pay([FromBody] PayRequest requestParams)
        {
            if (requestParams == null || requestParams.Payway == null || requestParams.Payway.Count() == 0)
            {
                throw new PosException("未知支付方式！");
            }
            PayMode payMode;
            if (requestParams.Payway.Count() > 1)
            {
                payMode = PayMode.Multiply;

            }
            else
            {
                payMode = (PayMode)requestParams.Payway.FirstOrDefault().Type;
            }

            Dictionary<PayMode, PayDetails> payway = new Dictionary<PayMode, PayDetails>();
            IPay pay;
            switch (requestParams.Mode)
            {
                case PayAction.Change://换货支付
                    var paySn = Pharos.Logic.ApiData.Pos.Common.PaySn.New();
                    foreach (var item in requestParams.Payway)
                    {
                        payway.Add((PayMode)item.Type, new PayDetails()
                        {
                            Amount = item.Amount,
                            ApiOrderSn = null,
                            MachineSn = requestParams.MachineSn,
                            StoreId = requestParams.StoreId,
                            PaySn = paySn,
                            CardNo = item.CardNo
                        });
                    }
                    pay = PaymentFactory.Factory(payMode, payway, requestParams.Receivable, (o) =>
                     {
                         ChangeSale.Change(requestParams.StoreId, requestParams.MachineSn, requestParams.ChangeRecord.ChangeList, requestParams.ChangeRecord.Reason, requestParams.ChangeRecord.PaySn, requestParams.ChangeRecord.Amount, o);
                     });
                    if (pay is IThirdPartyPayment)//处理第三方支付
                    {
                        var thirdPartyPayment = pay as IThirdPartyPayment;
                        return new { Url = thirdPartyPayment.RequestPay(), PaySN = paySn };
                    }
                    else
                    {
                        pay.SetComplete();
                    }
                    break;
                case PayAction.Sale://销售支付
                    var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn);
                    foreach (var item in requestParams.Payway)
                    {
                        payway.Add((PayMode)item.Type, new PayDetails()
                        {
                            Amount = item.Amount,
                            ApiOrderSn = null,
                            MachineSn = requestParams.MachineSn,
                            StoreId = requestParams.StoreId,
                            PaySn = shoppingcart.OrderSN,
                            CardNo = item.CardNo
                        });
                    }
                    pay = PaymentFactory.Factory(payMode, payway, requestParams.Receivable, (o) =>
                    {
                        shoppingcart.Record();
                    });
                    if (pay is IThirdPartyPayment)//处理第三方支付
                    {
                        var thirdPartyPayment = pay as IThirdPartyPayment;
                        return new { Url = thirdPartyPayment.RequestPay(), PaySN = shoppingcart.OrderSN };
                    }
                    else
                    {
                        pay.SetComplete();
                    }
                    break;
            }
            return null;
        }
        /// <summary>
        /// 获取第三方支付状态
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("ThirdPartyPaymentStatus")]
        [HttpPost]
        public ThirdPartyPaymentStatus ThirdPartyPaymentStatus([FromBody] ThirdPartyPaymentRequest requestParams)
        {
            var pay = ThirdPartyPaymentManager.Find(requestParams.StoreId, requestParams.MachineSn, requestParams.PaySn, requestParams.Mode);
            var result = pay.GetPayStatus();
            return result;
        }

        /// <summary>
        /// 设置第三方支付完成
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("SetThirdPartyPaymentComplete")]
        [HttpPost]
        public object SetThirdPartyPaymentComplete([FromBody] ThirdPartyPaymentRequest requestParams)
        {
            var pay = ThirdPartyPaymentManager.Find(requestParams.StoreId, requestParams.MachineSn, requestParams.PaySn, requestParams.Mode);
            pay.SetComplete();
            return null;
        }
        /// <summary>
        /// 获取所有支付方式状态及图标
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("PaysStatus")]
        [HttpPost]
        public IEnumerable<IPay> PaysStatus([FromBody] PaysStatusRequest requestParams)
        {
            return PaymentFactory.GetPaysStatus();
        }
        /// <summary>
        /// 日结
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("DayReport")]
        [HttpPost]
        public DayReportResult DayReport([FromBody]DayReportRequest requestParams)
        {
            var result = new DayReportResult();
            result.SalesmanRecords = new List<SalesmanDayReportResult>();
            result.Summary = new List<DayReportDetailItem>();
            var dict = new List<PayWayItem>();
            dict.Add(new PayWayItem() { Title = "银联支付", Amount = 1100m });
            dict.Add(new PayWayItem() { Title = "现金支付", Amount = 1100m });
            dict.Add(new PayWayItem() { Title = "支付宝", Amount = 1100m });
            dict.Add(new PayWayItem() { Title = "微信", Amount = 1100m });
            dict.Add(new PayWayItem() { Title = "代金券", Amount = 1100m });
            dict.Add(new PayWayItem() { Title = "储值卡", Amount = 1100m });
            dict.Add(new PayWayItem() { Title = "自动摸零", Amount = 11000m });
            result.SalesmanRecords.Add(new SalesmanDayReportResult()
            {
                Cash = 600,
                EndTime = DateTime.Now,
                StartTime = DateTime.Now.AddHours(-5),
                Sale = new SalesmanDayReportSaleResult()
                {
                    PayWay = dict,
                    SaleInfo = new DayReportDetailItem() { Project = "销售合计", Number = 30, Amount = 400 }
                },
                Salesman = "张三",
                UserCode = "1002",
                Other = new List<DayReportDetailItem>(){ 
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="赠送合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="换货合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="退货合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="入款合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="出款合计"}
                }
            });



            result.SalesmanRecords.Add(new SalesmanDayReportResult()
            {
                Cash = 600,
                EndTime = DateTime.Now,
                StartTime = DateTime.Now.AddHours(-5),
                Sale = new SalesmanDayReportSaleResult()
                {
                    PayWay = dict,
                    SaleInfo = new DayReportDetailItem() { Project = "销售合计", Number = 30, Amount = 400 }
                },
                Salesman = "李四",
                UserCode = "1004",
                Other = new List<DayReportDetailItem>(){ 
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="赠送合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="换货合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="退货合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="入款合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="出款合计"}
                }
            });
            result.SalesmanRecords.Add(new SalesmanDayReportResult()
            {
                Cash = 600,
                EndTime = DateTime.Now,
                StartTime = DateTime.Now.AddHours(-5),
                Sale = new SalesmanDayReportSaleResult()
                {
                    PayWay = dict,
                    SaleInfo = new DayReportDetailItem() { Project = "销售合计", Number = 30, Amount = 400 }
                },
                Salesman = "李二",
                UserCode = "1003",
                Other = new List<DayReportDetailItem>(){ 
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="赠送合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="换货合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="退货合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="入款合计"},
                    new DayReportDetailItem(){ Amount = 1000, Number=10, Project ="出款合计"}
                }
            });

            result.Summary.Add(new DayReportDetailItem()
            {
                Amount = 1000,
                Number = 50,
                Project = "销售合计"
            });
            result.Summary.Add(new DayReportDetailItem()
            {
                Amount = 1000,
                Number = 50,
                Project = "退货合计"
            }); result.Summary.Add(new DayReportDetailItem()
            {
                Amount = 1000,
                Number = 50,
                Project = "赠送合计"
            }); result.Summary.Add(new DayReportDetailItem()
            {
                Amount = 1000,
                Number = 50,
                Project = "换货合计"
            });
            return result;
        }
        /// <summary>
        /// APP icon 和公司信息
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("AppInfo")]
        [HttpPost]
        public object AppInfo()
        {
            var result = new
            {
                FullName = ConfigurationManager.AppSettings["FullName"],
                Name = ConfigurationManager.AppSettings["Name"],
                IconUrl = ConfigurationManager.AppSettings["IconUrl"],
                AppVersion = ConfigurationManager.AppSettings["AppVersion"]
            };
            return result;
        }
    }

}