using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.BLL;
using Pharos.Logic.DAL;
using Pharos.Logic.Entity;
using Pharos.Utility.Helpers;
namespace Pharos.Logic.ApiData.Mobile.Services
{
    public class SupplierService : BaseGeneralService<Supplier, EFDbContext>
    {
        public static object GetOrderDeliveryList(string supplierId, string date)
        {
            if (string.IsNullOrWhiteSpace(supplierId))
                throw new PosException("供应商ID为空!");
            if (string.IsNullOrWhiteSpace(date))
                throw new PosException("当前日期为空!");
            var query = BaseService<VwOrder>.CurrentRepository.QueryEntity;
            var st1 = DateTime.Parse(date);
            var st2 = st1.AddMonths(1);
            query = query.Where(o => o.CreateDT >= st1 && o.CreateDT < st2 && o.State > 0 && o.SupplierID == supplierId);
            var list = query.OrderBy(o => o.CreateDT).ToList();
            var days = new List<object>();
            var dates = list.Select(o => o.CreateDT.Date).GroupBy(o => o.Date).ToList();
            foreach (var dt in dates)
            {
                var orders = list.Where(o => o.CreateDT.Date == dt.Key).Select(o => new
                {
                    o.StoreTitle,
                    o.OrderTotal,
                    OrderId = o.IndentOrderId,
                    StateTitle = o.StateTitle,
                    Time = o.CreateDT.ToShortTimeString()
                }).ToList();
                days.Add(new { Day = dt.Key.Day, Orders = orders });
            }
            return new { Year = st1.Year, Month = st1.Month, Days = days };
        }
        public static object GetOrderDeliveryDayList(string supplierId, string date)
        {
            if (string.IsNullOrWhiteSpace(supplierId))
                throw new PosException("供应商ID为空!");
            if (string.IsNullOrWhiteSpace(date))
                throw new PosException("当前日期为空!");
            var query = BaseService<VwOrder>.CurrentRepository.QueryEntity;
            var st1 = DateTime.Parse(date);
            var st2 = st1.AddDays(1);
            query = query.Where(o => o.CreateDT >= st1 && o.CreateDT < st2 && o.State > 0 && o.SupplierID == supplierId);
            return query.ToList().Select(o => new
            {
                o.StoreTitle,
                o.OrderTotal,
                OrderId = o.IndentOrderId,
                StateTitle = o.StateTitle,
                Time = o.CreateDT.ToShortTimeString()
            });

        }
        public static void OrderDelivery(string orderId, string barcode,string number)
        {
            if (string.IsNullOrWhiteSpace(orderId))
                throw new PosException("订单号为空!");
            if (string.IsNullOrWhiteSpace(barcode))
                throw new PosException("条码为空!");
            if (string.IsNullOrWhiteSpace(number))
                throw new PosException("配送量为空!");
            var bars = barcode.Split(',');
            var nums = number.Split(',');
            if(bars.Count()!=nums.Count())
                throw new PosException("条码和配送量不一致!");
            var distris =new List<OrderDistribution>();
            for (int i = 0; i < bars.Count(); i++)
            {
                distris.Add(new OrderDistribution() { 
                    Barcode=bars[i],
                    DeliveryNum=decimal.Parse(nums[i]),
                    IndentOrderId=orderId
                });
            }
            var orderList = BaseService<IndentOrderList>.FindList(o => o.IndentOrderId == orderId && o.DeliveryNum > 0);
            orderList.Each(o =>
            {
                var dis= distris.FirstOrDefault(i=>i.Barcode==o.Barcode);
                if(dis!=null && o.DeliveryNum+dis.DeliveryNum>o.IndentNum)
                    throw new PosException("条码["+o.Barcode+"]配送量超过订单量!");
            });
            var op= BLL.MsppBLL.Save(orderId, distris.ToJson(), "", "", "");
            if(!op.Successed)
                throw new PosException(op.Message);
        }
    }
}
