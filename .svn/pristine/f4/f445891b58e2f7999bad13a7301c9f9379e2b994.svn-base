using Pharos.Logic.OMS;
using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.Models;
using QCT.Pay.Common;
using QCT.Pay.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Pharos.Utility.Helpers;
using QCT.Pay.Common.Models;
using Pharos.Logic.OMS.BLL;

namespace QCT.Api.Pay.Utils
{
    /// <summary>
    /// 创建生成支付订单，购买者付款扫码，（对应融合支付：主扫支付动态二维码）
    /// </summary>
    public class OrderBuilderForBuyerScanDyna : OrderBuilder<PayBuyerScanDynaRequest, PayBuyerScanDynaResponse>
    {
        /// <summary>
        /// 创建生成支付订单，购买者付款扫码，（对应融合支付：主扫支付动态二维码）
        /// </summary>
        /// <param name="reqModel"></param>
        /// <returns></returns>
        public override QctPayReturn Build(PayBuyerScanDynaRequest reqModel)
        {
            WithReqModel(reqModel);
            WithOutTradeNo(reqModel.Out_Trade_No);
            var canObj = CanBuilder();
            if (!canObj.Successed)
                return canObj;
            else
            {
                var tradeOrder = new TradeOrder(ReqModel, MerchStoreModel,OrderHelper.GetMaxTradeNo());
                var result = PaySvc.SaveTradeOrder(tradeOrder);
                if (result)
                {
                    //构建Sxf请求参数，签名，发起请求
                    var sxfBuildReq = new SxfBuildPayTokenRequest(tradeOrder, PayConfig.SxfPayNotifyUrl);
                    sxfBuildReq.OrderType = "1";
                    var rstObj = SendPost<SxfBuildPayTokenRequest, SxfBuildPayTokenResponse>(MerchStoreModel.ApiUrl, sxfBuildReq);
                    if (rstObj.Successed)
                    {
                        //处理返回成功结果，将返回结果进行Qct签名并返回给商户，fishtodo:暂忽略验证Sxf返回的响应结果签名
                        var resultObj = new PayBuyerScanDynaResponse(tradeOrder, (SxfBuildPayTokenResponse)rstObj.Data);
                        WithRspModel(resultObj);
                        return QctPayReturn.Success(data: PaySignHelper.ToDicAndSign(resultObj, MerchModel.SecretKey, "sign"));
                    }
                    return rstObj;
                }
                else
                {
                    return ResultFail(msg: "订单提交失败", logMsg: string.Format("购买者付款扫码请求失败：{0}，异常信息：{1}", ReqModel.ToJson(), tradeOrder.ToJson()));
                }
            }
        }
    }
}