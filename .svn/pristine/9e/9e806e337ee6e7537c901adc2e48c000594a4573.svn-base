using Pharos.POS.Retailing.ChildWin;
using Pharos.POS.Retailing.Models.ApiParams;
using Pharos.POS.Retailing.Models.ApiReturnResults;
using Pharos.POS.Retailing.Models.PosModels;
using Pharos.Wpf.ViewModelHelpers;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;

namespace Pharos.POS.Retailing.Models.ViewModels.Pay
{
    public class MultiPayViewModel : BaseViewModel
    {
        bool isWipeZero = Global.MachineSettings.MachineInformations.IsNonCashWipeZero;
        public MultiPayViewModel(decimal _amount, PayAction _payAction, int reason = 0)
        {
            Amount = _amount;
            StillOwe = _amount;
            PayAction = _payAction;
            Reason = reason;
            if (isWipeZero)
            {
                WipeZeroAfter = Math.Round(_amount, 1, MidpointRounding.AwayFromZero);
            }
            else
            {
                WipeZeroAfter = _amount;
            }
            WipeZero = WipeZeroAfter - _amount;//摸零金额
        }

        private MultiPayItemViewModel _CurrentPayItem;
        public MultiPayItemViewModel CurrentPayItem
        {
            get { return _CurrentPayItem; }
            set
            {
                _CurrentPayItem = value;
                this.OnPropertyChanged(o => o.CurrentPayItem);
            }
        }
        private decimal wipeZeroAfter;
        /// <summary>
        /// 抹零后金额
        /// </summary>
        public decimal WipeZeroAfter
        {
            get { return wipeZeroAfter; }
            set
            {
                wipeZeroAfter = value;
                this.OnPropertyChanged(o => o.WipeZeroAfter);
            }
        }
        private decimal wipeZero;

        /// <summary>
        /// 抹零金额
        /// </summary>
        public decimal WipeZero
        {
            get { return wipeZero; }
            set { wipeZero = value; this.OnPropertyChanged(o => o.WipeZero); }
        }
        int Reason { get; set; }

        private PayAction payAction;
        /// <summary>
        /// 付款类型
        /// </summary>
        public PayAction PayAction
        {
            get { return payAction; }
            set { payAction = value; }
        }

        private decimal amount;
        /// <summary>
        /// 摸零前应收金额
        /// </summary>
        public decimal Amount
        {
            get { return amount; }
            set { amount = value; this.OnPropertyChanged(o => o.Amount); }
        }
        /// <summary>
        /// 尚欠
        /// </summary>
        private decimal stillOwe = 0m;

        public decimal StillOwe
        {
            get { return stillOwe; }
            set { stillOwe = value; this.OnPropertyChanged(o => o.StillOwe); }
        }
        /// <summary>
        /// 找零
        /// </summary>
        private decimal change = 0m;

        public decimal Change
        {
            get { return change; }
            set { change = value; this.OnPropertyChanged(o => o.Change); }
        }
        private decimal _Received;
        /// <summary>
        /// 实收金额
        /// </summary>
        public decimal Received
        {
            get { return _Received; }
            set { _Received = value; this.OnPropertyChanged(o => o.Received); }
        }
        public ObservableCollection<MultiPayItemViewModel> PayItems { get; set; }

        public bool isComplate = false;
        /// <summary>
        /// 完成支付
        /// </summary>
        public ICommand ConfirmCommand
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    if (wipeZeroAfter > Received)
                    {
                        Toast.ShowMessage("收款金额不可小于应收金额！", CurrentWindow);
                        return;
                    }
                    if (CurrentPayItem.HasOperat)
                    {
                        Toast.ShowMessage(CurrentPayItem.RequestOperatMessage, CurrentWindow);
                        return;
                    }
                    MachineInformations _machineInfo = Global.MachineSettings.MachineInformations;
                    //判读是否有用该支付方式支付
                    List<PayWay> payWay = new List<PayWay>();
                    foreach (var item in PayItems)
                    {
                        if (item.PayItem == null) continue;
                        PayWay _payWay = new PayWay()
                        {
                            Amount = item.Amount,
                            Change = 0m,
                            Receive = item.Amount,
                            Type = item.PayItem.Mode,
                            WipeZero = 0m
                        };
                        if (item.PayItem.Mode == PayMode.CashPay)
                        {
                            _payWay.WipeZero = WipeZero;
                            _payWay.Change = Change;
                        }
                        payWay.Add(_payWay);
                    }
                    ApiPayParams _params = new ApiPayParams()
                    {
                        StoreId = _machineInfo.StoreId,
                        MachineSn = _machineInfo.MachineSn,
                        CID = _machineInfo.CompanyToken,
                        Mode = PayAction,
                        Receivable = WipeZeroAfter,
                        Payway = payWay,
                        OrderAmount = Amount,
                        Reason = 0,
                        OldOrderSn = (PayAction == PayAction.RefundAll ? RefundChangeViewModel.Current.RefundOrder.PaySn : "")
                    };
                    var result = ApiManager.Post<ApiPayParams, ApiRetrunResult<object>>(@"api/Pay", _params);
                    if (result.Code == "200")
                    {
                        isComplate = true;
                        //返回成功则打开微信支付界面
                        ZhiFuWanCheng page = new ZhiFuWanCheng(WipeZeroAfter, Received, WipeZero, "多方付", PayAction, (DateTime)result.Result);//支付方式参数
                        page.Owner = Application.Current.MainWindow;
                        CurrentWindow.Close();
                        page.ShowDialog();
                    }
                    else
                    {
                        Toast.ShowMessage(result.Message, CurrentWindow);
                    }
                });

            }
        }
    }
    public class MultiPayItemViewModel : BaseViewModel, Pharos.POS.Retailing.XamlConverters.IMultiPayViewModel
    {

        public bool IsLast { get; set; }
        public bool IsFrist { get; set; }
        public bool IsSelected { get; set; }
        public decimal Amount { get; set; }
        public string PayName { get; set; }
        PayItem _PayItem;
        public PayItem PayItem
        {
            get { return _PayItem; }
            set
            {
                _PayItem = value;
                EnableClose = true;
                if (_PayItem == null)
                {
                    RequestOperatMessage = string.Empty;
                    HasOperat = false;
                }
                else
                {
                    switch (_PayItem.Mode)
                    {
                        case PayMode.StoredValueCard:
                            RequestOperatMessage = "请刷储值卡或者输入储值卡号！";
                            HasOperat = true;
                            break;
                        default:
                            HasOperat = false;
                            RequestOperatMessage = string.Empty;
                            break;
                    }
                }
            }
        }
        string _CardNo;
        public string CardNo
        {
            get { return _CardNo; }
            set
            {
                _CardNo = value;
                this.OnPropertyChanged(o => o.CardNo);
            }
        }
        public void DoPay()
        {
            switch (PayItem.Mode)
            {
                case PayMode.StoredValueCard:
                    {
                        MachineInformations _machineInfo = Global.MachineSettings.MachineInformations;
                        StoredValueCardPayParams _params = new StoredValueCardPayParams()
                        {
                            StoreId = _machineInfo.StoreId,
                            MachineSn = _machineInfo.MachineSn,
                            CID = _machineInfo.CompanyToken,
                            Amount = Amount,
                            CardNo = _CardNo,
                        };
                        var result = ApiManager.Post<StoredValueCardPayParams, ApiRetrunResult<StoredValueCardInfo>>(@"api/DoStoredValueCardPay", _params);
                        if (result.Code == "200")
                        {
                            HasOperat = false;
                            Balance = result.Result.Balance;
                            User = result.Result.User;
                            PayAmount = result.Result.PayAmount;
                            this.OnPropertyChanged(o => o.HasOperat);
                            this.OnPropertyChanged(o => o.Balance);
                            this.OnPropertyChanged(o => o.PayAmount);
                            this.OnPropertyChanged(o => o.User);
                            EnableClose = false;

                        }
                        else
                        {
                            Toast.ShowMessage(result.Message, Application.Current.MainWindow);
                        }
                    }
                    break;
            }
        }
        public decimal Balance { get; set; }
        public string User { get; set; }
        public decimal PayAmount { get; set; }



        public bool HasOperat { get; set; }

        public string RequestOperatMessage { get; set; }
        private bool _EnableClose = true;
        public bool EnableClose
        {
            get
            {
                return _EnableClose;
            }
            set
            {
                _EnableClose = value;
                this.OnPropertyChanged(o => o.EnableClose);
            }
        }
    }

    public class StoredValueCardInfo
    {
        public decimal Balance { get; set; }
        public string User { get; set; }
        public decimal PayAmount { get; set; }
    }
}
