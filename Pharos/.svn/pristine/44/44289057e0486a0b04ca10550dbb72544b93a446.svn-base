using Pharos.Logic.ApiData.Pos.DAL;
using Pharos.Logic.DAL;
using Pharos.SyncService.Exceptions;
using Pharos.SyncService.SyncEntities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.SyncService.Helpers;


namespace Pharos.SyncService.RemoteDataServices
{
    public class MemberIntegralPackageSyncRemoteService : ISyncDataService
    {
        public Microsoft.Synchronization.SyncDirectionOrder SyncDirectionOrder
        {
            get { return Microsoft.Synchronization.SyncDirectionOrder.Download; }
        }

        public IEnumerable<ISyncDataObject> GetSyncObjects(int companyId, string storeId)
        {
            try
            {
                using (var db = SyncDbContextFactory.Factory<EFDbContext>())
                {
                    var members = db.MemberIntegralSets.ToList();
                    List<SyncDataPackage> result = new List<SyncDataPackage>();

                    foreach (var item in members)
                    {
                        var package = GetVersion(item, companyId, storeId, db);
                        result.Add(package);
                    }
                    return result;
                }
            }
            catch
            {
                return new List<ISyncDataObject>();
            }
        }

        private SyncDataPackage GetVersion(Pharos.Logic.Entity.MemberIntegralSet item, int companyId, string storeId, EFDbContext db)
        {
            var package = new SyncDataPackage() { SyncItemId = item.SyncItemId, EntityType = "MemberIntegralSetPackage" };
            package.Items.Add(new SyncDataPackageItem() { SyncItemId = item.SyncItemId, EntityType = typeof(MemberIntegralSet).ToString(), SyncItemVersion = item.SyncItemVersion });

            var memberIntegralSets = db.MemberIntegralSets.Where(o => o.CompanyId == companyId).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(MemberIntegralSet).ToString()
            }).ToList();
            package.Items.AddRange(memberIntegralSets);
            var memberIntegralSetLists = db.MemberIntegralSetLists.Where(o => o.IntegralId == item.Id).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(MemberIntegralSetList).ToString()
            }).ToList();
            package.Items.AddRange(memberIntegralSetLists);
            return package;
        }

        public ISyncDataObject GetItem(Guid guid, int companyId, string storeId)
        {
            using (var db = SyncDbContextFactory.Factory<EFDbContext>())
            {
                var memIntSets = db.MemberIntegralSets.Where(o => o.SyncItemId == guid).ToList();
                var memIntSet = memIntSets.FirstOrDefault();
                var memIntSetLists = db.MemberIntegralSetLists.Where(o => o.IntegralId == memIntSet.Id).ToList();
                var package = new Package() { SyncItemId = guid, EntityType = "MemberIntegralSetPackage" };
                package.Init(memIntSets.Select(o => new MemberIntegralSet().InitEntity(o)).ToList());
                package.Init(memIntSetLists.Select(o => new MemberIntegralSetList().InitEntity(o)).ToList());
                return package;
            }
        }

        public byte[] CreateItem(ISyncDataObject data, Guid guid, int companyId, string storeId)
        {
            throw new SyncException("消费积分设定不允许修改远程数据");
        }

        public byte[] UpdateItem(Guid guid, ISyncDataObject mergedData, int companyId, string storeId)
        {
            throw new SyncException("消费积分设定不允许修改远程数据");
        }

        public void DeleteItem(Guid syncItemId, int companyId, string storeId)
        {
            throw new SyncException("消费积分设定不允许删除远程数据");
        }




        public ISyncDataObject Merge(ISyncDataObject syncDataObject1, ISyncDataObject syncDataObject2, int companyId, string storeId)
        {
            throw new NotImplementedException();
        }
    }
}
