using Pharos.POS.Retailing.ChildWin;
using Pharos.POS.Retailing.Models.ApiParams;
using Pharos.POS.Retailing.Models.ApiReturnResults;
using Pharos.POS.Retailing.Models.PosModels;
using Pharos.Wpf.ViewModelHelpers;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;
using Pharos.POS.Retailing.Devices.POSDevices;
using System.Threading.Tasks;
using System.Threading;
using Pharos.POS.Retailing.Devices.StoredValueCardDevice;
using System.IO;

namespace Pharos.POS.Retailing.Models.ViewModels.Pay
{
    public class MultiPayViewModel : BaseViewModel
    {
        bool isWipeZero = Global.MachineSettings.MachineInformations.IsNonCashWipeZero;
        public MultiPayViewModel(decimal _amount, PayAction _payAction, int reason = 0)
        {
            Amount = _amount;
            PayAction = _payAction;
            Reason = reason;
            if (isWipeZero)
            {
                WipeZeroAfter = Math.Round(_amount, 1, MidpointRounding.AwayFromZero);
            }
            else
            {
                WipeZeroAfter = _amount;
            }
            WipeZero = WipeZeroAfter - _amount;//摸零金额
            StillOwe = WipeZeroAfter;
        }

        private MultiPayItemViewModel _CurrentPayItem;
        public MultiPayItemViewModel CurrentPayItem
        {
            get { return _CurrentPayItem; }
            set
            {
                _CurrentPayItem = value;
                this.OnPropertyChanged(o => o.CurrentPayItem);
            }
        }
        private decimal wipeZeroAfter;
        /// <summary>
        /// 抹零后金额
        /// </summary>
        public decimal WipeZeroAfter
        {
            get { return wipeZeroAfter; }
            set
            {
                wipeZeroAfter = value;
                this.OnPropertyChanged(o => o.WipeZeroAfter);
            }
        }
        private decimal wipeZero;

        /// <summary>
        /// 抹零金额
        /// </summary>
        public decimal WipeZero
        {
            get { return wipeZero; }
            set { wipeZero = value; this.OnPropertyChanged(o => o.WipeZero); }
        }
        int Reason { get; set; }

        private PayAction payAction;
        /// <summary>
        /// 付款类型
        /// </summary>
        public PayAction PayAction
        {
            get { return payAction; }
            set { payAction = value; }
        }

        private decimal amount;
        /// <summary>
        /// 摸零前应收金额
        /// </summary>
        public decimal Amount
        {
            get { return amount; }
            set { amount = value; this.OnPropertyChanged(o => o.Amount); }
        }
        /// <summary>
        /// 尚欠
        /// </summary>
        private decimal stillOwe = 0m;

        public decimal StillOwe
        {
            get { return stillOwe; }
            set { stillOwe = value; this.OnPropertyChanged(o => o.StillOwe); }
        }
        /// <summary>
        /// 找零
        /// </summary>
        private decimal change = 0m;

        public decimal Change
        {
            get { return change; }
            set { change = value; this.OnPropertyChanged(o => o.Change); }
        }
        private decimal _Received;
        /// <summary>
        /// 实收金额
        /// </summary>
        public decimal Received
        {
            get { return _Received; }
            set { _Received = value; this.OnPropertyChanged(o => o.Received); }
        }
        public ObservableCollection<MultiPayItemViewModel> PayItems { get; set; }

        public bool isComplate = false;
        /// <summary>
        /// 完成支付
        /// </summary>
        public ICommand ConfirmCommand
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    if (StillOwe != 0)
                    {
                        Toast.ShowMessage("尚欠金额，请选择支付方式完成支付！", CurrentWindow);
                        return;
                    }
                    if (wipeZeroAfter != Received && wipeZeroAfter < 0)
                    {
                        Toast.ShowMessage("退还金额不正确！", CurrentWindow);
                        return;
                    }
                    if (wipeZeroAfter > Received && wipeZeroAfter >= 0)
                    {
                        Toast.ShowMessage("收款金额不可小于应收金额！", CurrentWindow);
                        return;
                    }
                    if (CurrentPayItem != null && CurrentPayItem.HasOperat)
                    {
                        Toast.ShowMessage(CurrentPayItem.RequestOperatMessage, CurrentWindow);
                        return;
                    }
                    Confirm.ShowMessage(string.Format("请确认是否完成{0}？", Amount > 0 ? "收款" : "退款"), Application.Current.MainWindow, (mode) =>
                    {
                        if (mode == ConfirmMode.Cancelled) return;
                        MachineInformations _machineInfo = Global.MachineSettings.MachineInformations;
                        //判读是否有用该支付方式支付
                        List<PayWay> payWay = new List<PayWay>();
                        foreach (var item in PayItems)
                        {
                            if (item.PayItem == null) continue;
                            PayWay _payWay = new PayWay()
                            {
                                Amount = item.Amount,
                                Change = 0m,
                                Receive = item.Amount,
                                Type = item.PayItem.Mode,
                                WipeZero = 0m,
                                CardNo = item.CardNo
                            };
                            if (item.PayItem.Mode == PayMode.CashPay)
                            {
                                _payWay.WipeZero = WipeZero;
                                _payWay.Change = Change;
                            }
                            payWay.Add(_payWay);
                        }
                        ApiPayParams _params = new ApiPayParams()
                        {
                            StoreId = _machineInfo.StoreId,
                            MachineSn = _machineInfo.MachineSn,
                            CID = _machineInfo.CompanyId,
                            Mode = PayAction,
                            Receivable = WipeZeroAfter,
                            Payway = payWay,
                            OrderAmount = Amount,
                            Reason = 0,
                            OldOrderSn = (PayAction == PayAction.RefundAll ? RefundChangeViewModel.Current.RefundOrder.PaySn : "")
                        };
                        var result = ApiManager.Post<ApiPayParams, ApiRetrunResult<object>>(@"api/Pay", _params);
                        if (result.Code == "200")
                        {
                            isComplate = true;
                            //返回成功则打开微信支付界面
                            ZhiFuWanCheng page = new ZhiFuWanCheng(WipeZeroAfter, Received, Change, (payWay.Count == 1 ? PayItems.FirstOrDefault(o => o.PayItem != null).PayName : "多方付"), PayAction, (DateTime)result.Result);//支付方式参数
                            page.Owner = Application.Current.MainWindow;
                            CurrentWindow.Close();
                            page.ShowDialog();
                        }
                        else
                        {
                            Toast.ShowMessage(result.Message, CurrentWindow);
                        }
                    });
                });

            }
        }
    }
    public class MultiPayItemViewModel : BaseViewModel, Pharos.POS.Retailing.XamlConverters.IMultiPayViewModel
    {

        public bool IsLast { get; set; }
        public bool IsFrist { get; set; }
        public bool IsSelected { get; set; }
        public decimal Amount { get; set; }
        public string PayName { get; set; }
        PayItem _PayItem;
        public PayItem PayItem
        {
            get { return _PayItem; }
            set
            {
                _PayItem = value;
                EnableClose = true;
                if (_PayItem == null)
                {
                    RequestOperatMessage = string.Empty;
                    HasOperat = false;
                }
                else
                {
                    switch (_PayItem.Mode)
                    {
                        case PayMode.StoredValueCard:
                            RequestOperatMessage = "请刷储值卡或者输入储值卡号！";
                            HasOperat = true;
                            break;
                        case PayMode.UnionPayCTPOSM:
                            RequestOperatMessage = "请刷银联卡进行支付！";
                            HasOperat = false;
                            break;
                        default:
                            HasOperat = false;
                            RequestOperatMessage = string.Empty;
                            break;
                    }
                }
            }
        }
        string _CardNo;
        public string CardNo
        {
            get { return _CardNo; }
            set
            {
                if (value == null)
                    value = "";
                _CardNo = value.Trim();
                this.OnPropertyChanged(o => o.CardNo);
            }
        }
        string _CardName;
        public string CardName
        {
            get { return _CardName; }
            set
            {
                _CardName = value;
                this.OnPropertyChanged(o => o.CardName);
            }
        }
        string _Message;
        public string Message
        {
            get { return _Message; }
            set
            {
                _Message = value;
                this.OnPropertyChanged(o => o.Message);
            }
        }

        public void Cannel()
        {
            switch (PayItem.Mode)
            {
                case PayMode.UnionPayCTPOSM:
                    {
                        NewLandPOSDevice.CloseComm();
                    }
                    break;
            }
        }
        CancellationToken token;
        CancellationTokenSource source = null;
        public void DoPay()
        {
            switch (PayItem.Mode)
            {
                case PayMode.StoredValueCard:
                    {

                        Task.Factory.StartNew(() =>
                       {
                           bool isSuccess;
                           var password = string.Empty;
                           if (string.IsNullOrEmpty(CardNo))//将来设备完整后要去掉
                           {

                               if (source != null)
                               {
                                   source.Cancel();
                                   Thread.Sleep(200);
                               }

                               source = new CancellationTokenSource();
                               token = source.Token;
                               Application.Current.Dispatcher.Invoke(new Action(() =>
                               {
                                   Message = "请操作读卡设备进行收款！【如果设备未响应，请检查设备连接并按“F5”重试】";
                                   IsSuccess = null;
                                   IsRunning = true;
                               }));

                               var device = StoredValueCardDeviceFactory.Create();
                               StoreValueCardInfomactions info;
                               string msg;
                               isSuccess = device.ReadCard(token, out info, out msg);
                               source = null;
                               Application.Current.Dispatcher.Invoke(new Action(() =>
                               {
                                   IsSuccess = isSuccess;
                                   if (!isSuccess)
                                   {
                                       Message = msg + "【按F5重新发起支付】";
                                   }
                                   else
                                   {
                                       Message = msg + "正在等待后台回应！";
                                   }
                                   if (info != null)
                                   {
                                       CardNo = info.CardNo;
                                       password = info.Password;
                                   }
                                   else
                                   {
                                       CardNo = string.Empty;
                                       password = string.Empty;
                                   }
                                   IsRunning = false;
                               }));
                           }
                           else
                           {
                               isSuccess = true;
                           }
                           if (isSuccess)
                           {
                               Application.Current.Dispatcher.Invoke(new Action(() =>
                                   {
                                       MachineInformations _machineInfo = Global.MachineSettings.MachineInformations;
                                       BackgroundPaymentParams _params = new BackgroundPaymentParams()
                                       {
                                           StoreId = _machineInfo.StoreId,
                                           MachineSn = _machineInfo.MachineSn,
                                           CID = _machineInfo.CompanyId,
                                           Amount = Amount,
                                           CardNo = _CardNo,
                                           CardPassword = password,
                                           Mode = PayMode.StoredValueCard
                                       };
                                       var result = ApiManager.Post<BackgroundPaymentParams, ApiRetrunResult<StoredValueCardInfo, StoredValueCardInfo>>(@"api/BackgroundPayment", _params);
                                       if (result.Code == "200")
                                       {
                                           HasOperat = false;
                                           Balance = result.Result.Balance;
                                           User = result.Result.User;
                                           PayAmount = result.Result.PayAmount;
                                           this.OnPropertyChanged(o => o.HasOperat);
                                           this.OnPropertyChanged(o => o.Balance);
                                           this.OnPropertyChanged(o => o.PayAmount);
                                           this.OnPropertyChanged(o => o.User);
                                           EnableClose = false;
                                           Message = string.Format("成功支付{0:N}元！", Amount);
                                       }
                                       else
                                       {
                                           if (result.ErrorInfo != null)
                                           {
                                               Balance = result.ErrorInfo.Balance;
                                               User = result.ErrorInfo.User;
                                               PayAmount = result.ErrorInfo.PayAmount;
                                               this.OnPropertyChanged(o => o.Balance);
                                               this.OnPropertyChanged(o => o.PayAmount);
                                               this.OnPropertyChanged(o => o.User);
                                           }
                                           IsSuccess = false;
                                           Message = result.Message + "【按F5重新发起支付】";
                                       }
                                   }));
                           }
                       });
                    }
                    break;
                case PayMode.UnionPayCTPOSM:
                    {


                        Task.Factory.StartNew(() =>
                        {
                            if (source != null)
                            {
                                source.Cancel();
                                Thread.Sleep(1000);
                            }
                            source = new CancellationTokenSource();
                            token = source.Token;
                            Application.Current.Dispatcher.Invoke(new Action(() =>
                              {
                                  Message = "请操作POS银联机进行收款！【如果设备未响应，请检查设备连接并按“F5”重试】";
                                  IsSuccess = null;
                                  IsRunning = true;
                              }));
                            var posDevice = POSDeviceFactory.Create();
                            string msg;
                            string cardNo = null;
                            string cardName = null;
                            var request = new POSDevicePayRequest()
                            {
                                Amount = Amount,
                                CashierId = PosViewModel.Current.UserCode,
                                OldTransactionCode = "",
                                OrderSn = PosViewModel.Current.OrderSn,
                                Type = Amount >= 0 ? TransactionType.Consumption : TransactionType.Refund
                            };
                            POSDevicePayResponse response;
                            var isSuccess = posDevice.DoPay(token, request, out response, out msg);
                            source = null;
                            Application.Current.Dispatcher.Invoke(new Action(() =>
                               {
                                   IsSuccess = isSuccess;
                                   EnableClose = !isSuccess;
                                   if (!isSuccess)
                                   {
                                       msg += "【按F5重新发起支付】";
                                   }
                                   else
                                   {
                                       HasOperat = false;
                                   }
                                   Message = msg;
                                   CardNo = cardNo;
                                   CardName = CardName;
                                   IsRunning = false;
                               }));
                        });
                    }
                    break;
            }
        }

        public bool IsRunning { get; set; }
        public decimal Balance { get; set; }
        public string User { get; set; }
        public decimal PayAmount { get; set; }



        public bool HasOperat { get; set; }
        private bool? _IsSuccess = false;
        public bool? IsSuccess
        {
            get
            {
                return _IsSuccess;
            }
            set
            {
                _IsSuccess = value;
                this.OnPropertyChanged(o => o.IsSuccess);
            }
        }
        public string RequestOperatMessage { get; set; }
        private bool _EnableClose = true;
        public bool EnableClose
        {
            get
            {
                return _EnableClose;
            }
            set
            {
                _EnableClose = value;
                this.OnPropertyChanged(o => o.EnableClose);
            }
        }
    }

    public class StoredValueCardInfo
    {
        public decimal Balance { get; set; }
        public string User { get; set; }
        public decimal PayAmount { get; set; }
    }
}
