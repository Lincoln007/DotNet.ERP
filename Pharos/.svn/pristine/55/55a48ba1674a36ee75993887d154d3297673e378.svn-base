using Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity;
//using Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.Maps;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Data.SqlServerCe;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.DAL
{
    public class LocalCeDbContext : DbContext
    {
        static LocalCeDbContext()
        {
            //不重建数据库结构
            //Database.SetInitializer<LocalCeDbContext>(new DropCreateDatabaseAlways<LocalCeDbContext>());
            Database.SetInitializer<LocalCeDbContext>(null);
            SqlCeEngine engine = new SqlCeEngine(System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString);
            
            if (false == engine.Verify())
            {
                engine.Repair(null, RepairOption.RecoverAllOrFail);
            }
        }
        public LocalCeDbContext()
            : base(System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString)
        {
            ///Leo: disable the Lazy Loading the WCF will not be able to serilize the entities.
            //是否启用延迟加载:  
            //  true:   延迟加载（Lazy Loading）：获取实体时不会加载其导航属性，一旦用到导航属性就会自动加载  
            //  false:  直接加载（Eager loading）：通过 Include 之类的方法显示加载导航属性，获取实体时会即时加载通过 Include 指定的导航属性  
            this.Configuration.LazyLoadingEnabled = false;
            this.Configuration.ProxyCreationEnabled = false;
            //UseLegacyPreserveChangesBehavior
            //确定是否使用旧的行为， true 使用，false 不使用；
            this.Configuration.AutoDetectChangesEnabled = true;  //自动监测变化，默认值为 true 
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            ///移除EF映射默认给表名添加“s“或者“es”
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();

            modelBuilder.Entity<SaleOrders>().Property(t => t.TotalAmount).HasPrecision(18, 12);
            modelBuilder.Entity<SaleOrders>().Property(t => t.Receive).HasPrecision(18, 12);
            modelBuilder.Entity<SaleOrders>().Property(t => t.PreferentialPrice).HasPrecision(18, 12);

            modelBuilder.Entity<SaleDetail>().Property(t => t.PurchaseNumber).HasPrecision(18, 12);
            modelBuilder.Entity<SaleDetail>().Property(t => t.BuyPrice).HasPrecision(18, 12);
            modelBuilder.Entity<SaleDetail>().Property(t => t.SysPrice).HasPrecision(18, 12);

            modelBuilder.Entity<SaleDetail>().Property(t => t.ActualPrice).HasPrecision(18, 12);
            modelBuilder.Entity<SaleDetail>().Property(t => t.AveragePrice).HasPrecision(18, 12);
            modelBuilder.Entity<SaleDetail>().Property(t => t.Total).HasPrecision(18, 12);

            modelBuilder.Entity<WipeZero>().Property(t => t.Number).HasPrecision(18, 12);
            modelBuilder.Entity<ProductRecord>().Property(t => t.Inventory).HasPrecision(18, 12);

            modelBuilder.Entity<CommodityPromotion>().HasMany(o => o.CommodityDiscounts).WithOptional().HasForeignKey(o => o.CommodityId);
            modelBuilder.Entity<CommodityPromotion>().HasMany(o => o.Bundlings).WithOptional().HasForeignKey(o => o.CommodityId);
            modelBuilder.Entity<CommodityPromotion>().HasMany(o => o.BundlingDetails).WithOptional().HasForeignKey(o => o.CommodityId);
            modelBuilder.Entity<CommodityPromotion>().HasMany(o => o.Blends).WithOptional().HasForeignKey(o => o.CommodityId);
            modelBuilder.Entity<CommodityPromotion>().HasMany(o => o.BlendDetails).WithOptional().HasForeignKey(o => o.CommodityId);
            modelBuilder.Entity<CommodityPromotion>().HasMany(o => o.FreeGiftPurchases).WithOptional().HasForeignKey(o => o.CommodityId);
            modelBuilder.Entity<SaleOrders>().HasKey(o => o.PaySN);
            modelBuilder.Entity<SaleOrders>().HasMany(o => o.ConsumptionPayments).WithOptional().HasForeignKey(o => o.PaySN);
            modelBuilder.Entity<SaleOrders>().HasMany(o => o.WipeZeros).WithOptional().HasForeignKey(o => o.PaySN);
            modelBuilder.Entity<SaleOrders>().HasMany(o => o.SaleDetails).WithOptional().HasForeignKey(o => o.PaySN);
            modelBuilder.Entity<MemberIntegralSet>().HasMany(o => o.ProductList).WithOptional().HasForeignKey(o => o.IntegralId);

            base.OnModelCreating(modelBuilder);
        }

        public DbSet<ApiLibrary> ApiLibrarys { get; set; }
        public DbSet<Bundling> Bundlings { get; set; }
        public DbSet<BundlingList> BundlingLists { get; set; }
        public DbSet<CommodityDiscount> CommodityDiscounts { get; set; }
        public DbSet<CommodityPromotion> CommodityPromotions { get; set; }
        public DbSet<ConsumptionPayment> ConsumptionPayments { get; set; }
        public DbSet<ProductGroup> ProductGroups { get; set; }

        public DbSet<DeviceRegInfo> DeviceRegInfos { get; set; }
        public DbSet<FreeGiftPurchaseList> FreeGiftPurchaseLists { get; set; }

        public DbSet<FreeGiftPurchase> FreeGiftPurchases { get; set; }

        public DbSet<MemberIntegral> MemberIntegrals { get; set; }

        public DbSet<Members> Members { get; set; }
        public DbSet<MembershipCard> MembershipCards { get; set; }

        public DbSet<Notice> Notices { get; set; }

        public DbSet<PosIncomePayout> PosIncomePayouts { get; set; }

        public DbSet<ProductRecord> ProductRecords { get; set; }

        public DbSet<PromotionBlendList> PromotionBlendLists { get; set; }

        public DbSet<PromotionBlend> PromotionBlends { get; set; }

        public DbSet<SaleDetail> SaleDetails { get; set; }

        public DbSet<SaleOrders> SaleOrders { get; set; }

        public DbSet<SalesRecord> SalesRecords { get; set; }

        public DbSet<SysDataDictionary> SysDataDictionarys { get; set; }

        public DbSet<SysStoreUserInfo> SysStoreUserInfos { get; set; }

        public DbSet<WipeZero> WipeZeros { get; set; }

        public DbSet<ProductCategory> ProductCategorys { get; set; }

        public DbSet<MemberIntegralSet> MemberIntegralSets { get; set; }
        public DbSet<MemberIntegralSetList> MemberIntegralSetLists { get; set; }
    }
}
