using Pharos.Logic.ApiData.Pos.Sale.Members;
using Pharos.Logic.ApiData.Pos.Services.ServerServices;
using Pharos.Logic.ApiData.Pos.ValueObject;
using Pharos.Logic.BLL;
using Pharos.Logic.DAL;
using Pharos.Logic.Entity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.Services
{
    public class MembersService : BaseGeneralService<Pharos.Logic.Entity.Members, EFDbContext>
    {
        public static MemberInfo GetMemberInfo(string storeId, int companyId, string phone, string uid, string cardNo)
        {
            var memberInfo = new MemberInfo();
            var member = new Members();
            if (!string.IsNullOrEmpty(phone))
            {
                member = CurrentRepository.Find(o => o.MobilePhone == phone && o.CompanyId == companyId);
            }
            else if (!string.IsNullOrEmpty(cardNo))
            {
                var carno = Pharos.Logic.ApiData.Pos.Services.ServerServices.MembershipCardService.CurrentRepository.Find(o => o.CardSN == cardNo && o.CompanyId == companyId);
                if (carno == null)
                {
                    goto NOTFOUND;
                }
                member = CurrentRepository.Find(o => o.CompanyId == companyId && o.MemberId == carno.MemberId);
            }
            else if (!string.IsNullOrEmpty(uid))
            {
                member = CurrentRepository.Find(o => o.CompanyId == companyId && o.MemberId == uid);
            }
            if (string.IsNullOrEmpty(cardNo))
            {
                var card = Pharos.Logic.ApiData.Pos.Services.ServerServices.MembershipCardService.CurrentRepository.Find(o => o.MemberId == member.MemberId && o.CompanyId == companyId);
                if (card != null)
                    cardNo = card.CardSN;
            }
            if (member != null)
            {
                memberInfo.MemberId = member.MemberNo;
                memberInfo.Type = member.Insider ? ObjectModels.DTOs.CustomerType.Insider : ObjectModels.DTOs.CustomerType.VIP;
                memberInfo.MobilePhone = member.MobilePhone;
                memberInfo.RealName = member.RealName;
                memberInfo.MemberCardNum = cardNo;
                memberInfo.UsableIntegral = member.UsableIntegral;
                if (!string.IsNullOrEmpty(member.Birthday))
                {
                    var birthday = DateTime.Parse(member.Birthday);
                    memberInfo.Birthday = birthday;
                }
                memberInfo.Email = member.Email;
                memberInfo.Sex = member.Sex;
                memberInfo.WeiXin = member.Weixin;
                memberInfo.ZhiFuBao = member.Zhifubao;
                var province = AreaService.CurrentRepository.Entities.FirstOrDefault(o => o.AreaID == member.CurrentProvinceId);
                var city = AreaService.CurrentRepository.Entities.FirstOrDefault(o => o.AreaID == member.CurrentCityId);
                var county = AreaService.CurrentRepository.Entities.FirstOrDefault(o => o.AreaID == member.CurrentCountyId);
                memberInfo.Address = "";
                if (province != null && !string.IsNullOrEmpty(province.Title))
                {
                    memberInfo.Address += province.Title;
                }
                if (city != null && !string.IsNullOrEmpty(city.Title))
                {
                    memberInfo.Address += city.Title;
                }
                if (county != null && !string.IsNullOrEmpty(county.Title))
                {
                    memberInfo.Address += county.Title;
                }
                memberInfo.Address += member.Address;
                return memberInfo;
            }
        NOTFOUND:
            throw new Pos.Exceptions.PosException("未找到会员信息！");
        }
    }
}
