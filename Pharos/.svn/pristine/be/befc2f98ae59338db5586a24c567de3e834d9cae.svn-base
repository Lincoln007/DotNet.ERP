using Pharos.Logic.ApiData.Pos.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.ApiData.Pos.Cache;
using Pharos.Logic.ApiData.Pos.Common;

namespace Pharos.Logic.ApiData.Pos.DataAdapter
{
    class MemoryCacheDataAdapter : IDataAdapter
    {
        public string StoreId { get; set; }

        public string MachineSN { get; set; }

        public int CompanyToken { get; set; }

        public bool Enable
        {
            get { return true; }
        }
        /// <summary>
        /// 根据条码查找商品信息
        /// </summary>
        /// <param name="barcode"></param>
        /// <returns></returns>
        public ValueObject.ProductInfo GetProductInfoByBarcode(string barcode)
        {
            var result = default(ValueObject.ProductInfo);
            //先从内存中查找数据
            string key = KeyFactory.ProductKeyFactory(CompanyToken, StoreId, barcode);
            result = DataAdapterFactory.ProductCache.Get(key);
            if (result != null)
            {
                //缓存中存在该数据，直接返回
                return result;
            }
            else
            {
                //缓存中不存在符合条件的数据从数据库中查找
                var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
                result = dataAdapter.GetProductInfoByBarcode(barcode);
                //加到缓存中
                if (result != null)
                    DataAdapterFactory.ProductCache.Set(key, result);
                return result;
            }
        }
        /// <summary>
        /// 根据productCode查找商品信息
        /// </summary>
        /// <param name="productCode"></param>
        /// <returns></returns>
        public ValueObject.ProductInfo GetProductInfoByProductCode(string productCode)
        {
            var result = default(ValueObject.ProductInfo);
            //先从内存中查找数据
            string key = KeyFactory.ProductKeyFactory(CompanyToken, StoreId, productCode);
            result = DataAdapterFactory.ProductCache.Get(key);
            if (result != null)
            {
                //缓存中存在该数据，直接返回
                return result;
            }
            else
            {
                //缓存中不存在符合条件的数据从数据库中查找
                var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);

                result = dataAdapter.GetProductInfoByProductCode(productCode);
                //加到缓存中
                if (result != null)
                    DataAdapterFactory.ProductCache.Set(key, result);
                return result;
            }
        }

        public ValueObject.ProductInfo GetProductInfoFromBundlingByBarcode(string barcode)
        {
            var result = default(ValueObject.ProductInfo);
            //先从内存中查找数据
            string key = KeyFactory.ProductKeyFactory(CompanyToken, StoreId, barcode);
            result = DataAdapterFactory.ProductCache.Get(key);
            if (result != null)
            {
                //缓存中存在该数据，直接返回
                return result;
            }
            else
            {
                //缓存中不存在符合条件的数据从数据库中查找
                var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);

                result = dataAdapter.GetProductInfoFromBundlingByBarcode(barcode);
                //加到缓存中
                if (result != null)
                    DataAdapterFactory.ProductCache.Set(key, result);
                return result;
            }
        }

        public ValueObject.UserInfo GetUser(string account)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetUser(account);
        }

        public IEnumerable<ValueObject.UserInfo> GetStoreManagers(User.StoreOperateAuth storeOperateAuth)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetStoreManagers(storeOperateAuth);
        }

        public ValueObject.PageResult<ValueObject.InventoryResult> CheckedInventory(IEnumerable<int> categorySns, string keyword, int pageSize, int pageIndex)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.CheckedInventory(categorySns, keyword, pageSize, pageIndex);
        }

        public ValueObject.PageResult<ValueObject.InventoryResult> CheckedPrice(IEnumerable<int> categorySns, decimal from, decimal to, int pageSize, int pageIndex)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.CheckedPrice(categorySns, from, to, pageSize, pageIndex);
        }

        public ValueObject.MemberInfo GetMemberInfo(string phone, string cardNo, string uid)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetMemberInfo(phone, cardNo, uid);
        }

        public IEnumerable<ValueObject.CategoryDAO> GetStoreCategory()
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetStoreCategory();
        }

        public void PosIncomePayout(string uid, decimal money, User.PosIncomePayoutMode mode)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.PosIncomePayout(uid, money, mode);
        }

        public ValueObject.BillHistoryInfo GetBillDetailsHistory(string paySn)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetBillDetailsHistory(paySn);
        }

        public IEnumerable<ValueObject.ReasonItem> GetReason(int mode)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetReason(mode);
        }

        public void Refund(List<ValueObject.ChangeRefundItem> refundList, int reason, string paySn, decimal amount, string uid)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.Refund(refundList, reason, paySn, amount, uid);
        }

        public void RefundAll(int reason, string paySn, decimal amount, string uid)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.RefundAll(reason, paySn, amount, uid);
        }

        public void ChangeOrRefund(Sale.AfterSale.OrderChangeRefundSale changeList, int reason, MachineInformation machineInformation, string newPaySn, decimal amount, string uid, string apiCodes)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.ChangeOrRefund(changeList, reason, machineInformation, newPaySn, amount, uid, apiCodes);
        }

        public void RecordPayment(string RecordPayment, decimal amount, int apiCode, string apiOrderSN = null, string cardNo = null)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.RecordPayment(RecordPayment, amount, apiCode, apiOrderSN, cardNo);
        }

        public Logic.Entity.ApiLibrary GetApiSettings(int apiCode)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetApiSettings(apiCode);
        }

        public IEnumerable<ValueObject.BillListItem> GetBills(DateTime date)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetBills(date);
        }

        public void RegisterDevice(string deviceSn, ValueObject.DeviceType type)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.RegisterDevice(deviceSn, type);
        }

        public bool HasRegister(string deviceSn, ValueObject.DeviceType type)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.HasRegister(deviceSn, type);
        }

        public IEnumerable<ValueObject.Announcement> Announcements()
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.Announcements();
        }

        public IEnumerable<KeyValuePair<Sale.Marketings.MarketingTimelinessLimit, Sale.Marketings.MarketingRule>> GetMarketingRules()
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetMarketingRules();
        }

        public decimal GetMarketingRecordNumber(string marketingId, Sale.Marketings.MarketingQuotaMode mode)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetMarketingRecordNumber(marketingId, mode);
        }

        public void SaveMarketingRecord(string marketingId, decimal number)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.SaveMarketingRecord(marketingId, number);
        }

        public void SaveOrder(Sale.ShoppingCart shoppingCart, string apiCodes)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.SaveOrder(shoppingCart, apiCodes);
        }

        public ValueObject.DayReportResult DayMonthReport(DateTime from, DateTime to, Sale.Range range)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.DayMonthReport(from, to, range);
        }

        public IEnumerable<ValueObject.WarehouseInformations> GetWarehouseInformations()
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.GetWarehouseInformations();
        }

        public IEnumerable<ValueObject.Activity> Activities()
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            return dataAdapter.Activities();
        }


        public void AddWipeZero(int companyId, string paySn, decimal money)
        {
            var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, StoreId, MachineSN, CompanyToken);
            dataAdapter.AddWipeZero(companyId, paySn, money);
        }
    }
}
