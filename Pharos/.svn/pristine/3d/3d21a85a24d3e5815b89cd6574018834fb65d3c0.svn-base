using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Pharos.Logic.BLL;
using Pharos.Logic.Entity;
using Pharos.Utility;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Pharos.Utility.Helpers;
using Pharos.Logic;

namespace Pharos.CRM.Retailing.Controllers
{
    public class MembersController : BaseController
    {
        #region 会员资料
        public ActionResult Index()
        {
            ViewBag.stores = ListToSelect(WarehouseService.GetList().Select(o => new SelectListItem() { Text = o.Title, Value = o.StoreId }), emptyTitle: "全部");
            ViewBag.levels = ListToSelect(MemberLevelService.GetList().Select(o => new SelectListItem() { Text = o.LevelTitle, Value = o.MemberLevelId }), emptyTitle: "全部");
            ViewBag.groups = ListToSelect(GroupingService.GetList().Select(o => new SelectListItem() { Text = o.Title, Value = o.GroupId }), emptyTitle: "请选择");
            return View();
        }
        [HttpPost]
        public ActionResult FindMemberPageList()
        {
            var count = 0;
            object footer = null;
            var list = MembersService.FindMemberPageList(Request.Params, ref count, ref footer);
            return ToDataGrid(list, count);
        }
        [HttpPost]
        public ActionResult SetValid(string id, short state)
        {
            var ids = id.Split(',').Select(o => o.ToType<int>()).ToList();
            var list = MembersService.FindList(o => ids.Contains(o.Id));
            list.Each(o => o.Status = (++state));
            var op = MembersService.Update(list);
            return new JsonNetResult(op);
        }
        public ActionResult CreateMember(int? id)
        {
            ViewBag.stores = ListToSelect(WarehouseService.GetList().Select(o => new SelectListItem() { Text = o.Title, Value = o.StoreId }), emptyTitle: "请选择");
            var obj = new Members();
            SelectListItem city = null;
            if (id.HasValue)
            {
                obj = MembersService.FindById(id.Value);
                if (obj.CurrentCityId > 0)
                {
                    var area = BaseService<Area>.FindById(obj.CurrentCityId);
                    if (area != null)
                    {
                        var parentArea = BaseService<Area>.FindById(area.AreaPID);
                        var text = area.Title;
                        if (parentArea != null && parentArea.Type != 1) text = parentArea.Title + "/" + text;
                        city = new SelectListItem();
                        city.Value = obj.CurrentCityId.ToString();
                        city.Text = text;
                    }
                }
            }
            ViewBag.city = city;
            ViewBag.levels = ListToSelect(MemberLevelService.GetList().Select(o => new SelectListItem() { Text = o.LevelTitle, Value = o.MemberLevelId }), emptyTitle: "请选择");
            ViewBag.groups = ListToSelect(GroupingService.GetList().Select(o => new SelectListItem() { Text = o.Title, Value = o.GroupId }), emptyTitle: "请选择");
            return View(obj);
        }
        [HttpPost]
        public ActionResult CreateMember(Members obj)
        {
            var re = new OpResult();
            string msg = "";
            if (!MembersService.CheckMsg(obj, ref msg))
                re.Message = msg;
            else if (obj.Id == 0)
            {
                obj.MemberId = CommonRules.GUID;
                obj.MemberNo = CommonRules.MemberNum(obj.StoreId);
                obj.CreateDT = DateTime.Now;
                obj.CreateUID = Sys.CurrentUser.UID;
                obj.CompanyId = CommonService.CompanyId;
                re = MembersService.Add(obj);
            }
            else
            {
                var member = MembersService.FindById(obj.Id);
                obj.ToCopyProperty(member, new List<string>() { "CompanyId", "CreateDT", "CreateUID", "MemberId", "MemberNum" });
                re = MembersService.Update(member);
            }
            #region 操作日志
            var _msg = Pharos.Sys.LogEngine.CompareModelToLog<Members>(Sys.LogModule.会员管理, obj);
            new Pharos.Sys.LogEngine().WriteInsert(_msg, Sys.LogModule.会员管理);
            #endregion
            if (re.Successed)
            {
                Pharos.Infrastructure.Data.Redis.RedisManager.Publish("SyncDatabase", new Pharos.ObjectModels.DTOs.DatabaseChanged() { CompanyId = CommonService.CompanyId, StoreId = obj.StoreId, Target = "Member" });
            }
            return Content(re.ToJson());
        }
        public ActionResult CreateMemberGroup()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CreateMemberGroup(string name)
        {
            var re = new OpResult();
            if (!GroupingService.IsExist(o => o.Title == name && o.CompanyId == CommonService.CompanyId))
            {
                re = GroupingService.Add(new Grouping()
                {
                    Channel = 1,
                    Title = name,
                    GroupId = CommonRules.GUID,
                    State = 1,
                    CompanyId = CommonService.CompanyId
                });
            }
            else
                re.Message = "该分组名称已存在";
            return Content(re.ToJson());
        }
        [HttpPost]
        public ActionResult MemberGroupListPartial()
        {
            var list = GroupingService.GetList().Select(o => o.Title);
            return PartialView(list);
        }
        [HttpPost]
        public ActionResult DeleteMemberGroup(string id)
        {
            var obj = GroupingService.Find(o => o.Title == id && o.CompanyId == CommonService.CompanyId);
            var re = new OpResult();
            if (MembersService.IsExist(o => o.MemberGroupId == obj.GroupId))
                re.Message = "存在会员关联不允许删除!";
            else
                re = GroupingService.Delete(obj);
            return new JsonNetResult(re);
        }
        [HttpPost]
        public ActionResult MoveType(string ids, string groupId)
        {
            var sids = ids.Split(',').Select(o => int.Parse(o));
            var list = MembersService.FindList(o => sids.Contains(o.Id));
            list.Each(o => { o.MemberGroupId = groupId; });
            return new JsonNetResult(MembersService.Update(list));
        }
        [HttpPost]
        public ActionResult GetMemberGroupList()
        {
            var list = GroupingService.GetList();
            var json = list.Select(o => new DropdownItem(o.GroupId, o.Title)).ToList();
            json.Insert(0, new DropdownItem("", "将所选项移到指定分类"));
            return Content(json.ToJson());
        }
        #endregion
        #region 会员充值
        MemberRechargeBLL _memberRechargeBll = new MemberRechargeBLL();
        public ActionResult RechargeIndex()
        {
            return View();
        }
        /// <summary>
        /// get datagrid datas by where 
        /// </summary>
        /// <param name="beginDate"></param>
        /// <param name="endDate"></param>
        /// <param name="keyWold"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FindRechargePageList(DateTime? beginDate, DateTime? endDate, string keyWold)
        {
            int count = 0;
            var result = _memberRechargeBll.FindRechargePageList(beginDate, endDate, keyWold, out count);
            return ToDataGrid(result, count);
        }
        [HttpGet]
        public ActionResult CreateRecharge()
        {
            return View();
        }
        /// <summary>
        /// add a new memberrecharge entity
        /// </summary>
        /// <param name="_memberRecharge"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CreateRecharge(MemberRecharge _memberRecharge, int StageNumber, int stageAvg, string ReturnDT, string ruleId, short giftProject)
        {
            var result = _memberRechargeBll.CreateRecharge(_memberRecharge, StageNumber, stageAvg, ReturnDT, ruleId, giftProject);
            return Content(result.ToJson());
        }
        #endregion
        #region 会员卡
        private readonly MembershipCardBLL _membershipCardBLL = new MembershipCardBLL();

        public ActionResult MemberCardIndex()
        {
            var cardtype = _cardInfoBLL.GetAllMemberCardType().Select(o => new SelectListItem() { Text = o.CardName, Value = o.CardTypeId });
            ViewBag.CardType = ListToSelect(cardtype, emptyTitle: "全部");
            ViewBag.cardTypeToDropDown = cardtype.ToJson();
            return View();
        }
        [HttpPost]
        public ActionResult FindMemberCardPageList(int? type, short? state, int beOverdue, DateTime? dueTimeStart, DateTime? dueTimeEnd, string keyWord)
        {
            var count = 0;
            var result = _membershipCardBLL.FindMembershipCardPageList(type, state, beOverdue, dueTimeStart, dueTimeEnd, keyWord, out count);
            return ToDataGrid(result, count);
        }
        [HttpGet]
        public ActionResult DispatchMemberCard(int? id)
        {
            MembershipCard _memberCard = new MembershipCard();
            if (id != null && id != 0)
            {
                _memberCard = _membershipCardBLL.FindMembershipCardById((int)id);
            }
            return View(_memberCard);
        }
        /// <summary>
        /// 发卡，绑定卡与人
        /// </summary>
        /// <param name="_membershipCard"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult DispatchMemberCard(MembershipCard _membershipCard)
        {
            var result = _membershipCardBLL.CreateOrUpdateMembershipCard(_membershipCard);
            return Content(result.ToJson());
        }
        public ActionResult UpdateCardState(short state, string ids)
        {
            var result = _membershipCardBLL.UpdateMemberCardState(state, ids);
            return Content(result.ToJson());
        }

        public ActionResult UpdateCardType(string type, string ids)
        {
            var result = _membershipCardBLL.UpdateCardType(type, ids);
            return Content(result.ToJson());
        }

        public ActionResult GetMembersBySearch(string param)
        {
            var result = MembersService.GetMembersBySearch(param);
            return Content(result.ToJson());
        }

        public ActionResult GetMembersCardByCardSn(string cardSN)
        {
            var result = _membershipCardBLL.GetMembersCardByCardSn(cardSN);
            return Content(result.ToJson());
        }
        public ActionResult GetMemberCardByContainsParam(string param)
        {
            var result = _membershipCardBLL.GetMemberCardByContainsParam(param);
            return Content(result.ToJson());
        }

        #endregion
        #region 制作会员卡
        MakingMembershipCardBLL _makeMembershipCardBLL = new MakingMembershipCardBLL();
        public ActionResult CreateCardIndex()
        {
            //类型
            ViewBag.cardType = ListToSelect(_cardInfoBLL.GetAllMemberCardType().Select(o => new SelectListItem() { Text = o.CardName, Value = o.CardTypeId }), emptyTitle: "全部");
            //批次
            ViewBag.batchs = ListToSelect(_makeMembershipCardBLL.GetBatchsToDropDown().Select(o => new SelectListItem() { Text = o.BatchSN, Value = o.BatchSN }), emptyTitle: "全部");
            //创建人
            ViewBag.users = ListToSelect(_makeMembershipCardBLL.GetCreateUserToDropDown().Select(o => new SelectListItem() { Text = o.FullName, Value = o.UID }), emptyTitle: "全部");
            return View();
        }
        /// <summary>
        /// 网格
        /// </summary>
        /// <param name="cardType"></param>
        /// <param name="batchSN"></param>
        /// <param name="state"></param>
        /// <param name="createUID"></param>
        /// <param name="beginDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FindCreateCardPageList(string cardType, string batchSN, short? state, string createUID, DateTime? beginDate, DateTime? endDate)
        {
            int count = 0;
            var result = _makeMembershipCardBLL.GetMakingMembershipCardByWhere(cardType, batchSN, state, createUID, beginDate, endDate, out count);
            return ToDataGrid(result, count);
        }
        /// <summary>
        /// 新建
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult CreateMemberCard(int? id)
        {
            MakingMembershipCard _shipCard = new MakingMembershipCard();

            if (id != null)
            {
                _shipCard = _makeMembershipCardBLL.GetShipCardById((int)id);
            }
            ViewBag.CardType = ListToSelect(_cardInfoBLL.GetAllMemberCardType().Select(o => new SelectListItem() { Text = o.CardName + "(" + (o.Category == 1 ? "电子卡" : o.Category == 2 ? "磁卡" : "IC卡") + ")", Value = o.CardTypeId }));
            //ViewBag.CardType = ListToSelect(_cardInfoBLL.GetAllMemberCardType().Select(o => new SelectListItem() { Text = o.CardName, Value = o.Id.ToString() }));
            return View(_shipCard);
        }
        /// <summary>
        /// 新建
        /// </summary>
        /// <param name="_shipCard"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CreateMemberCard(MakingMembershipCard _shipCard)
        {
            var result = _makeMembershipCardBLL.CreateMakingMembershipCard(_shipCard);
            return Content(result.ToJson());
        }
        public ActionResult UpdateMemberCardState(short state, string ids)
        {
            var result = _makeMembershipCardBLL.UpdateState(state, ids);
            return Content(result.ToJson());
        }
        /// <summary>
        /// 会员卡批次--生成会员卡
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public ActionResult GenerateMemberCard(string ids)
        {
            var result = _makeMembershipCardBLL.GenerateMemberCard(ids);
            return Content(result.ToJson());
        }

        /// <summary>
        /// 批次导出会员卡信息
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public ActionResult ExportMemberCard(string ids)
        {
            var result = _makeMembershipCardBLL.ExportMemberCard(ids);
            return Content(result.ToJson());
        }

        #endregion
        #region 领用优惠券
        public ActionResult TakeCouponIndex()
        {
            return View();
        }
        [HttpPost]
        public ActionResult FindTakeCouponPageList()
        {
            return ToDataGrid(null, 0);
        }
        #endregion
        #region 制作优惠券

        private readonly MakingCouponCardBLL _couponCardBLL = new MakingCouponCardBLL();
        //列表
        public ActionResult CreateCouponIndex()
        {
            ViewBag.types = ListToSelect(SysDataDictService.GetDictionaryList(Logic.DicType.优惠券类别).Select(o => new SelectListItem() { Value = o.DicSN.ToString(), Text = o.Title }), emptyTitle: "全部");
            ViewBag.forms = ListToSelect(SysDataDictService.GetDictionaryList(Logic.DicType.优惠券形式).Select(o => new SelectListItem() { Value = o.DicSN.ToString(), Text = o.Title }), emptyTitle: "全部");
            ViewBag.shops = ListToSelect(WarehouseService.GetList().Select(o => new SelectListItem() { Value = o.StoreId, Text = o.Title }), emptyTitle: "全部", emptyValue: "-1");
            ViewBag.users = ListToSelect(_makeMembershipCardBLL.GetCreateUserToDropDown().Select(o => new SelectListItem() { Text = o.FullName, Value = o.UID }), emptyTitle: "全部");
            return View();
        }
        [HttpPost]
        public ActionResult FindCreateCouponPageList(int page = 1, int rows = 20)
        {
            int couponType = -1;
            int couponFrom = -1;
            short state = -1;
            string storeIds = "-1";
            string expiryStart = "-1";
            string expiryEnd = "-1";
            string receiveStart = "-1";
            string receiveEnd = "-1";
            string createUID = "-1";

            if (Request["couponType"] != "")
            {
                couponType = int.Parse(Request["couponType"].ToString().Trim());
            }
            if (Request["couponFrom"] != "")
            {
                couponFrom = int.Parse(Request["couponFrom"].ToString().Trim());
            }
            if (Request["state"] != "-1")
            {
                state = Convert.ToInt16(Request["state"].ToString().Trim());
            }
            if (Request["storeIds"] != "")
            {
                storeIds = Request["storeIds"].ToString().Trim();
            }
            if (Request["expiryStart"] != "")//有效期
            {
                expiryStart = Request["expiryStart"].ToString().Trim();
            }
            if (Request["expiryEnd"] != "")
            {
                expiryEnd = Request["expiryEnd"].ToString().Trim();
            }
            if (Request["receiveStart"] != "")//领取期限
            {
                receiveStart = Request["receiveStart"].ToString().Trim();
            }
            if (Request["receiveEnd"] != "")
            {
                receiveEnd = Request["receiveEnd"].ToString().Trim();
            }
            if (Request["createUID"] != "")
            {
                createUID = Request["createUID"].ToString().Trim();
            }
            var paging = new Paging() { PageIndex = page, PageSize = rows };
            var result = _couponCardBLL.FindCreateCouponPageList(paging, couponType, couponFrom, state, storeIds, expiryStart, expiryEnd, receiveStart, receiveEnd, createUID);
            return ToDataGrid(result, paging.RecordTotal);
        }

        //新增或修改
        public ActionResult CreateCoupon(string Id)
        {
            ViewBag.types = ListToSelect(SysDataDictService.GetDictionaryList(Logic.DicType.优惠券类别).Select(o => new SelectListItem() { Value = o.DicSN.ToString(), Text = o.Title }), emptyTitle: "请选择");
            ViewBag.forms = ListToSelect(SysDataDictService.GetDictionaryList(Logic.DicType.优惠券形式).Select(o => new SelectListItem() { Value = o.DicSN.ToString(), Text = o.Title }), emptyTitle: "请选择");
            ViewBag.shops = ListToSelect(WarehouseService.GetList().Select(o => new SelectListItem() { Value = o.StoreId, Text = o.Title }), emptyTitle: "全部", emptyValue: "-1");
            //品类
            var parents = ProductCategoryService.GetParentTypes().Select(o => new DropdownItem() { Value = o.CategorySN.ToString(), Text = o.Title }).ToList();
            ViewBag.parenttypes = parents.ToJson();
            parents = ProductBrandService.GetList().Select(o => new DropdownItem(o.BrandSN.ToString(), o.Title)).ToList();
            ViewBag.brands = parents.ToJson();
            var obj = new MakingCouponCard();
            if (!Id.IsNullOrEmpty())
            {
                obj = _couponCardBLL.FindModelById(int.Parse(Id));
            }
            return View(obj.IsNullThrow());
        }
        [HttpPost]
        public ActionResult CreateCoupon(MakingCouponCard model)
        {
            var result = _couponCardBLL.SaveOrUpdate(model);
            return Content(result.ToJson());
        }

        //[HttpPost]
        //public ActionResult FindProductTypeList()
        //{
        //    int count = 0;
        //    var ls = ProductCategoryService.FindPageList(Request.Params, out count);
        //    return ToDataGrid(ls, ls.Count);
        //}

        //品类列表
        [HttpPost]
        public ActionResult LoadTypeList(string Id, int type)
        {
            int count = 0;
            if (!string.IsNullOrEmpty(Id))
            {
                var list = _couponCardBLL.LoadTypeList(int.Parse(Id), type, out count);
                return ToDataGrid(list, count);
            }
            else
            {
                return ToDataGrid(null, 0);
            }
        }

        public ActionResult GenerateCoupon(int Id, int num)
        {
            if (Id != 0)
            {
                var list = _couponCardBLL.GenerateCoupon(Id, num);
                return View();
                //return ToDataGrid(list, count);
            }
            else
            {
                //return ToDataGrid(null, 0);
                return View();
            }

        }

        #endregion
        #region 充值赠送
        private readonly RechargeGiftsBLL _rechargeGiftBll = new RechargeGiftsBLL();
        /// <summary>
        /// index
        /// </summary>
        /// <returns></returns>
        public ActionResult RechargeGiftIndex()
        {
            ViewBag.users = ListToSelect(_rechargeGiftBll.GetCreateUserToDropDown().Select(o => new SelectListItem() { Text = o.FullName, Value = o.UID }), emptyTitle: "全部");
            return View();
        }
        /// <summary>
        /// find rechangegift page list by where 
        /// </summary>
        /// <returns></returns>
        public ActionResult FindRechargeGiftPageList(int? state, string createUID)
        {
            int count = 0;
            if (state == null) { state = -1; }
            var result = _rechargeGiftBll.FindRechargeGiftPageList((int)state, createUID, out count);
            return ToDataGrid(result, count);
        }
        /// <summary>
        /// add or update
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult CreateRechargeGift(int? id)
        {
            RechargeGifts _rechargeGift = new RechargeGifts();
            if (id != null && id != 0)
            {
                _rechargeGift = _rechargeGiftBll.GetRechargeGiftsById((int)id);
            }
            return View(_rechargeGift);
        }
        /// <summary>
        /// add or update a  rechargegift rule
        /// </summary>
        /// <param name="_rechargeGift"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CreateRechargeGift(RechargeGifts _rechargeGift)
        {
            var result = _rechargeGiftBll.CreateRechargeGift(_rechargeGift);
            return Content(result.ToJson());
        }
        /// <summary>
        /// update rechargegift rule state
        /// </summary>
        /// <param name="state"></param>
        /// <param name="ids"></param>
        /// <returns></returns>
        public ActionResult UpdateRechargeGiftState(int state, string ids)
        {
            var result = _rechargeGiftBll.UpdateRechargeGiftState(state, ids);
            return Content(result.ToJson());
        }
        /// <summary>
        /// 根据充值金额取符合条件的充值赠送信息
        /// </summary>
        /// <param name="rechargeMoney"></param>
        /// <returns></returns>
        public ActionResult GetRechargeGiftInfo(decimal rechargeMoney)
        {
            var result = _rechargeGiftBll.GetRechargeGiftInfo(rechargeMoney);
            return Content(result.ToJson());
        }
        #endregion
        #region 生日提醒
        public ActionResult BirthdayRemindIndex()
        {
            return View();
        }
        [HttpPost]
        public ActionResult FindBirthdayRemindPageList()
        {
            return ToDataGrid(null, 0);
        }
        public ActionResult CreateBirthdayRemind()
        {
            return View();
        }
        #endregion
        #region 会员等级
        MemberLevelBLL _memberLevelBll = new MemberLevelBLL();
        public ActionResult MemberGradeIndex()
        {
            return View();
        }
        [HttpPost]
        public ActionResult FindMemberGradePageList()
        {
            int count = 0;
            var result = _memberLevelBll.FindMemberLevelByCompanyId(out count);
            return ToDataGrid(result, count);
        }
        [HttpGet]
        public ActionResult CreateMemberGrade()
        {
            return View(new MemberLevel());
        }
        [HttpPost]
        public ActionResult CreateMemberGrade(MemberLevel level)
        {
            var result = _memberLevelBll.CreateMemberLevel(level);
            return Content(result.ToJson());
        }

        public ActionResult UpdateMemberLevelState(short state, string ids)
        {
            var result = _memberLevelBll.UpdateMemberStateByIds(state, ids);
            return Content(result.ToJson());
        }
        #endregion
        #region 积分规则
        private readonly IntegralRuleBLL _integralRuelBLL = new IntegralRuleBLL();
        private readonly SysDataDictionaryBLL _dicBLL = new SysDataDictionaryBLL();

        public ActionResult IntegralRuleIndex()
        {
            return View();
        }
        public ActionResult FindIntegralRulePageList(short ruleTypeId, string value)
        {
            int count = 0;
            var result = _integralRuelBLL.FindIntegralRuleList(ruleTypeId, value, out count);
            return ToDataGrid(result, count);
        }
        [HttpGet]
        public ActionResult CreateIntegralRule(int? id = null)
        {
            IntegralRule _rule = new IntegralRule();
            if (id != null)
            {
                _rule = _integralRuelBLL.GetIntegralRuleById((int)id);
            }
            //客户等级
            ViewBag.MemberLevels = ListToSelect(_memberLevelBll.GetAllMemberLevelInfo().Select(o => new SelectListItem() { Text = o.LevelTitle, Value = o.MemberLevelId }));
            //付款方式
            ViewBag.ApiTypes = ListToSelect(ApiLibraryService.GetAllApiLibrary().Select(o => new SelectListItem() { Text = o.Title, Value = o.ApiCode.ToString() }));
            //ViewBag.ApiTypes = ListToSelect(_dicBLL.GetDicListByPSN(10).Select(o => new SelectListItem() { Text = o.Title, Value = o.DicSN.ToString() }));
            //品类
            //ViewBag.parenttypes = ListToSelect(ProductCategoryService.GetParentTypes().Select(o => new SelectListItem() { Value = o.CategorySN.ToString(), Text = o.Title }), emptyTitle: "全部");

            var parents = ProductCategoryService.GetParentTypes().Select(o => new DropdownItem() { Value = o.CategorySN.ToString(), Text = o.Title }).ToList();
            //parents.Insert(0, new DropdownItem("", "请选择"));
            ViewBag.parenttypes = parents.ToJson();
            parents = ProductBrandService.GetList().Select(o => new DropdownItem(o.BrandSN.ToString(), o.Title)).ToList();
            //parents.Insert(0, new DropdownItem("", "请选择"));
            ViewBag.brands = parents.ToJson();

            return View(_rule);
        }
        [HttpPost]
        public ActionResult CreateIntegralRule(IntegralRule rule)
        {
            var result = _integralRuelBLL.CreateIntegralRule(rule);
            return Content(result.ToJson());
        }
        public ActionResult UpdateIntegralRuleState(string ids, short state = 1)
        {
            var result = _integralRuelBLL.UpdateIntegralRule(ids, state);
            return Content(result.ToJson());
        }
        /// <summary>
        /// 取该会员等级下所有可用规则
        /// </summary>
        /// <param name="memberLevel"></param>
        /// <returns></returns>
        public ActionResult GetActivingIntergralRuleByMemberLevel(string memberLevel)
        {
            var result = _integralRuelBLL.GetActivingIntergralRuleByMemberLevel(memberLevel);
            return Content(result.Count().ToJson());
        }

        /// <summary>
        /// 按指定品类时取品类明细
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult GetAllTypeByRule3(int id)
        {
            List<ProductCategory> result = new List<ProductCategory>();
            int count = 0;
            if (id != 0)
            {
                //Id StrId CategorySN CategoryGrade BrandSN BigCategoryTitle MidCategoryTitle SubCategoryTitle BrandTitle StockNums 
                var currentRule = _integralRuelBLL.FindIntegralRuleById(id);
                //查对应品类
                if (currentRule.RuleTypeId == 3)
                {
                    List<string> currentValue = new List<string>();
                    if (currentRule.RuleTypeValue.Trim(',').Contains(","))
                    {
                        currentValue = currentRule.RuleTypeValue.Trim(',').Split(',').ToList();
                    }
                    else
                    {
                        currentValue.Add(currentRule.RuleTypeValue);
                    }
                    foreach (var item in currentValue)
                    {
                        ProductCategory _category = new ProductCategory();
                        var category = new ProductCategoryService().GetProductCategoryByCategorySN(Convert.ToInt32(item));

                        while (category.CategoryPSN != 0)
                        {
                            switch (category.Grade)
                            {
                                case 4:
                                    break;
                                case 3:
                                    _category.SubCategory = category.CategorySN;
                                    _category.SubCategoryTitle = category.Title;
                                    break;
                                case 2:
                                    _category.MidCategory = category.CategorySN;
                                    _category.MidCategoryTitle = category.Title;
                                    break;
                                case 1:
                                    _category.CategorySN = category.CategorySN;
                                    _category.BigCategoryTitle = category.Title;
                                    break;
                            }

                            category = new ProductCategoryService().GetProductCategoryByCategorySN(Convert.ToInt32(category.CategoryPSN));

                        }
                        if (category.CategoryPSN == 0)
                        {
                            _category.CategorySN = category.CategorySN;
                            _category.BigCategoryTitle = category.Title;
                        }
                        result.Add(_category);
                        count++;
                    }
                }

            }
            return ToDataGrid(result, count);
        }
        public class ProductCategory
        {
            public int Id { get; set; }
            public int CategorySN { get; set; }
            public int CategoryGrade { get; set; }
            public string BigCategoryTitle { get; set; }
            public int MidCategory { get; set; }
            public string MidCategoryTitle { get; set; }
            public int SubCategory { get; set; }
            public string SubCategoryTitle { get; set; }
            public int BandSN { get; set; }
            public string BandTitle { get; set; }
            public string StockNums { get; set; }

        }
        #endregion
        #region 卡片类型
        CardInfoBLL _cardInfoBLL = new CardInfoBLL();
        public ActionResult MemberCardTypeIndex()
        {
            return View();
        }
        /// <summary>
        /// 查询现有卡类型
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FindMemberCardTypeList()
        {
            int count = 0;
            var cardinfos = _cardInfoBLL.FindMemberCardTypeList(out count);
            return ToDataGrid(cardinfos, count);
        }
        [HttpGet]
        public ActionResult CreateMemberCardType(int? id)
        {
            CardInfo _info = new CardInfo();
            if (id != null && id != 0)
            {
                _info = CardInfoService.FindById(id);
            }
            return View(_info);
        }
        /// <summary>
        /// 新建卡类型
        /// </summary>
        /// <param name="cardinfo"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CreateMemberCardType(CardInfo cardinfo)
        {
            var result = _cardInfoBLL.CreateMemberCardType(cardinfo);
            return Content(result.ToJson());
        }
        /// <summary>
        /// 更改状态
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult UpdateCardInfoState(short state, string ids)
        {
            var result = _cardInfoBLL.UpdateCardState(state, ids);
            return Content(result.ToJson());
        }
        #endregion
        /// <summary>
        /// 返赠方案首页
        /// </summary>
        /// <returns></returns>
        public ActionResult ReturnRulesIndex()
        {
            return View();
        }
        /// <summary>
        /// 返赠新建
        /// </summary>
        /// <returns></returns>
        public ActionResult CreateReturnRules(int? id)
        {
            //ViewBag.Adapters
            ViewBag.Adapters = ListToSelect(_dicBLL.GetDicListByPSN(204).Select(o => new SelectListItem() { Text = o.Title, Value = o.DicSN.ToString() }));
            //ViewBag.LeftSign
            ViewBag.LeftSign = ListToSelect(_dicBLL.GetDicListByPSN(222).Select(o => new SelectListItem() { Text = o.Title, Value = o.DicSN.ToString() }));
            //    ViewBag.RightSign
            ViewBag.RightSign = ListToSelect(_dicBLL.GetDicListByPSN(222).Where(o => o.DicSN == 226 || o.DicSN == 227).Select(o => new SelectListItem() { Text = o.Title, Value = o.DicSN.ToString() }));
            //        ViewBag.Mode
            ViewBag.Mode = ListToSelect(_dicBLL.GetDicListByPSN(228).Select(o => new SelectListItem() { Text = o.Title, Value = o.DicSN.ToString() }));
            //            ViewBag.OperationType
            ViewBag.OperationType = ListToSelect(_dicBLL.GetDicListByPSN(234).Select(o => new SelectListItem() { Text = o.Title, Value = o.DicSN.ToString() }));
            // 赠送类型               ViewBag.GivenType
            ViewBag.GivenType = ListToSelect(_dicBLL.GetDicListByPSN(231).Select(o => new SelectListItem() { Text = o.Title, Value = o.DicSN.ToString() }));
            //付款方式
            ViewBag.ApiTypes = ListToSelect(ApiLibraryService.GetAllApiLibrary().Select(o => new SelectListItem() { Text = o.Title, Value = o.ApiCode.ToString() }));
            ReturnRules rules = new ReturnRules();
            return View(rules);
        }

        public ActionResult FindReturnRulesList()
        {
            return ToDataGrid(null, 0);
        }
    }
}