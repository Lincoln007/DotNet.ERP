using Pharos.SocketService.Retailing.Models;
using Pharos.SocketService.Retailing.Protocol;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json;

namespace Pharos.SocketService.Retailing.Commands.DataAgent
{
    public abstract class BaseDataAgentCommand : BaseCommand
    {
        private static readonly string ErrorInfo = "";
        public BaseDataAgentCommand(byte[] cmdCode)
            : base(0x01, cmdCode)
        {

        }
        public abstract void Execute(DataAgentParams _Params, SocketSession session, SocketRequestInfo requestInfo);


        public override void ExecuteCommand(SocketSession session, SocketRequestInfo requestInfo)
        {
            var json = SocketSession.defaultEncoding.GetString(requestInfo.Body);
            var _Params = JsonConvert.DeserializeObject<DataAgentParams>(json);
            if (string.IsNullOrEmpty(_Params.StoreId))
            {
                WriteErrorMessage(session, requestInfo, "数据同步，门店标识（StoreId） 不能为空！");
                return;
            }
            if (string.IsNullOrEmpty(_Params.TableName))
            {
                WriteErrorMessage(session, requestInfo, "数据同步，表名（TableName）不能为空！");
                return;
            }
            Execute(_Params, session, requestInfo);
        }

        public void WriteErrorMessage(SocketSession session, SocketRequestInfo requestInfo, string ErrorMessage)
        {
            var info = SocketSession.defaultEncoding.GetBytes(ErrorMessage);
            var body = new byte[info.Length + requestInfo.CommandRuleProvider.BytesLength];
            Array.Copy(info, 0, body, requestInfo.CommandRuleProvider.BytesLength, info.Length);
            Array.Copy(requestInfo.CommandRuleProvider.ErrorCode, 0, body, 0, requestInfo.CommandRuleProvider.BytesLength);

            var result = session.Format(body);
            session.Send(result, 0, result.Length);
        }

        public void WriteDataSyncDeleteAction(SocketSession session, SocketRequestInfo requestInfo, string content)
        {
             var info = SocketSession.defaultEncoding.GetBytes(content);
            var body = new byte[info.Length + requestInfo.CommandRuleProvider.BytesLength];
            Array.Copy(info, 0, body, requestInfo.CommandRuleProvider.BytesLength, info.Length);
            Array.Copy((requestInfo.CommandRuleProvider as CommandRuleProvider).DeleteActionCode, 0, body, 0, requestInfo.CommandRuleProvider.BytesLength);

            var result = session.Format(body);
            session.Send(result, 0, result.Length);
        }
        public void WriteDataSyncDownloadAction(SocketSession session, SocketRequestInfo requestInfo, string content)
        {
            var info = SocketSession.defaultEncoding.GetBytes(content);
            var body = new byte[info.Length + requestInfo.CommandRuleProvider.BytesLength];
            Array.Copy(info, 0, body, requestInfo.CommandRuleProvider.BytesLength, info.Length);
            Array.Copy((requestInfo.CommandRuleProvider as CommandRuleProvider).DownloadActionCode, 0, body, 0, requestInfo.CommandRuleProvider.BytesLength);

            var result = session.Format(body);
            session.Send(result, 0, result.Length);
        }
    }
}
