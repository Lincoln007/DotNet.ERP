using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.IDAL;
using Pharos.Logic.OMS.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pharos.Logic.OMS.BLL
{
    public class PayTradeService :IPayTradeService
    {
        /// <summary>
        /// 支付接口仓储
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<PayApi> PayApiRepost { get; set; }
        /// <summary>
        /// 支付订单记录仓储
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<MchOrder> MchOrderRepost { get; set; }
        /// <summary>
        /// 支付结果通知仓储
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<MchTradeResult> MchTradeResultRepost { get; set; }
        /// <summary>
        /// 商户支付账号仓储
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<MerchantPay> MchPayRepost { get; set; }
        /// <summary>
        /// 商户支付门店仓储
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<MerchantStore> MchStoreRepost { get; set; }

        static object objlock = new object();
        /// <summary>
        /// 生成支付交易流水号
        /// </summary>
        public string NewTradeNo
        {
            get
            {
                lock (objlock)
                {
                    var prefix = DateTime.Now.ToString("yyyyMMddHHmmss");
                    var maxNo = GetMaxTradeNo(prefix);
                    int defNo = 0;
                    if (!string.IsNullOrEmpty(maxNo))
                        defNo = int.Parse(maxNo.Substring(14));
                    defNo++;
                    return prefix + defNo.ToString("0000");
                }
            }
        }
        /// <summary>
        /// 根据商户CID获得该商户的可以通道
        /// </summary>
        /// <param name="cid"></param>
        /// <returns></returns>
        public object GetChannels(int cid)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// 创建商户支付交易订单
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public MchOrder CreateBuildPayDynamicOrder(BuildPayDynamicRequest reqParams, out string secretKey3)
        {
            secretKey3 = "";
            var mchObj = GetMchPay(reqParams.CID);
            var storeObj = GetMchStore(reqParams.CID,reqParams.SID);
            if (mchObj != null && storeObj != null)
            {
                //fishtodo:1 更改为交易币种为实际数据字典； 2 对各参数的格式进行验证
                secretKey3 = mchObj.SecretKey3;
                DateTime createDt = DateTime.Now;
                var tradeNo = NewTradeNo;
                var tradeRcd = new MchOrder()
                {
                    TradeNo = tradeNo,
                    MchOrderNo = reqParams.MchOrderNo,
                    CID = reqParams.CID,
                    SID = reqParams.SID,
                    DeviceId = reqParams.DeviceId,
                    MchOrderNo3 = reqParams.MchOrderNo,
                    MchId3 = storeObj.MchId3,
                    StoreId3 = storeObj.StoreId3,
                    DeviceId3 = reqParams.DeviceId.ToString(),
                    OrderAmount = reqParams.OrderAmount,
                    TradeAmount = reqParams.OrderAmount,
                    SourceType = mchObj.SourceType,
                    PayChannel = mchObj.PayChannel,
                    SignType = reqParams.SignType,
                    Version = reqParams.Version,
                    Signature = reqParams.Sign,
                    Status = 0,
                    PayNotifyUrl = reqParams.PayNotifyUrl,
                    Fee = reqParams.OrderAmount * mchObj.MchRate * (decimal)0.01,
                    OrderType = 0,
                    OrderType3 = reqParams.OrderType,
                    OrderDate = createDt.ToString("yyyyMMddHHmmss"),
                    TradeType = 0,
                    FeeType = 1,
                    PayerMobile = "",
                    CreateDT = createDt,
                    UpdateDT = createDt
                };
                MchOrderRepost.Add(tradeRcd, false);
                var result = MchOrderRepost.SaveChanges();
                if (result)
                {
                    return tradeRcd;
                }
            }
            return null;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="prefix"></param>
        /// <returns></returns>
        public string GetMaxTradeNo(string prefix)
        {
            var result = MchOrderRepost.GetQuery(o => o.TradeNo.StartsWith(prefix)).Max(o => o.TradeNo);
            return result;
        }

        /// <summary>
        /// 根据CID获取商户支付账户信息
        /// </summary>
        /// <param name="cid"></param>
        /// <returns></returns>
        public MerchantPay GetMchPay(int cid)
        {
            var mchObj = MchPayRepost.GetQuery(o => o.CID == cid && o.Status == 1).FirstOrDefault();
            return mchObj;
        }

        /// <summary>
        /// 根据根据第三方商户号获取商户支付账户信息
        /// </summary>
        /// <param name="mchId"></param>
        /// <returns></returns>
        public MerchantPay GetMchPay(string mchId)
        {
            var mchObj = MchPayRepost.GetQuery(o => o.Info1 == mchId && o.Status == 1).FirstOrDefault();
            return mchObj;
        }

        /// <summary>
        /// 根据商户号及门店号获取商户信息
        /// </summary>
        /// <param name="mchId"></param>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public MerchantStore GetMchStore(int cid, int sid)
        {
            var storeObj = MchStoreRepost.GetQuery(o => o.CID == cid && o.SID == sid && o.Status == 1).FirstOrDefault();
            return storeObj;
        }
        /// <summary>
        /// 根据商户号及门店号获取商户信息
        /// </summary>
        /// <param name="mchId"></param>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public MerchantStore GetMchStore(string mchId3, string storeId3)
        {
            var storeObj = MchStoreRepost.GetQuery(o => o.MchId3 == mchId3 && o.StoreId3 == storeId3 && o.Status == 1).FirstOrDefault();
            return storeObj;
        }
    }

    interface IPayTradeService
    {
        /// <summary>
        /// 根据商户CID获得该商户的可以通道
        /// </summary>
        /// <param name="cid"></param>
        /// <returns></returns>
        object GetChannels(int cid);

        /// <summary>
        /// 创建商户支付订单
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        MchOrder CreateBuildPayDynamicOrder(BuildPayDynamicRequest reqParams, out string secretKey3);

        /// <summary>
        /// 获取最大支付交易流水号
        /// </summary>
        /// <param name="prefix"></param>
        /// <returns></returns>
        string GetMaxTradeNo(string prefix);

        /// <summary>
        /// 根据CID获取商户支付账户信息
        /// </summary>
        /// <param name="cid"></param>
        /// <returns></returns>
        MerchantPay GetMchPay(int cid);
        /// <summary>
        /// 根据第三方商户Id获取商户支付账户信息
        /// </summary>
        /// <param name="mchId"></param>
        /// <returns></returns>
        MerchantPay GetMchPay(string mchId);
        /// <summary>
        /// 根据商户号及门店号获取商户信息
        /// </summary>
        /// <param name="mch"></param>
        /// <returns></returns>
        MerchantStore GetMchStore(int cid, int sid);
        /// <summary>
        /// 根据第三方商户号及第三方门店号获取商户信息
        /// </summary>
        /// <param name="mch"></param>
        /// <returns></returns>
        MerchantStore GetMchStore(string mchId, string storeId);
    }
}
