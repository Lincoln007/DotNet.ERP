using Pharos.Logic.ApiData.Pos.DataAdapter;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.ApiData.Pos.ValueObject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.Sale.AfterSale
{
    public class RefundSale
    {
        public static void Refund(string storeId, string machineSn, List<ChangeRefundItem> refundList, int reason, string paySn, decimal amount)
        {
            var dataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, storeId, machineSn);
            var shoppingcart = ShoppingCartFactory.Factory(storeId, machineSn);
            if (shoppingcart.MachineInformation == null || string.IsNullOrEmpty(shoppingcart.MachineInformation.CashierUid) || !shoppingcart.MachineInformation.Enable)
            {
                throw new PosException("400", "未登录或者未授权，不允许操作！");
            }
            var uid = shoppingcart.MachineInformation.CashierUid;

            dataAdapter.Refund(refundList, reason, paySn, amount, uid);
        }

        public static void RefundAll(string storeId, string machineSn, int reason, string paySn, decimal amount)
        {
            var dataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, storeId, machineSn);
            var shoppingcart = ShoppingCartFactory.Factory(storeId, machineSn);
            if (shoppingcart.MachineInformation == null || string.IsNullOrEmpty(shoppingcart.MachineInformation.CashierUid) || !shoppingcart.MachineInformation.Enable)
            {
                throw new PosException("400", "未登录或者未授权，不允许操作！");
            }
            var uid = shoppingcart.MachineInformation.CashierUid;

            dataAdapter.RefundAll(reason, paySn, amount, uid);
        }

        public static IEnumerable<ReasonItem> GetReason(string storeId, string machineSn)
        {
            var dataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, storeId, machineSn);
            return dataAdapter.GetReason(2);
        }
    }
}
