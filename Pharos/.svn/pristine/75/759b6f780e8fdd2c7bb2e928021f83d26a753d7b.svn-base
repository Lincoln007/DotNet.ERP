using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.Entity;
using Pharos.Sys.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;

namespace Pharos.Logic.BLL
{
    public class ReturnRulesService : BaseService<ReturnRules>
    {
        public static IEnumerable<int> GetIntegralRuleProviderIds(int companyId)
        {
            return CurrentRepository.Entities.Where(o => o.CompanyId == companyId).Select(o => o.Mode).Distinct().ToList();
        }

        public static IEnumerable<ReturnRules> GetProviderRules(int companyId, int providerId)
        {
            return CurrentRepository.Entities.Where(o => o.CompanyId == companyId && o.Adapters == providerId).ToList();

        }
        /// <summary>
        /// 全部数据
        /// </summary>
        /// <param name="count"></param>
        /// <returns></returns>
        public object FindReturnRulesList(out int count)
        {
            try
            {
                var query = CurrentRepository.Entities.Where(o => o.CompanyId == CommonService.CompanyId);
                count = query.Count();
                if (count > 0)
                {
                    var result = (from r in query
                                  join s in BaseService<SysStoreUserInfo>.CurrentRepository.Entities
                                  on r.CreateUID equals s.UID
                                  select new
                                  {
                                      Id = r.Id,
                                      Adapters = r.Adapters,
                                      Number1 = r.Number1,
                                      LeftSign = r.LeftSign,
                                      RightSign = r.RightSign,
                                      Number2 = r.Number2,
                                      Mode = r.Mode,
                                      LimitItems = r.LimitItems,
                                      OperationType = r.OperationType,
                                      Expression = r.Expression,
                                      GivenType = r.GivenType,
                                      ExpiryStart = r.ExpiryStart,
                                      ExpiryEnd = r.ExpiryEnd,
                                      State = r.State,
                                      CreateDT = r.CreateDT,
                                      CreateUID = s.FullName
                                  }).ToPageList();
                    return result;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception e)
            {
                throw;
            }
        }
        /// <summary>
        /// 更改返赠信息状态
        /// </summary>
        /// <param name="state"></param>
        /// <param name="ids"></param>
        /// <returns></returns>
        public OpResult UpdateReturnRulesState(int state, string ids)
        {
            try
            {
                var datas = CurrentRepository.Entities.Where(o => o.CompanyId == CommonService.CompanyId && ("," + ids + ",").Contains("," + o.Id + ",")).ToList();
                if (datas != null)
                {
                    datas.ForEach(o => o.State = state);
                    CurrentRepository.Update(new ReturnRules());
                    return OpResult.Success("操作成功");
                }
                else
                {
                    return OpResult.Fail("找不到原始数据！");
                }
            }
            catch (Exception e)
            {
                return OpResult.Fail(e.Message);
            }
        }
        /// <summary>
        /// 返赠方案修改
        /// </summary>
        /// <param name="_rule"></param>
        /// <returns></returns>
        public OpResult UpdateReturnRule(ReturnRules _rule)
        {
            var data = CurrentRepository.Entities.Where(o => o.Id == _rule.Id && o.CompanyId == CommonService.CompanyId).FirstOrDefault();
            if (data != null)
            {
                data.Adapters = _rule.Adapters;
                data.Number1 = _rule.Number1;
                data.LeftSign = _rule.LeftSign;
                data.RightSign = _rule.RightSign;
                data.Number2 = _rule.Number2;
                data.Mode = _rule.Mode;
                data.LimitItems = _rule.LimitItems;
                data.OperationType = _rule.OperationType;
                data.Expression = _rule.Expression;
                data.GivenType = _rule.GivenType;
                data.ExpiryStart = _rule.ExpiryStart;
                data.ExpiryEnd = _rule.ExpiryEnd;
                data.State = _rule.State;
                data.StartTime1 = _rule.StartTime1;
                data.EndTime1 = _rule.EndTime1;
                data.StartTime2 = _rule.StartTime2;
                data.EndTime2 = _rule.EndTime2;
                data.StartTime3 = _rule.StartTime3;
                data.EndTime3 = _rule.EndTime3;
                data.LimitNum = _rule.LimitNum;

                var result = CurrentRepository.Update(data);
                if (result)
                    return OpResult.Success("操作成功！");
                else
                    return OpResult.Fail("请核对提交数据");
            }
            else
            {
                return OpResult.Fail("未找到原始数据！");
            }
        }
    }
}
