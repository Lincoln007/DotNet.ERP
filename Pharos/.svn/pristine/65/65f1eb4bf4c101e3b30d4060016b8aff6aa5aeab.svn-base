using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.SyncService.Helpers;
using Pharos.SyncService.Exceptions;
using Pharos.Logic.ApiData.Pos.DAL;
using Pharos.SyncService.SyncEntities;
using System.Data.Entity.Validation;

namespace Pharos.SyncService.LocalDataServices
{
    public class SalePackageSyncLocalService : ISyncDataService
    {
        public Microsoft.Synchronization.SyncDirectionOrder SyncDirectionOrder
        {
            get { return Microsoft.Synchronization.SyncDirectionOrder.UploadAndDownload; }
        }

        public IEnumerable<ISyncDataObject> GetSyncObjects(int companyId, string storeId)
        {
            try
            {
                using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
                {
                    var orders = db.SaleOrders.Where(o => o.StoreId == storeId && o.CompanyId == companyId).ToList();
                    List<SyncDataPackage> result = new List<SyncDataPackage>();

                    foreach (var item in orders)
                    {
                        var package = GetVersion(item, companyId, storeId, db);
                        result.Add(package);
                    }
                    return result;
                }
            }
            catch
            {
                return new List<ISyncDataObject>();
            }
        }
        private SyncDataPackage GetVersion(Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.SaleOrders item, int companyId, string storeId, LocalCeDbContext db)
        {
            var package = new SyncDataPackage() { SyncItemId = item.SyncItemId, EntityType = "SalePackage" };
            package.Items.Add(new SyncDataPackageItem() { SyncItemId = item.SyncItemId, EntityType = typeof(SaleOrders).ToString(), SyncItemVersion = item.SyncItemVersion });

            var saledetails = db.SaleDetails.Where(o => o.CompanyId == companyId && o.PaySN == item.PaySN).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(SaleDetail).ToString()
            }).ToList();
            package.Items.AddRange(saledetails);

            var consumptionPayments = db.ConsumptionPayments.Where(o => o.CompanyId == companyId && o.PaySN == item.PaySN).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(ConsumptionPayment).ToString()
            }).ToList();
            package.Items.AddRange(consumptionPayments);

            var wipeZeros = db.WipeZeros.Where(o => o.CompanyId == companyId && o.PaySN == item.PaySN).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(WipeZero).ToString()
            }).ToList();
            package.Items.AddRange(wipeZeros);
            return package;
        }

        public ISyncDataObject GetItem(Guid guid, int companyId, string storeId)
        {
            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                var order = db.SaleOrders.FirstOrDefault(o => o.SyncItemId == guid);
                var package = new Package() { SyncItemId = guid, EntityType = "SalePackage" };
                var orderItem = new List<SaleOrders>();
                orderItem.Add(new SaleOrders().InitEntity(order));
                package.Init(orderItem);
                package.Init(db.SaleDetails.Where(o => o.PaySN == order.PaySN && o.CompanyId == companyId).ToList().Select(o => new SaleDetail().InitEntity(o, true)));
                package.Init(db.ConsumptionPayments.Where(o => o.PaySN == order.PaySN && o.CompanyId == companyId).ToList().Select(o => new ConsumptionPayment().InitEntity(o, true)));
                package.Init(db.WipeZeros.Where(o => o.PaySN == order.PaySN && o.CompanyId == companyId).ToList().Select(o => new WipeZero().InitEntity(o, true)));
                return package;

            }
        }

        public byte[] CreateItem(ISyncDataObject data, Guid guid, int companyId, string storeId)
        {
            var temp = data as Package;
            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                try
                {
                    var orders = temp.GetEntities<SaleOrders>();
                    var saleDetails = temp.GetEntities<SaleDetail>();
                    var consumptionPayments = temp.GetEntities<ConsumptionPayment>();
                    var wipeZeros = temp.GetEntities<WipeZero>();
                    db.SaleOrders.AddRange(orders.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.SaleOrders().InitEntity(o)));
                    db.SaleDetails.AddRange(saleDetails.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.SaleDetail().InitEntity(o)));
                    db.ConsumptionPayments.AddRange(consumptionPayments.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.ConsumptionPayment().InitEntity(o)));
                    db.WipeZeros.AddRange(wipeZeros.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.WipeZero().InitEntity(o)));
                    db.SaveChanges();
                    var order = db.SaleOrders.FirstOrDefault(o => o.SyncItemId == guid);
                    var version = GetVersion(order, companyId, storeId, db);
                    return version.SyncItemVersion;
                }
                catch (DbEntityValidationException dbEx)
                {
                    throw dbEx;
                }
            }
        }

        public byte[] UpdateItem(Guid guid, ISyncDataObject mergedData, int companyId, string storeId)
        {
            var temp = mergedData as Package;

            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                var order = db.SaleOrders.FirstOrDefault(o => o.SyncItemId == guid);
                db.SaleOrders.Remove(order);
                db.SaleDetails.RemoveRange(db.SaleDetails.Where(o => o.PaySN == order.PaySN).ToList());
                db.ConsumptionPayments.RemoveRange(db.ConsumptionPayments.Where(o => o.PaySN == order.PaySN).ToList());
                db.WipeZeros.RemoveRange(db.WipeZeros.Where(o => o.PaySN == order.PaySN).ToList());
                var orders = temp.GetEntities<SaleOrders>();
                var saleDetails = temp.GetEntities<SaleDetail>();
                var consumptionPayments = temp.GetEntities<ConsumptionPayment>();
                var wipeZeros = temp.GetEntities<WipeZero>();
                db.SaleOrders.AddRange(orders.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.SaleOrders().InitEntity(o, true)));
                db.SaleDetails.AddRange(saleDetails.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.SaleDetail().InitEntity(o, true)));
                db.ConsumptionPayments.AddRange(consumptionPayments.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.ConsumptionPayment().InitEntity(o, true)));
                db.WipeZeros.AddRange(wipeZeros.Select(o => new Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity.WipeZero().InitEntity(o, true)));
                db.SaveChanges();
                order = db.SaleOrders.FirstOrDefault(o => o.SyncItemId == guid);
                var version = GetVersion(order, companyId, storeId, db);
                return version.SyncItemVersion;
            }
        }

        public void DeleteItem(Guid syncItemId, int companyId, string storeId)
        {
            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                var order = db.SaleOrders.FirstOrDefault(o => o.SyncItemId == syncItemId);
                db.SaleOrders.Remove(order);
                db.SaleDetails.RemoveRange(db.SaleDetails.Where(o => o.PaySN == order.PaySN).ToList());
                db.ConsumptionPayments.RemoveRange(db.ConsumptionPayments.Where(o => o.PaySN == order.PaySN).ToList());
                db.WipeZeros.RemoveRange(db.WipeZeros.Where(o => o.PaySN == order.PaySN).ToList());
                db.SaveChanges();
            }
        }



        public ISyncDataObject Merge(ISyncDataObject syncDataObject1, ISyncDataObject syncDataObject2, int companyId, string storeId)
        {
            throw new NotImplementedException();
        }
    }
}
