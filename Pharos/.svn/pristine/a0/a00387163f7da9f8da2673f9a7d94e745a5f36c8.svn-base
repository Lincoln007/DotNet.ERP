using Pharos.POS.Retailing.ChildWin;
using Pharos.POS.Retailing.ObjectModels;
using Pharos.Wpf.ViewModelHelpers;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace Pharos.POS.Retailing.ViewModels
{
    public class LoginViewModel : BaseViewModel
    {
        public LoginViewModel()
        {
            try
            {
                var images = Directory.GetFiles(@"Images\Login", "POS-login-*.png");
                var index = new Random().Next(images.Count() - 1);
                BackgroundImage = images[index];
                Task.Factory.StartNew(() =>
                {
                    //to connect Server get data
                    var result = ApiManager.Post<object, ApiRetrunResult<AppInfo>>(@"api/AppInfo", "");
                    if (result.Code == "200")
                    {
                        Application.Current.Dispatcher.Invoke(new Action(() =>
                        {
                            // 赋值
                            AppName = result.Result.Name;
                            Title = result.Result.FullName;
                            LogoIcon = result.Result.IconUrl;

                        }));
                    }
                    else
                    {
                        Toast.ShowMessage(result.Message, Application.Current.MainWindow);
                    }
                });

            }
            catch
            {
            }
        }

        string logoIcon = @"Images\Login\logo_max.png";
        public string LogoIcon
        {
            get
            {
                return logoIcon;
            }
            set
            {
                logoIcon = value;
                this.OnPropertyChanged(o => o.LogoIcon);
            }
        }

        string backgroundImage = @"Images\Login\POS-login-5.png";
        public string BackgroundImage
        {
            get
            {
                return backgroundImage;
            }
            set
            {
                backgroundImage = value;
                this.OnPropertyChanged(o => o.BackgroundImage);
            }
        }

        string appName = "道诚科技 · 商业管理软件";
        public string AppName
        {
            get
            {
                return appName;
            }
            set
            {
                appName = value;
                this.OnPropertyChanged(o => o.AppName);
            }
        }

        string title = "欢迎使用 道诚科技 · 商业管理软件";
        public string Title
        {
            get
            {
                return title;
            }
            set
            {
                title = value;
                this.OnPropertyChanged(o => o.Title);
            }
        }

        string account = string.Empty;
        public string Account
        {
            get
            {
                return account;
            }
            set
            {
                account = value;
                this.OnPropertyChanged(o => o.Account);
            }
        }

        string password = string.Empty;
        public string Password
        {
            get
            {
                return password;
            }
            set
            {
                password = value;
                this.OnPropertyChanged(o => o.Password);
            }
        }

        public GeneralCommand<object> LoginCommand
        {
            get
            {
                return new GeneralCommand<object>((_Params, command) =>
                {
                    var machineInfo = Global.MachineSettings.MachineInformations;
                    //if login
                    //登录接口，判断返回是否成功
                    LoginInfo _loginInfo = new LoginInfo() { StoreId = machineInfo.StoreId, MachineSn = machineInfo.MachineSn, Account = Account, Password = Password, DeviceSN = machineInfo.DeviceId, DeviceType = 1, EntryPoint = 0, CompanyToken = machineInfo.CompanyToken };
                    var result = ApiManager.Post<object, ApiRetrunResult<LoginUserInfo>>(@"api/Login", _loginInfo);
                    if (result.Code == "200")
                    {
                        var page = new PosWindow();
                        page.Show();
                        CurrentWindow.Close();
                        Global.CurrentSaleMen = result.Result;

                    }
                    else
                    {
                        Toast.ShowMessage(result.Message, CurrentWindow);
                    }

                });
            }
        }

        public GeneralCommand<object> SettingsCommand
        {
            get
            {
                return new GeneralCommand<object>((_Params, command) =>
                {
                    var win = new MachineSettings();
                    win.Owner = CurrentWindow;
                    win.ShowDialog();
                });
            }
        }

    }
}
