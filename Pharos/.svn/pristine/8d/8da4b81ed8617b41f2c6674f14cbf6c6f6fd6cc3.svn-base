using Pharos.POS.Retailing.Models.ApiParams;
using Pharos.POS.Retailing.Models.ApiReturnResults;
using Pharos.Wpf.ViewModelHelpers;
using System;
using System.Management;
using System.Threading.Tasks;
using System.Windows;
using System.Xml.Serialization;

namespace Pharos.POS.Retailing.Models.ViewModels
{
    public class MachineInformations : BaseViewModel, ISettingsItem
    {
        public MachineInformations()
        {
            Task.Factory.StartNew(() =>
            {
                var mac = GetMACID(); ;
                Application.Current.Dispatcher.Invoke(new Action(() =>
                {
                    DeviceId = mac;
                }));
            });
        }
        private string GetMACID()
        {
            string mac = "";
            ManagementClass mc = new ManagementClass("Win32_NetworkAdapterConfiguration");
            ManagementObjectCollection moc = mc.GetInstances();
            foreach (ManagementObject mo in moc)
            {
                if ((bool)mo["IPEnabled"])
                {
                    mac = mo["MacAddress"].ToString();
                    break;
                }
            }
            return mac.Replace(":", "");
        }

        internal void Reload(MachineInformations machineInformations)
        {
            MachineSn = machineInformations.MachineSn;
            StoreId = machineInformations.StoreId;
            StoreName = machineInformations.StoreName;
            Phone = machineInformations.Phone;
            Company = machineInformations.Company;
            CompanyToken = machineInformations.CompanyToken;
            PrintStatus = machineInformations.PrintStatus;
        }


        string headerXamlPath = "Templates/DefaultTabControlHeaderTemplate.xaml";
        [XmlIgnore]
        public string HeaderXamlPath
        {
            get
            {
                return headerXamlPath;
            }
            set
            {
                headerXamlPath = value;
                this.OnPropertyChanged(o => o.HeaderXamlPath);
            }
        }

        string xamlPath = "Templates/MachineInformationsTemplate.xaml";
        [XmlIgnore]
        public string XamlPath
        {
            get
            {
                return xamlPath;
            }
            set
            {
                xamlPath = value;
                this.OnPropertyChanged(o => o.XamlPath);
            }
        }

        string header = "POS配置";
        [XmlIgnore]
        public string Header
        {
            get
            {
                return header;
            }
            set
            {
                header = value;
                this.OnPropertyChanged(o => o.Header);
            }
        }

        string machineSn;
        public string MachineSn
        {
            get
            {
                return machineSn;
            }
            set
            {
                machineSn = value;
                this.OnPropertyChanged(o => o.MachineSn);
            }
        }
        int companyToken;
        public int CompanyToken
        {
            get
            {
                return companyToken;
            }
            set
            {
                companyToken = value;
                this.OnPropertyChanged(o => o.CompanyToken);
            }
        }

        string deviceId;
        [XmlIgnore]
        public string DeviceId
        {
            get
            {
                return deviceId;
            }
            set
            {
                deviceId = value.ToUpper();
                this.OnPropertyChanged(o => o.DeviceId);
            }
        }

        string storeId;
        public string StoreId
        {
            get
            {
                return storeId;
            }
            set
            {
                storeId = value;
                this.OnPropertyChanged(o => o.StoreId);
            }
        }

        string company;
        public string Company
        {
            get
            {
                return company;
            }
            set
            {
                company = value;
                this.OnPropertyChanged(o => o.Company);
            }
        }
        int qianXiangType = 0;

        public int QianXiangType
        {
            get
            {
                return qianXiangType;
            }
            set
            {
                qianXiangType = value;
                this.OnPropertyChanged(o => o.QianXiangType);
            }
        }

        string storeName;
        public string StoreName
        {
            get
            {
                return storeName;
            }
            set
            {
                storeName = value;
                this.OnPropertyChanged(o => o.StoreName);
            }
        }
        string phone;
        public string Phone
        {
            get
            {
                return phone;
            }
            set
            {
                phone = value;
                this.OnPropertyChanged(o => o.Phone);
            }
        }

        /// <summary>
        /// 小票状态
        /// </summary>
        private PrintStatus printStatus = PrintStatus.Close;

        public PrintStatus PrintStatus
        {
            get { return printStatus; }
            set
            {
                printStatus = value;
                this.OnPropertyChanged(o => o.PrintStatus);
            }
        }


        /// <summary>
        /// 设备注册
        /// </summary>
        [XmlIgnore]
        public GeneralCommand<object> DeviceRegisterCommand
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    DeviceRegInfo _deviceInfo = new DeviceRegInfo() { MachineSn = machineSn, DeviceSN = deviceId, StoreId = storeId, CompanyToken = CompanyToken };

                    var result = ApiManager.Post<object, ApiRetrunResult<object>>(@"api/RegisterDevice", _deviceInfo);
                    if (result.Code == "200")
                    {
                        Toast.ShowMessage("设置成功！", CurrentWindow);
                    }
                    else
                    {
                        Toast.ShowMessage(result.Message, CurrentWindow);
                    }
                });
            }
        }

        [XmlIgnore]
        public GeneralCommand<object> SaveCommand
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    try
                    {
                        Global.MachineSettings.Save();
                        //     Toast.ShowMessage("保存成功，正在注册设备！", CurrentWindow);
                        DeviceRegisterCommand.Execute(null);
                    }
                    catch (Exception ex)
                    {
                        Toast.ShowMessage(ex.Message, CurrentWindow);
                        throw ex;
                    }
                });
            }
        }
        [XmlIgnore]
        public GeneralCommand<object> CopyCommand
        {
            get
            {
                return new GeneralCommand<object>((o1, o2) =>
                {
                    if (!string.IsNullOrEmpty(DeviceId))
                        Clipboard.SetText(DeviceId);
                });
            }
        }

    }
}
