using Pharos.Api.Retailing.Models;
using Pharos.Api.Retailing.Models.Pos;
using Pharos.Logic.ApiData.Pos;
using Pharos.Logic.ApiData.Pos.DataAdapter;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.ApiData.Pos.Sale;
using Pharos.Logic.ApiData.Pos.Sale.AfterSale;
using Pharos.Logic.ApiData.Pos.Sale.Category;
using Pharos.Logic.ApiData.Pos.Sale.Payment;
using Pharos.Logic.ApiData.Pos.Sale.Suspend;
using Pharos.Logic.ApiData.Pos.User;
using Pharos.Logic.ApiData.Pos.ValueObject;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web.Http;

namespace Pharos.Api.Retailing.Controllers.Pos
{
    /// <summary>
    /// 销售相关接口
    /// </summary>
    [RoutePrefix("api")]
    public class SaleController : ApiController
    {
        /// <summary>
        /// 刷新产品缓存
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns>无返回</returns>
        [Route("MemoryRefresh")]
        [HttpPost]
        public object MemoryRefresh([FromBody] MemoryRefreshRequest requestParams)
        {
            foreach (var item in requestParams.RefeshItems)
            {
                DataAdapterFactory.ProductCache.RefreshProduct(requestParams.CompanyId, item);
            }
            return null;
        }
        /// <summary>
        /// 启用门店促销、重置门店促销、刷新门店促销
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns>无返回</returns>
        [Route("RefreshMarketing")]
        [HttpPost]
        public object RefreshMarketing([FromBody] BaseApiParams requestParams)
        {
            StoreManager.SetUpStore(requestParams.CompanyToken, requestParams.StoreId);
            return null;
        }

        /// <summary>
        /// 公告
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Announcements")]
        [HttpPost]
        public IEnumerable<Announcement> Announcements([FromBody] PaysStatusRequest requestParams)
        {
            return new WarehouseManager().Announcements(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
        }

        /// <summary>
        /// 活动
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Activities")]
        [HttpPost]
        public IEnumerable<Activity> Activities([FromBody] PaysStatusRequest requestParams)
        {
            return new WarehouseManager().Activities(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
        }
        /// <summary>
        /// 设备注册
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>无返回</returns>
        [Route("RegisterDevice")]
        [HttpPost]
        public object RegisterDevice([FromBody] DeviceRequest requestParams)
        {
            MachinesSettings.RegisterDevice(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn, requestParams.Type);
            return null;
        }

        /// <summary>
        /// 购物清单接口
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Sale")]
        [HttpPost]
        public OrdersDetails Sale([FromBody] SaleRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            shoppingcart.Add(requestParams.Barcode, requestParams.Number, requestParams.SalePrice, requestParams.Status, requestParams.GiftId, requestParams.GiftPromotionId);
            shoppingcart.RunMarketings();
            var result = new OrdersDetails()
              {
                  BuyList = shoppingcart.GetBuyList(),
                  Gifts = new List<GiftResult>(),
                  Statistics = shoppingcart.GetSaleStatistics()
              };
            return result;
        }
        /// <summary>
        /// 取消/清空销售清单接口
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>

        [Route("ClearOrder")]
        [HttpPost]
        public OrdersDetails ClearOrder([FromBody] MachineInfo requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            shoppingcart.Clear();
            var result = new OrdersDetails()
            {
                BuyList = shoppingcart.GetBuyList(),
                Gifts = new List<GiftResult>(),
                Statistics = shoppingcart.GetSaleStatistics()
            };
            return result;
        }
        /// <summary>
        /// 查库存
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("GetProductStock")]
        [HttpPost]
        public PageResult<InventoryResult> ProductStock(InventoryRequest requestParams)
        {
            WarehouseManager warehouse = new WarehouseManager();
            var pageSize = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageSize"]);
            var pageIndex = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageIndex"]);
            var result = warehouse.CheckedInventory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn, requestParams.CategorySns, requestParams.Keyword, pageSize, pageIndex);
            return result;
        }
        /// <summary>
        /// 查价格
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("FindWithPriceRange")]
        [HttpPost]
        public PageResult<InventoryResult> FindWithPriceRange(CheckPriceRequest requestParams)
        {
            WarehouseManager warehouse = new WarehouseManager();
            var pageSize = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageSize"]);
            var pageIndex = Convert.ToInt32(System.Web.HttpContext.Current.Request.Params["pageIndex"]);
            var result = warehouse.CheckedPrice(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn, requestParams.CategorySns, requestParams.From, requestParams.To, pageSize, pageIndex);
            return result;
        }
        /// <summary>
        /// 店长授权
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Authorization")]
        [HttpPost]
        public object Authorization(AuthorizationRequest requestParams)
        {
            if (Salesclerk.VerfyStoreManagerOperateAuth(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Password))
            {
                return null;
            }
            throw new PosException("400", "密码错误，授权失败！");
        }

        /// <summary>
        /// 获取会员信息
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("SetMember")]
        [HttpPost]
        public MemberInfo SetMember(SetMemberRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            var memnerInfo = shoppingcart.SetMember(requestParams.CardNo, requestParams.Phone, requestParams.To);
            return memnerInfo;
        }
        [Route("SetActivityId")]
        [HttpPost]
        public object SetActivityId(SetActivityRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            shoppingcart.SetActivityId(requestParams.ActivityId);
            return null;
        }
        /// <summary>
        /// 门店产品分类
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("GetProductCategory")]
        [HttpPost]
        public Category GetProductCategory(CategoryRequest requestParams)
        {
            return new CategoryTree().GetCategoryTree(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, DataAdapterFactory.DEFUALT);
        }
        /// <summary>
        /// 出入款
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("PosIncomePayout")]
        [HttpPost]
        public object PosIncomePayout(PosIncomePayoutRequest requestParams)
        {
            // var salesclerk = new Salesclerk();
            Salesclerk.PosIncomePayout(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.UserCode, requestParams.Password, requestParams.Money, requestParams.Type);
            return null;
        }
        /// <summary>
        /// 挂单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("HandBill")]
        [HttpPost]
        public OrdersDetails HandBill([FromBody] HandBillRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            SaleSuspend.Suspend(shoppingcart);
            var result = new OrdersDetails()
            {
                BuyList = shoppingcart.GetBuyList(),
                Gifts = new List<GiftResult>(),
                Statistics = shoppingcart.GetSaleStatistics()
            };
            return result;
        }
        /// <summary>
        /// 读单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("ReadHandBill")]
        [HttpPost]
        public OrdersDetails ReadHandBill([FromBody] HandBillRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            var barcodes = SaleSuspend.Read(shoppingcart, requestParams.OrderSn);
            shoppingcart.RunMarketings();
            var result = new OrdersDetails()
            {
                BuyList = shoppingcart.GetBuyList(),
                Gifts = new List<GiftResult>(),
                Statistics = shoppingcart.GetSaleStatistics()
            };
            return result;
        }
        /// <summary>
        /// 挂单清单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("HandBillList")]
        [HttpPost]
        public SuspendList HandBillList([FromBody] HandBillRequest requestParams)
        {
            return SuspendList.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, MachinesSettings.CachePath);
        }
        /// <summary>
        /// 获取挂单数量
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns></returns>
        [Route("HandBillNum")]
        [HttpPost]
        public int HandBillNum([FromBody] HandBillRequest requestParams)
        {
            var result = SuspendList.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, MachinesSettings.CachePath);
            if (result == null)
                return 0;
            return result.Count;
        }
        /// <summary>
        /// 撤销挂单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("RemoveHandBill")]
        [HttpPost]
        public SuspendList RemoveHandBill([FromBody] HandBillRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            var result = SaleSuspend.Remove(shoppingcart, requestParams.OrderSn);
            return result;
        }
        /// <summary>
        /// 通过日期查找历史订单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("FindBills")]
        [HttpPost]
        public IEnumerable<BillListItem> FindBills([FromBody] FindBillsRequest requestParams)
        {
            return BillHistory.GetBills(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Date, requestParams.Range, requestParams.DeviceSn);
        }

        /// <summary>
        /// 通过流水号查找历史订单
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("FindBillHistory")]
        [HttpPost]
        public BillHistoryInfo FindBillHistory([FromBody] FindBillHistoryRequest requestParams)
        {
            return BillHistory.GetBillDetails(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.PaySn, requestParams.DeviceSn);
        }
        /// <summary>
        /// 获取退换货原因列表
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("GetReason")]
        [HttpPost]
        public IEnumerable<ReasonItem> GetReason([FromBody] ReasonRequest requestParams)
        {
            IEnumerable<ReasonItem> result = null;
            switch (requestParams.Type)
            {
                case 1:
                    result = OrderChangeRefundSale.GetChangeReason(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
                    break;
                case 2:
                    result = OrderChangeRefundSale.GetRefundReason(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
                    break;
                default:
                    throw new PosException("无法获取原因列表！");
            }
            return result;
        }
        /// <summary>
        /// 添加退换货订单数据
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns></returns>
        [Route("AddRefundOrChangeInfo")]
        [HttpPost]
        public object AddRefundOrChangeInfo([FromBody]ChangeRefundRequest requestParams)
        {
            var orderChangeRefund = OrderChangeFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Mode, requestParams.DeviceSn);
            return orderChangeRefund.Add(requestParams.Barcode, requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Status);
        }
        /// <summary>
        /// 编辑退换货商品信息
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns></returns>
        [Route("EditRefundOrChangeInfo")]
        [HttpPost]
        public object EditRefundOrChangeInfo([FromBody]ChangeRefundRequest requestParams)
        {
            var orderChangeRefund = OrderChangeFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Mode, requestParams.DeviceSn);
            return orderChangeRefund.Edit(requestParams.Barcode, requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.ChangeNumber, requestParams.ChangePrice, requestParams.EditIndex);
        }
        /// <summary>
        /// 移除退换货商品信息
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns></returns>
        [Route("RemoveRefundOrChangeInfo")]
        [HttpPost]
        public object RemoveRefundOrChangeInfo([FromBody]ChangeRefundRequest requestParams)
        {
            var orderChangeRefund = OrderChangeFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Mode, requestParams.DeviceSn);
            return orderChangeRefund.Remove(requestParams.Barcode, requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.EditIndex);
        }
        /// <summary>
        /// 清除退换货数据信息
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns></returns>
        [Route("ClearRefundOrChangeInfo")]
        [HttpPost]
        public object ClearRefundOrChangeInfo([FromBody]ChangeRefundRequest requestParams)
        {
            OrderChangeFactory.Disposable(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Mode, requestParams.DeviceSn);
            //var orderChangeRefund = OrderChangeFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Mode);
            //orderChangeRefund.Clear();
            return null;
        }
        /// <summary>
        /// 清除退换货数据信息
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns></returns>
        [Route("SetSaleMan")]
        [HttpPost]
        public string SetSaleMan([FromBody]SetSaleManRequest requestParams)
        {
            var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
            return shoppingcart.SetSaleMan(requestParams.SaleMan);
        }
        /// <summary>
        /// 退换货无需支付时保存数据
        /// </summary>
        /// <returns></returns>
        [Route("NoNeedPaySave")]
        [HttpPost]
        public object NoNeedPaySave([FromBody]RefundRequest requestParams)
        {
            var orderChangeRefund = OrderChangeFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Mode, requestParams.DeviceSn);

            orderChangeRefund.SaveRecord(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Reason, requestParams.Amount, requestParams.Amount, null, requestParams.DeviceSn);
            return null;
        }

        /// <summary>
        /// 整单退出（退单）
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("RefundAll")]
        [HttpPost]
        public object RefundAll([FromBody] RefundRequest requestParams)
        {
            OrderChangeRefundSale.RefundAll(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Reason, requestParams.PaySn, requestParams.Amount, requestParams.DeviceSn);
            return null;
        }
        /// <summary>
        /// 支付
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("Pay")]
        [HttpPost]
        public object Pay([FromBody] PayRequest requestParams)
        {
            if (requestParams == null || requestParams.Payway == null || requestParams.Payway.Count() == 0)
            {
                throw new PosException("未知支付方式！");
            }
            PayMode payMode;
            if (requestParams.Payway.Count() > 1)
            {
                payMode = PayMode.Multiply;

            }
            else
            {
                payMode = (PayMode)requestParams.Payway.FirstOrDefault().Type;
            }

            Dictionary<PayMode, PayDetails> payway = new Dictionary<PayMode, PayDetails>();
            IPay pay;
            switch (requestParams.Mode)
            {
                case PayAction.Change://换货支付
                    // var paySn = Pharos.Logic.ApiData.Pos.Common.PaySn.New();
                    var orderChangeRefund = OrderChangeFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, AfterSaleMode.Changing, requestParams.DeviceSn);
                    foreach (var item in requestParams.Payway)
                    {
                        payway.Add((PayMode)item.Type, new PayDetails()
                        {
                            Amount = item.Amount,
                            ApiOrderSn = null,
                            MachineSn = requestParams.MachineSn,
                            StoreId = requestParams.StoreId,
                            PaySn = orderChangeRefund.PaySn,
                            CardNo = item.CardNo,
                            CompanyToken = requestParams.CompanyToken,
                            WipeZero = item.WipeZero,
                            Change = item.Change,
                            Receive = item.Receive
                        });
                    }
                    pay = PaymentFactory.Factory(payMode, payway, requestParams.Receivable, (o) =>
                    {
                        orderChangeRefund.SaveRecord(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.Reason, requestParams.OrderAmount, requestParams.Receivable, o, requestParams.DeviceSn);
                    });
                    if (pay is IThirdPartyPayment)//处理第三方支付
                    {
                        var thirdPartyPayment = pay as IThirdPartyPayment;
                        return new { Url = thirdPartyPayment.RequestPay(), PaySN = orderChangeRefund.PaySn };
                    }
                    else if (pay is IThirdPartyPaymentWithoutWait)
                    {
                        var thirdPartyPaymentWithoutWait = pay as IThirdPartyPaymentWithoutWait;
                        return thirdPartyPaymentWithoutWait.RequestPay();
                    }
                    else
                    {
                        pay.SetComplete();
                    }
                    break;
                case PayAction.Sale://销售支付
                    var shoppingcart = ShoppingCartFactory.Factory(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.DeviceSn);
                    var orderList = shoppingcart.GetOrdeList();
                    if (orderList == null && orderList.Count() == 0)
                    {
                        throw new PosException("购物清单为空，不能结算！");
                    }
                    foreach (var item in requestParams.Payway)
                    {
                        payway.Add((PayMode)item.Type, new PayDetails()
                        {
                            Amount = item.Amount,
                            ApiOrderSn = null,
                            MachineSn = requestParams.MachineSn,
                            StoreId = requestParams.StoreId,
                            PaySn = shoppingcart.OrderSN,
                            CardNo = item.CardNo,
                            CompanyToken = requestParams.CompanyToken,
                            WipeZero = item.WipeZero
                        });
                    }
                    pay = PaymentFactory.Factory(payMode, payway, requestParams.Receivable, (o) =>
                    {
                        shoppingcart.Record(o.ApiCodes, requestParams.OrderAmount, requestParams.Receivable, requestParams.DeviceSn);
                    });
                    if (pay is IThirdPartyPayment)//处理第三方支付
                    {
                        var thirdPartyPayment = pay as IThirdPartyPayment;
                        return new { Url = thirdPartyPayment.RequestPay(), PaySN = shoppingcart.OrderSN };
                    }
                    else if (pay is IThirdPartyPaymentWithoutWait)
                    {
                        var thirdPartyPaymentWithoutWait = pay as IThirdPartyPaymentWithoutWait;
                        return thirdPartyPaymentWithoutWait.RequestPay();
                    }
                    else
                    {
                        pay.SetComplete();
                    }
                    break;
            }
            return null;
        }
        /// <summary>
        /// 获取第三方支付状态
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("ThirdPartyPaymentStatus")]
        [HttpPost]
        public ThirdPartyPaymentStatus ThirdPartyPaymentStatus([FromBody] ThirdPartyPaymentRequest requestParams)
        {
            var pay = ThirdPartyPaymentManager.Find(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.PaySn, requestParams.Mode);
            var result = pay.GetPayStatus();
            return result;
        }

        /// <summary>
        /// 设置第三方支付完成
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("SetThirdPartyPaymentComplete")]
        [HttpPost]
        public object SetThirdPartyPaymentComplete([FromBody] ThirdPartyPaymentRequest requestParams)
        {
            var pay = ThirdPartyPaymentManager.Find(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, requestParams.PaySn, requestParams.Mode);
            pay.SetComplete();
            return null;
        }
        /// <summary>
        /// 获取所有支付方式状态及图标
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("PaysStatus")]
        [HttpPost]
        public IEnumerable<IPay> PaysStatus([FromBody] PaysStatusRequest requestParams)
        {
            return PaymentFactory.GetPaysStatus(requestParams.StoreId, requestParams.CompanyToken);
        }
        /// <summary>
        /// 日结/月结(从每月1日开始计算)
        /// </summary>
        /// <param name="requestParams">请求参数</param>
        /// <returns>返回结果</returns>
        [Route("DayReport")]
        [HttpPost]
        public DayReportResult DayReport([FromBody]DayReportRequest requestParams)
        {
            DateTime date = requestParams.Date.Date;
            DateTime endDate = date.AddDays(1);
            if (requestParams.Mode == Mode.Month)
            {
                date = new DateTime(requestParams.Date.Year, requestParams.Date.Month, 1);
                endDate = date.AddMonths(1);
            }
            WarehouseManager manager = new WarehouseManager();
            return manager.DayMonthReport(requestParams.StoreId, requestParams.MachineSn, requestParams.CompanyToken, date, endDate, requestParams.Range, requestParams.DeviceSn);

        }
        /// <summary>
        /// APP icon 和公司信息
        /// </summary>
        /// <returns>返回结果</returns>
        [Route("AppInfo")]
        [HttpPost]
        public object AppInfo()
        {
            var result = new
            {
                FullName = ConfigurationManager.AppSettings["FullName"],
                Name = ConfigurationManager.AppSettings["Name"],
                IconUrl = ConfigurationManager.AppSettings["IconUrl"],
                AppVersion = ConfigurationManager.AppSettings["AppVersion"]
            };
            return result;
        }
        /// <summary>
        /// 获取促销信息的缓存信息
        /// </summary>
        /// <param name="requestParams"></param>
        /// <returns></returns>
        [Route("GetMarketingInfo")]
        [HttpPost]
        public object GetMarketingInfo([FromBody] BaseApiParams requestParams)
        {
            var _info = StoreManager.GetMarketing(requestParams.CompanyToken, requestParams.StoreId);
            return _info.RunningStates();
        }
    }

}