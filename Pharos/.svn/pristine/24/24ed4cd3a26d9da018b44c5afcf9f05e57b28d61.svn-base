using Pharos.Logic.ApiData.Pos.Common;
using Pharos.Logic.ApiData.Pos.DataAdapter;
using Pharos.Logic.ApiData.Pos.Sale.Suspend;
using Pharos.Logic.ApiData.Pos.ValueObject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace Pharos.Logic.ApiData.Pos.Cache
{
    public class ProductCache
#if(Local)
        : MemoryCacheWrapper<ProductInfo>
#endif
#if(Local!= true)
 : RedisCacheWrapper<ProductInfo>
#endif
    {
        public ProductCache()
            : base("ProductCache", new TimeSpan(2, 0, 0), true)
        {
        }



        public void RefreshProduct(int companyId, MemoryCacheRefreshQuery _params)
        {
            var storeIds = _params.StoreId.Split(",".ToArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var storeId in storeIds)
            {
                var key = KeyFactory.ProductKeyFactory(companyId, storeId, _params.Barcode);
                RefreshProduct(key, companyId, _params, _params.StoreId, Get(key));
            }
        }
        /// <summary>
        /// 重置缓存中的产品信息
        /// </summary>
        /// <param name="key"></param>
        /// <param name="companyId"></param>
        /// <param name="barcode"></param>
        /// <param name="storeId"></param>
        private void RefreshProduct(string key, int companyId, MemoryCacheRefreshQuery _params, string storeId, ProductInfo info)
        {
            try
            {
                var product = Get(key);
                //缓存中不存在符合条件的数据从数据库中查找
                var dataAdapter = DataAdapterFactory.DbFactory(MachinesSettings.Mode, storeId, DataAdapterFactory.DEFUALT, companyId, DataAdapterFactory.DEFUALT);

                ProductInfo result = null;
                switch (_params.ProductType)
                {
                    case Sale.ProductType.Bundling:
                        result = dataAdapter.GetProductInfoFromBundlingByBarcode(_params.Barcode);
                        break;
                    default:
                        result = dataAdapter.GetProductInfoByBarcode(_params.Barcode);
                        break;
                }
                //加到缓存中
                if (result != null)
                    DataAdapterFactory.ProductCache.Set(key, result);
            }
            catch { }
        }
    }
}