using Pharos.Logic.ApiData.Pos.DataAdapter;
using Pharos.Logic.ApiData.Pos.Sale.Marketings;
using Pharos.Logic.ApiData.Pos.ValueObject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.ApiData.Pos.Extensions;
using System.Web;
using System.Threading.Tasks;
using System.Threading;
using Pharos.Logic.ApiData.Pos.Exceptions;

namespace Pharos.Logic.ApiData.Pos
{
    public static class StoreManager
    {
        public static bool IsRunning = false;
        private static readonly string KeyFormat = "{0}*-*{1}";

        private static readonly IDictionary<string, MarketingManager> MarketingCaches = new Dictionary<string, MarketingManager>();

        public static string GetKey(int token, string storeId)
        {
            var key = string.Format(KeyFormat, token, storeId);
            return key;
        }

#if (Local !=true)
        public static void InitStores(bool isRestart = false)
        {
            if (!isRestart && IsRunning)
            {
                return;
            }
            IsRunning = true;
            var stores = DataAdapterFactory.DefualtDataAdapter.GetWarehouseInformations();
            foreach (var item in stores)
            {
                SetUpStore(item.CompanyToken, item.StoreId);
            }
            Task.Factory.StartNew(() =>
            {
                Thread.Sleep(new TimeSpan(24, 0, 0));
                InitStores(true);
            });
        }
#endif
        public static void SetUpStore(int token, string storeId)
        {
            var key = GetKey(token, storeId);
            MarketingManager marketingManager = new MarketingManager(storeId, token);
            if (MarketingCaches.ContainsKey(key))
            {
                MarketingCaches.Remove(key);
            }
            MarketingCaches.Add(key, marketingManager);
        }

        public static MarketingManager GetMarketing(int token, string storeId)
        {
            var key = GetKey(token, storeId);
            if (MarketingCaches.ContainsKey(key))
                return MarketingCaches[key];
            else
                throw new PosException("门店尚未初始化！");
        }
    }
}
