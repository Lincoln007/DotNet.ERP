using Pharos.Logic.ApiData.Pos.DAL;
using Pharos.Logic.DAL;
using Pharos.SyncService.Exceptions;
using Pharos.SyncService.SyncEntities;
using System;
using System.Collections.Generic;
using System.Linq;
using Pharos.SyncService.Helpers;
using System.Text;

namespace Pharos.SyncService.RemoteDataServices
{
    public class CommodityPromotionBlendPackageRemoteService : ISyncDataService
    {
        public Microsoft.Synchronization.SyncDirectionOrder SyncDirectionOrder
        {
            get { return Microsoft.Synchronization.SyncDirectionOrder.Download; }
        }

        public IEnumerable<ISyncDataObject> GetSyncObjects(int companyId, string storeId)
        {
            try
            {
                using (var db = SyncDbContextFactory.Factory<EFDbContext>())
                {
                    //PromotionType 1:单品折扣、 2:捆绑促销、 3:组合促销、4:买赠促销、 5:满元促销
                    var promotionTypes = new int[2] { 3, 5 };
                    var commodity = db.CommodityPromotions.Where(o => promotionTypes.Contains(o.PromotionType) && o.CompanyId == companyId && ("," + o.StoreId + ",").Contains("," + storeId + ",")).ToList();
                    List<SyncDataPackage> result = new List<SyncDataPackage>();

                    foreach (var item in commodity)
                    {
                        var package = GetVersion(item, companyId, storeId, db);
                        result.Add(package);
                    }
                    return result;
                }
            }
            catch
            {
                return new List<ISyncDataObject>();
            }
        }
        private SyncDataPackage GetVersion(Pharos.Logic.Entity.CommodityPromotion item, int companyId, string storeId, EFDbContext db)
        {
            var package = new SyncDataPackage() { SyncItemId = item.SyncItemId, EntityType = "CommodityBlendPackage" };
            package.Items.Add(new SyncDataPackageItem() { SyncItemId = item.SyncItemId, EntityType = typeof(CommodityPromotion).ToString(), SyncItemVersion = item.SyncItemVersion });

            var commdity = db.CommodityPromotions.Where(o => o.CompanyId == companyId && ("," + o.StoreId + ",").Contains("," + storeId + ",") && o.PromotionType == 1).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(CommodityPromotion).ToString()
            }).ToList();
            package.Items.AddRange(commdity);
            var commdity_promotionBlend = db.PromotionBlends.Where(o => o.CompanyId == companyId && o.CommodityId == item.Id).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(PromotionBlend).ToString()
            }).ToList();
            package.Items.AddRange(commdity_promotionBlend);
            var promotionBlendList = db.PromotionBlendLists.Where(o => o.CommodityId == item.Id).ToList().Select(o => new SyncDataPackageItem()
            {
                SyncItemVersion = o.SyncItemVersion,
                SyncItemId = o.SyncItemId,
                EntityType = typeof(PromotionBlendList).ToString()
            }).ToList();
            package.Items.AddRange(promotionBlendList);
            return package;
        }

        public ISyncDataObject GetItem(Guid guid, int companyId, string storeId)
        {
            using (var db = SyncDbContextFactory.Factory<EFDbContext>())
            {
                var commodits = db.CommodityPromotions.Where(o => o.SyncItemId == guid).ToList();
                var commodit = commodits.FirstOrDefault();
                var promotionBlend = db.PromotionBlends.Where(o => o.CommodityId == commodit.Id).ToList();
                var promotionBlendList = db.PromotionBlendLists.Where(o => o.CommodityId == commodit.Id).ToList();
                var package = new Package() { SyncItemId = guid, EntityType = "CommodityBlendPackage" };
                package.Init(commodits.Select(o => new CommodityPromotion().InitEntity(o)).ToList());
                package.Init(promotionBlend.Select(o => new PromotionBlend().InitEntity(o)).ToList());
                package.Init(promotionBlendList.Select(o => new PromotionBlendList().InitEntity(o)).ToList());
                return package;
            }
        }

        public byte[] CreateItem(ISyncDataObject data, Guid guid, int companyId, string storeId)
        {
            throw new SyncException("组合促销设定不允许修改远程数据");

        }

        public byte[] UpdateItem(Guid guid, ISyncDataObject mergedData, int companyId, string storeId)
        {
            throw new SyncException("组合促销设定不允许修改远程数据");

        }

        public void DeleteItem(Guid syncItemId, int companyId, string storeId)
        {
            throw new SyncException("组合促销设定不允许删除远程数据");
        }

        public ISyncDataObject Merge(ISyncDataObject syncDataObject1, ISyncDataObject syncDataObject2, int companyId, string storeId)
        {
            throw new NotImplementedException();
        }
    }
}
