using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using Pharos.Logic.Entity;
using Pharos.Utility;
using Pharos.Utility.Helpers;
using Pharos.Sys.BLL;
using System.Web;
using Pharos.Logic.DAL;
namespace Pharos.Logic.BLL
{
    public class TakeStockService : BaseService<StockTaking>
    {
        readonly static CommonDAL dal = new CommonDAL();
        public static DataTable FindPageList(System.Collections.Specialized.NameValueCollection nvl, out int recordCount,bool ispage=true)
        {
            return dal.FindTakeStockPages(nvl,out recordCount, ispage);
            /*var storeId = nvl["storeId"];
            var userId = nvl["userId"];
            var date1 = nvl["date1"].IsNullOrEmpty()?new Nullable<DateTime>():DateTime.Parse(nvl["date1"]);
            var date2 = nvl["date2"].IsNullOrEmpty()?new Nullable<DateTime>():DateTime.Parse(nvl["date2"]).AddDays(1);
            var searchText = nvl["searchText"];
            var express = DynamicallyLinqHelper.True<TreasuryLocks>().And(o => o.LockStoreID == storeId, storeId.IsNullOrEmpty())
                .And(o => o.LockDate >= date1, !date1.HasValue).And(o => o.LockDate < date2, !date2.HasValue);
            var queryLock = BaseService<TreasuryLocks>.CurrentRepository.QueryEntity.Where(express);
            var queryWare = WarehouseService.CurrentRepository.QueryEntity;
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
            var queryStock= CurrentRepository.QueryEntity;
            if (!userId.IsNullOrEmpty())
                queryStock = queryStock.Where(o => o.CheckUID == userId);
            var queryUser = UserInfoService.CurrentRepository.QueryEntity;
            var query = from a in queryStock
                        join b in queryLock on a.CheckBatch equals b.CheckBatch
                        join c in queryWare on b.LockStoreID equals c.StoreId
                        join d in queryProduct on a.Barcode equals d.Barcode
                        join e in queryUser on a.CheckUID equals e.UID into g
                        join e in queryUser on a.CreateUID equals e.UID into h
                        from f in g.DefaultIfEmpty()
                        from y in h.DefaultIfEmpty()
                        let o=from x in BaseService<StockTakingLog>.CurrentRepository.QueryEntity where x.CheckBatch==a.CheckBatch && x.Barcode==a.Barcode && x.State==0 select (decimal?)x.Number
                        where b.State==0
                        select new
                        {
                            a.Id,
                            b.CheckBatch,
                            StoreTitle = c.Title,
                            b.LockDate,
                            d.ProductCode,
                            d.Barcode,
                            d.Title,
                            d.BrandTitle,
                            d.SubUnit,
                            ActualNumber=a.ActualNumber??o.Sum(),
                            f.FullName,
                            CreateName=y.FullName,
                            d.CategorySN,
                            a.LockNumber
                        };
            if(!searchText.IsNullOrEmpty())
                query=query.Where(o=>(o.CheckBatch.StartsWith(searchText) || o.Barcode.StartsWith(searchText) || o.Title.Contains(searchText)));
            var ls = new List<object>();
            recordCount = 0;
            if (ispage)
            {
                recordCount = query.Count();
                var list = query.ToPageList();
                ls.AddRange(list);
            }
            else
            {
                ls.AddRange(query.ToList());
            }
            return ls;*/
        }
        public static object FindStockList(string storeId, string batch)
        {
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity.Where(o=>o.CompanyId==CommonService.CompanyId);
            var queryLock = BaseService<TreasuryLocks>.CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId);
            var query = from a in CurrentRepository.QueryEntity
                        join b in queryLock on a.CheckBatch equals b.CheckBatch
                        join d in queryProduct on a.Barcode equals d.Barcode
                        where a.CheckBatch == batch && b.LockStoreID == storeId && a.CompanyId==CommonService.CompanyId           
                        orderby d.CategorySN ascending
                        select new
                        {
                            a.Id,
                            a.Barcode,
                            d.Title,
                            d.SubUnit,
                            a.ActualNumber,
                            a.LockNumber
                        };
            var list = query.ToList();
            return list;
        }
        public static object FindBarcodesByBatch(string batch,short containReTake=0)
        {
            if (containReTake == 0)
            {
                var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity.Where(o=>o.CompanyId==CommonService.CompanyId);
                var queryLog = BaseService<StockTakingLog>.CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId);
                var query = from a in CurrentRepository.QueryEntity
                            join d in queryProduct on a.Barcode equals d.Barcode
                            let o = from e in queryLog where a.CheckBatch == e.CheckBatch && a.Barcode == e.Barcode && e.State == 1 select e.Barcode
                            where a.CheckBatch == batch && !o.Contains(a.Barcode) && a.CompanyId==CommonService.CompanyId
                            orderby d.CategorySN ascending
                            select new
                            {
                                a.Id,
                                a.Barcode,
                                d.Title,
                                d.SubUnit,
                                a.ActualNumber,
                                a.LockNumber
                            };
                var list = query.ToList();
                return list;
            }
            else
            {
                var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId);
                var query = from a in CurrentRepository.QueryEntity
                            join d in queryProduct on a.Barcode equals d.Barcode
                            where a.CheckBatch == batch && a.CompanyId==CommonService.CompanyId
                            orderby d.CategorySN ascending
                            select new
                            {
                                a.Id,
                                a.Barcode,
                                d.Title,
                                d.SubUnit,
                                a.ActualNumber,
                                a.LockNumber
                            };
                var list = query.ToList();
                return list;
            }
        }
        public static object FindStockLogList(string batch)
        {
            if (batch.IsNullOrEmpty()) return null;
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity.Where(o=>o.CompanyId==CommonService.CompanyId);
            var queryLog = BaseService<StockTakingLog>.CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId);
            var queryUser = UserInfoService.CurrentRepository.QueryEntity.Where(o => o.CompanyId == CommonService.CompanyId);
            var query = 
                        from b in queryLog
                        join d in queryProduct on b.Barcode equals d.Barcode
                        join e in queryUser on b.CheckUID equals e.UID into h
                        from f in h.DefaultIfEmpty()
                        where b.CheckBatch == batch
                        orderby b.Id ascending
                        select new
                        {
                            b.Id,
                            b.Barcode,
                            d.Title,
                            d.SubUnit,
                            b.Number,
                            b.CheckUID,
                            b.CreateDT,
                            f.FullName,
                            b.State
                        };
            var list = query.ToList();
            return list;
        }
        public static OpResult AddStockLock(TreasuryLocks obj)
        {
            var op = new OpResult();
            try
            {
                obj.LockStoreID.IsNullThrow();
                var xh = obj.CheckBatch.Substring(obj.CheckBatch.Length - 2);
                if(int.Parse(xh)>20)
                {
                    op.Message = "每月最多只能锁定20次"; return op;
                }
                List<int> childsns = null;
                if(!obj.LockCategorySN.IsNullOrEmpty())
                {
                    var parsns=obj.LockCategorySN.Split(',').Select(o=>int.Parse(o)).ToList();
                    childsns = ProductCategoryService.GetChildSNs(parsns,true);
                }
                else
                {
                    var ware = WarehouseService.Find(o => o.StoreId == obj.LockStoreID && o.CompanyId==CommonService.CompanyId);
                    var parsns = ware.CategorySN.Split(',').Where(o => !o.IsNullOrEmpty()).Select(o => int.Parse(o)).ToList();
                    childsns = ProductCategoryService.GetChildSNs(parsns);
                }
                var barcodes = ProductService.FindList(o => childsns.Contains(o.CategorySN) && o.CompanyId == CommonService.CompanyId).Select(o => o.Barcode).Distinct().ToList();
                //var commoditys = CommodityService.FindList(o => o.StoreId == obj.LockStoreID && barcodes.Contains(o.Barcode));
                //var commoditys = BaseService<Inventory>.FindList(o => o.StoreId == obj.LockStoreID && barcodes.Contains(o.Barcode));
                //var lastDate=DateTime.Now.AddDays(-1);
                //var commoditys = BaseService<InventoryBalance>.FindList(o => o.StoreId == obj.LockStoreID && barcodes.Contains(o.Barcode) && o.BalanceDate >= lastDate).OrderByDescending(o => o.BalanceDate);//取结余
                var commoditys = dal.GetInventoryBalanceLast(obj.LockStoreID, string.Join(",", barcodes));
                if (!commoditys.Any())
                    op.Message = "该门店暂无库存信息";
                else
                {
                    obj.LockDate = DateTime.Now;
                    obj.LockUID = Sys.CurrentUser.UID;
                    obj.CompanyId = CommonService.CompanyId;
                    var stocks = new List<StockTaking>();
                    foreach (var commod in commoditys)
                    {
                        if (stocks.Any(o => o.Barcode == commod.Barcode)) continue;
                        stocks.Add(new StockTaking() {
                            Barcode = commod.Barcode,
                            LockNumber = commod.Number,
                            CheckBatch = obj.CheckBatch,
                            CreateDT = obj.LockDate,
                            CreateUID = obj.LockUID,
                            CompanyId = obj.CompanyId
                        });
                    }
                    BaseService<TreasuryLocks>.Add(obj, false);
                    op = AddRange(stocks);
                }
            }
            catch (Exception ex)
            {
                op.Message = ex.Message;
                Log.WriteError(ex);
            }
            return op;
        }
        public static OpResult SaveOrUpdate(TreasuryLocks obj)
        {
            var op = new OpResult();
            try
            {
                obj.Updated.IsNullThrow("无录入操作!");
                var updateStocks = obj.Updated.ToObject<List<StockTakingLog>>().Where(o=>!o.Barcode.IsNullOrEmpty());
                if (!updateStocks.Any()) throw new Exception("无录入操作!");
                //var ids=updateStocks.Select(o=>o.Id).ToList();
                var barcodes = updateStocks.Select(o => o.Barcode).ToList();
                var stocks = FindList(o => barcodes.Contains(o.Barcode) && o.CheckBatch==obj.CheckBatch && o.CompanyId==CommonService.CompanyId);
                //var commoditys= CommodityService.FindList(o => o.StoreId == obj.LockStoreID && barcodes.Contains(o.Barcode));
                var errls = new Dictionary<int, string>();
                var stocklogs = BaseService<StockTakingLog>.FindList(o => barcodes.Contains(o.Barcode) && o.CheckBatch == obj.CheckBatch && o.State == 1 && o.CompanyId == CommonService.CompanyId);
                var insertLog = new List<StockTakingLog>();
                foreach (var up in updateStocks)
                {
                    var sk = stocks.FirstOrDefault(o => o.Barcode == up.Barcode);
                    up.CreateUID = Sys.CurrentUser.UID;
                    up.CheckBatch = obj.CheckBatch;
                    up.CreateDT = DateTime.Now;
                    up.CompanyId = CommonService.CompanyId;
                    if (sk == null)
                    {
                        errls.Add(up.Id, up.Barcode + "&nbsp;&nbsp;条码不存在");
                        continue;
                    }
                    if (stocklogs.Any(o=>o.Barcode==up.Barcode) && up.State==0)//复盘不验证
                    {
                        errls.Add(up.Id, up.Barcode + "&nbsp;&nbsp;条码已复盘");
                        continue;
                    }
                    //sk.LockNumber = commoditys.Where(o => o.Barcode == up.Barcode).Sum(o => o.StockNumber);
                    //sk.ActualNumber = up.Number;
                    //sk.CheckUID = up.CheckUID;
                    //sk.CreateUID = Sys.CurrentUser.UID;
                    insertLog.Add(up);
                }
                //if(stocks.Any()) Update(stocks,false);
                op = BaseService<StockTakingLog>.AddRange(insertLog);
                op.Data = errls;
            }
            catch (Exception ex)
            {
                op.Message = ex.Message;
                Log.WriteError(ex);
            }
            return op;
        }
        public static OpResult ReSave(StockTaking obj)
        {
            var op=new OpResult();
            var stock = CurrentRepository.FindById(obj.Id);
            stock.ActualNumber = obj.ActualNumber;
            stock.CreateUID = Sys.CurrentUser.UID;
            var CheckUID=HttpContext.Current.Request["CheckUID"];
            var log = new StockTakingLog() {
                Barcode = stock.Barcode,
                CheckBatch = stock.CheckBatch,
                CheckUID = CheckUID,
                CreateUID=stock.CreateUID,
                CreateDT=DateTime.Now,
                Number=stock.ActualNumber.GetValueOrDefault(),
                State=1,
                CompanyId=CommonService.CompanyId
            };
            op = BaseService<StockTakingLog>.Add(log);
            return op;
        }
        public static OpResult CrrectSave(int id, decimal crrectNumber)
        {
            var stock = FindById(id);
            stock.CorrectNumber = crrectNumber;
            return Update(stock);
        }
        public static OpResult ApprovalPass(string checkBatch)
        {
            var op = new OpResult();
            var tl = BaseService<TreasuryLocks>.Find(o => o.CheckBatch == checkBatch && o.CompanyId==CommonService.CompanyId);
            if (tl.State == 1)
            {
                op.Message = "该批次已审核";
                return op;
            }
            tl.State = 1;
            //var stocks= FindList(o => o.CheckBatch == checkBatch && o.CorrectNumber.HasValue);//经过纠正记录
            var nvl= new System.Collections.Specialized.NameValueCollection();
            nvl.Add("checkBatch", checkBatch);
            nvl.Add("dispType", "1");
            nvl.Add("state", "0");
            int count=0;
            var dt= dal.FindTakeStockPages(nvl, out count, false);
            var logs = new List<InventoryRecord>();
            if (dt!=null && dt.Rows.Count>0)
            {
                 //var barcodes = dt.AsEnumerable().Select(o => o["barcode"].ToString()).ToList();
                 //var invents = BaseService<Inventory>.FindList(o => barcodes.Contains(o.Barcode) && o.StoreId == tl.LockStoreID && o.CompanyId == CommonService.CompanyId);
                //var commoditys = dal.GetInventoryBalanceLast(tl.LockStoreID, string.Join(",", barcodes));
                foreach (DataRow dr in dt.Rows)
                {
                    var barcode= dr["Barcode"].ToString();
                    var actualNumber = (decimal)dr["ActualNumber"];//盘点数量
                    //var iy = invents.FirstOrDefault(o => o.Barcode == barcode);
                    //decimal number = 0;
                    //var commd= commoditys.FirstOrDefault(o => o.Barcode == barcode);
                    //if (commd != null) number = commd.Number;
                    //if (iy == null)
                    //{
                    //    iy=new Inventory()
                    //    {
                    //        StoreId = tl.LockStoreID,
                    //        Barcode = barcode,
                    //        StockNumber = actualNumber,
                    //        CompanyId=CommonService.CompanyId
                    //    };
                    //    BaseService<Inventory>.Add(iy, false);
                    //}
                    //else
                    //{
                    //    iy.StockNumber = actualNumber;
                    //}
                    logs.Add(new InventoryRecord()
                    {
                        Barcode = barcode,
                        CreateDT = DateTime.Now,
                        CreateUID = Sys.CurrentUser.UID,
                        Number =actualNumber, //actualNumber - number,
                        StoreId = tl.LockStoreID,
                        Source = 15,
                        CompanyId=CommonService.CompanyId
                    });
                }
            }
            op=BaseService<TreasuryLocks>.Update(tl);
            if (op.Successed)
                InventoryRecordService.SaveLog(logs);
            return op;
        }
        public static object GetObjByid(int id)
        {
            /*var queryLock = BaseService<TreasuryLocks>.CurrentRepository.QueryEntity;
            var queryWare = WarehouseService.CurrentRepository.QueryEntity;
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
            var queryUser = UserInfoService.CurrentRepository.QueryEntity;
            var query = from a in CurrentRepository.QueryEntity
                        join b in queryLock on a.CheckBatch equals b.CheckBatch
                        join c in queryWare on b.LockStoreID equals c.StoreId
                        join d in queryProduct on a.Barcode equals d.Barcode
                        where a.Id==id
                        select new
                        {
                            a.Id,
                            StoreTitle = c.Title,
                            b.LockStoreID,
                            b.LockDate,
                            a.CheckBatch,
                            d.Barcode,
                            d.Title,
                            d.SubUnit,
                            a.ActualNumber
                        };
            return query.FirstOrDefault();*/
            var nl = new System.Collections.Specialized.NameValueCollection();
            nl.Add("id", id.ToString());
            int count=0;
            var dt= dal.FindTakeStockPages(nl, out count);
            var obj= dt.AsEnumerable().Select(dr => new { 
                Id=dr["Id"],
                StoreTitle = dr["StoreTitle"],
                LockStoreID = dr["LockStoreID"],
                LockDate = dr["LockDate"],
                CheckBatch = dr["CheckBatch"],
                Barcode = dr["Barcode"],
                Title = dr["Title"],
                SubUnit = dr["SubUnit"],
                ActualNumber = dr["ActualNumber"],
                LockNumber = dr["LockNumber"],
                CheckUID = dr["CheckUID"],
                FullName = dr["FullName"],
                CorrectNumber = dr["CorrectNumber"]
            }).FirstOrDefault();
            return obj;
        }
        /// <summary>
        /// 获取批次
        /// </summary>
        /// <param name="storeId">门店</param>
        /// <returns></returns>
        public static string GetBatchAndCategory(string storeId)
        {
            var obj = WarehouseService.Find(o => o.StoreId == storeId && o.CompanyId==CommonService.CompanyId);
            var prefix = obj.StoreId.PadLeft(2,'0') + DateTime.Now.ToString("yyMMdd");
            var max = BaseService<TreasuryLocks>.CurrentRepository.QueryEntity.Where(o => o.CheckBatch.StartsWith(prefix) && o.CompanyId == CommonService.CompanyId).Max(o => o.CheckBatch);

            var sns = obj.CategorySN.Split(',').Where(o => !o.IsNullOrEmpty()).Select(o => int.Parse(o)).ToList();
            var items = ProductCategoryService.FindList(o => sns.Contains(o.CategorySN) && o.State == 1).Select(o => new DropdownItem(o.CategorySN.ToString(), o.Title)).ToList();
            items.Insert(0, new DropdownItem("", "全部"));
            int num = 1;
            if (!max.IsNullOrEmpty())
                num = int.Parse(max.Replace(prefix, "")) + 1;
            var msg = new Pharos.Logic.DAL.CommonDAL().StockLockValidMsg(storeId);
            var item=new { batch=prefix + num.ToString("00"),items=items,msg=msg};
            return item.ToJson();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="httpFiles"></param>
        /// <param name="codeCol">条码列</param>
        /// <param name="countCol">实盘列</param>
        /// <param name="minRow">起始行</param>
        /// <param name="maxRow">截止行</param>
        /// <returns></returns>
        public static OpResult Import(TreasuryLocks obj, System.Web.HttpFileCollectionBase httpFiles, char codeCol, char countCol, int minRow, int maxRow,int headerRow,string checkUID)
        {
            var op = new OpResult();
            try
            {
                if (httpFiles.Count <= 0 || httpFiles[0].ContentLength <= 0)
                {
                    op.Message = "请先选择Excel文件";
                    return op;
                }
                var stream = httpFiles[0].InputStream;
                var ext= httpFiles[0].FileName.Substring(httpFiles[0].FileName.LastIndexOf("."));
                if(!(ext.Equals(".xls",StringComparison.CurrentCultureIgnoreCase) || 
                    ext.Equals(".xlsx",StringComparison.CurrentCultureIgnoreCase)))
                {
                    op.Message = "请先选择Excel文件";
                    return op;
                }
                obj.CompanyId = CommonService.CompanyId;
                var dt = new ExportExcel().ToDataTable(stream, minRow: minRow, maxRow: maxRow,headerRow:headerRow);
                var codeIdx = Convert.ToInt32(codeCol)-65;
                var countIdx = Convert.ToInt32(countCol) - 65;
                var stocks=new List<StockTakingLog>();
                var errLs = new Dictionary<int,string>();
                int idx = 1;
                foreach(DataRow dr in dt.Rows)
                {
                    idx++;
                    string barcode = "", number="";
                    try
                    {
                        barcode = dr[codeIdx].ToString();
                        number = dr[countIdx].ToString();
                    }
                    catch (Exception)
                    {
                        throw new Exception("列选择超过范围!");
                    }
                    if (number.IsNullOrEmpty() && barcode.IsNullOrEmpty())
                    {
                        continue;
                    }
                    if(number.IsNullOrEmpty() && !barcode.IsNullOrEmpty())
                    {
                        errLs.Add(idx, barcode + "&nbsp;&nbsp;实盘数量为空");
                        continue;
                    }
                    decimal num=0;
                    if (!decimal.TryParse(number, out num) || num < 0)
                    {
                        errLs.Add(idx, barcode + "&nbsp;&nbsp;实盘数量小于零");
                        continue;
                    }
                    if (num == 0) continue;
                    var st= stocks.FirstOrDefault(o=>o.Barcode==barcode);
                    if(st!=null) 
                        st.Number+=num;
                    else
                        stocks.Add(new StockTakingLog()
                        {
                            Id=idx,
                            Barcode=barcode,
                            Number = num,
                            CheckBatch=obj.CheckBatch,
                            CheckUID=checkUID,
                            CreateDT=DateTime.Now,
                            State=0,
                            CompanyId=obj.CompanyId
                        });
                }
                obj.Updated = stocks.ToJson();
                op = SaveOrUpdate(obj);
                var errs=op.Data as Dictionary<int,string>;
                if (errs == null) errs = new Dictionary<int, string>();
                foreach (var de in errs)
                    errLs.Add(de.Key, de.Value);
                if (errLs.Any())
                {
                    var html = "<ul><li>成功导入{0}条数据,余{1}条导入失败!</li><li><a href=\"javascript:void(0)\" onclick=\"viewErr()\">查看失败记录!</a></li></ul>";
                    op.Message = string.Format(html, stocks.Count-errs.Count, errLs.Count);
                    op.Descript = "<dl><dt>以下数据导入失败：</dt>{0}</dl>";
                    string str = "";
                    foreach (var de in errLs)
                    {
                        str += "<dd>行" + de.Key + ":" + de.Value + "</dd>";
                    }
                    op.Descript = string.Format(op.Descript, str);
                }
                else
                    op.Message = "<ul><li>成功导入" + stocks.Count + "条数据!</li></ul>";
                op.Message = System.Web.HttpUtility.UrlEncode(op.Message);
                op.Descript = System.Web.HttpUtility.UrlEncode(op.Descript);
                Log.WriteInsert("盘点导入", Sys.LogModule.库存管理);
            }
            catch(Exception ex)
            {
                op.Message=ex.Message;
                Log.WriteError(ex);
            }
            return op;
        }
        public static DataTable ReportList(System.Collections.Specialized.NameValueCollection nvl, out int recordCount, bool isPage = true)
        {
            return dal.FindTakeStockPages(nvl, out recordCount, isPage);
            /*
            var query = from a in CurrentRepository.Entities
                        join b in BaseService<VwProduct>.CurrentRepository.Entities on a.Barcode equals b.Barcode
                        join c in BaseService<TreasuryLocks>.CurrentRepository.Entities on a.CheckBatch equals c.CheckBatch
                        join d in WarehouseService.CurrentRepository.Entities.DefaultIfEmpty() on c.LockStoreID equals d.StoreId
                        let o = from x in BaseService<StockTakingLog>.CurrentRepository.QueryEntity where x.CheckBatch == a.CheckBatch && x.Barcode == a.Barcode && x.State == 0 select (decimal?)x.Number
                        //where c.State==1
                        orderby c.CheckBatch descending, b.CategorySN ascending
                        select new
                        {
                            a.Id,
                            a.CheckBatch,
                            c.LockStoreID,
                            StoreTitle= d.Title,
                            c.LockDate,
                            Pro=b,
                            a.LockNumber,
                            ActualNumber=a.ActualNumber??o.Sum(),
                            b.SysPrice,
                            BuyTotal="",
                            c.State
                        };
            if (!storeId.IsNullOrEmpty())
                query = query.Where(o => o.LockStoreID == storeId);
            if(!checkBatch.IsNullOrEmpty())
                query = query.Where(o => o.CheckBatch == checkBatch);
            
            if (isPage)
            {
                recordCount = query.Count();
                var list= query.ToPageList();
                ProductService.SetSysPrice(storeId, list.Select(o => o.Pro).ToList());
                return list.Select(o=>new{
                    o.Id,
                    o.CheckBatch,
                    o.LockStoreID,
                    o.StoreTitle,
                    o.LockDate,
                    o.LockNumber,
                    o.ActualNumber,
                    SubstractNum=o.ActualNumber-o.LockNumber,
                    SubstractTotal=(o.ActualNumber-o.LockNumber)*o.Pro.BuyPrice,
                    ActualTotal = o.ActualNumber * o.Pro.SysPrice,
                    o.BuyTotal,
                    o.Pro.State,
                    o.Pro.ProductCode,
                    o.Pro.Barcode,
                    o.Pro.Title,
                    o.Pro.CategoryTitle,
                    o.Pro.SubUnit,
                    o.Pro.Size,
                    o.Pro.SupplierTitle,
                    o.Pro.SysPrice
                });
            }
            else
            {
                recordCount = 0;
                var list= query.Where(o=>o.State==1).ToList();
                ProductService.SetSysPrice(storeId, list.Select(o => o.Pro).ToList());
                return list.Select(o => new
                {
                    o.Id,
                    o.CheckBatch,
                    o.LockStoreID,
                    o.StoreTitle,
                    o.LockDate,
                    o.LockNumber,
                    o.ActualNumber,
                    SubstractNum = o.ActualNumber - o.LockNumber,
                    SubstractTotal = (o.ActualNumber - o.LockNumber) * o.Pro.BuyPrice,
                    ActualTotal = o.ActualNumber * o.Pro.SysPrice,
                    o.BuyTotal,
                    o.Pro.State,
                    o.Pro.ProductCode,
                    o.Pro.Barcode,
                    o.Pro.Title,
                    o.Pro.CategoryTitle,
                    o.Pro.SubUnit,
                    o.Pro.Size,
                    o.Pro.SupplierTitle,
                    o.Pro.SysPrice
                });
            }*/
        }
        class CommodityComp : IEqualityComparer<StockTaking>
        {

            public bool Equals(StockTaking x, StockTaking y)
            {
                return x.Barcode == y.Barcode;
            }

            public int GetHashCode(StockTaking obj)
            {
                return obj.ToString().GetHashCode();
            }
        }
    }
}
