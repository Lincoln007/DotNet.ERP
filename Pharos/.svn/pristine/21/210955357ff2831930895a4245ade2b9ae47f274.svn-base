using Pharos.Logic.Entity;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Data.Entity;
using System.Data;
using Pharos.Utility.Helpers;
using Pharos.Utility;
using Pharos.Logic.ApiData.Mobile.Exceptions;
using Pharos.Logic.ApiData.Mobile.Repository;
namespace Pharos.Logic.BLL
{
    public class NoticeService : BaseService<Notice>
    {
        static CommonDAL dal = new CommonDAL();
        /// <summary>
        /// 获得最新的公告
        /// </summary>
        /// <param name="takeNum">需要取出的条数</param>
        /// <returns></returns>
        public static List<Notice> GetNewestNotice(int takeNum)
        {
            var now = DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd"));
            var query = CurrentRepository.QueryEntity.Where(n => n.State == 1);
            if (!Sys.CurrentUser.StoreId.IsNullOrEmpty())
                query = query.Where(o => ("," + o.StoreId + ",").Contains("," + Sys.CurrentUser.StoreId + ","));
            return query.OrderByDescending(n => n.CreateDT).Take(takeNum).ToList();
        }
        /// <summary>
        /// APP调用
        /// </summary>
        /// <returns></returns>
        public static object GetNoticeList(string userCode)
        {
            if (userCode.IsNullOrEmpty()) throw new MessageException("员工编号为空!");
            if (!UserInfoService.IsExist(o => o.UserCode == userCode))
                throw new MessageException("员工编号不存在!");
            var dt= dal.GetNoticeList(userCode,false);
            if (dt.Rows.Count > 0)
            {
                var ids = dt.AsEnumerable().Select(o => (int)o["id"]);
                var list= BaseService<Reader>.FindList(o => ids.Contains(o.Id));
                var readers=new List<Reader>();
                ids.Each(id =>
                {
                    if (!list.Any(i => i.MainId == id))
                        readers.Add(new Reader() { MainId = id, ReadCode = userCode, Type = 1 });
                });
                BaseService<Reader>.AddRange(readers);
            }
            return dt;
        }
        /// <summary>
        /// 未读条数
        /// </summary>
        /// <param name="sId"></param>
        /// <returns></returns>
        public static object GetNoticeNum(string userCode)
        {
            if (userCode.IsNullOrEmpty()) throw new MessageException("员工编号为空!");
            var dt = dal.GetNoticeList(userCode, true);
            return dt.Rows.Count;
        }
        /// <summary>
        /// 用于datagrid列表
        /// </summary>
        /// <param name="nvl">传递条件</param>
        /// <param name="recordCount">返回总行数</param>
        /// <returns>list</returns>
        public static object FindPageList(NameValueCollection nvl, out int recordCount)
        {
            var query = CurrentRepository.QueryEntity;
            var keyword = nvl["keyword"];
            if (!keyword.IsNullOrEmpty())
                query = query.Where(n => n.Theme.Contains(keyword));
            if (!Sys.CurrentUser.StoreId.IsNullOrEmpty())
                query = query.Where(o => ("," + o.StoreId + ",").Contains(","+Sys.CurrentUser.StoreId+","));
            recordCount = query.Count();
            var pages = query.ToPageList(nvl).Select(o => new { 
                    Id = o.Id,
                    Theme = o.Theme,
                    NoticeContent = o.NoticeContent,
                    StoreId = o.StoreId,
                    State = o.State,
                    Type = o.Type,
                    CreateDT = o.CreateDT,
                    CreateUID = o.CreateUID,
                    ExpirationDateStr = o.ExpirationDate.ToString("yyyy-MM-dd"),
                    BeginDateStr = o.BeginDate.ToString("yyyy-MM-dd")
            });
            return pages;
        }

        /// <summary>
        /// 保存或修改
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public static OpResult NoticeSaveOrUpdate(Notice obj)
        {
            var re = new OpResult();
            try
            {
                if (obj.Id == 0)
                {
                    obj.CreateDT = DateTime.Now;
                    obj.CreateUID = Sys.CurrentUser.UID;
                    re = Add(obj);
                }
                else
                {
                    var notice = CurrentRepository.QueryEntity.FirstOrDefault(n => n.Id == obj.Id);
                    if (notice != null)
                    {
                        notice.Theme = obj.Theme;
                        notice.NoticeContent = obj.NoticeContent;
                        notice.StoreId = obj.StoreId;
                        notice.State = obj.State;
                        notice.Type = obj.Type;
                        notice.BeginDate = obj.BeginDate;
                        notice.ExpirationDate = obj.ExpirationDate;
                        re = Update(notice);
                    }
                }
            }
            catch (Exception ex)
            {
                re.Message = ex.Message;
                Log.WriteError(ex);
            }
            return re;
        }
        /// <summary>
        /// 更改通知状态
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public static OpResult ChangeState(long[] ids, int type)
        {
            var re = new OpResult();
            try
            {
                List<Notice> noticeList = new List<Notice>();
                foreach (var id in ids) {
                    var notice = CurrentRepository.QueryEntity.FirstOrDefault(n => n.Id == id);
                    if (notice != null)
                    {
                        notice.State = (short)type;
                        noticeList.Add(notice);
                    }
                    re = Update(noticeList);
                
                }
            }
            catch(Exception ex)
            {
                re.Message = ex.Message;
                Log.WriteError(ex);
            }
            return re;

        }

        /// <summary>
        /// 删除所选通知
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public static OpResult DeleteByIds(long[] ids)
        {
            var re = new OpResult();
            try
            {
                List<Notice> noticeList = new List<Notice>();
                foreach (var id in ids)
                {
                    var notice = CurrentRepository.QueryEntity.FirstOrDefault(n => n.Id == id);
                    if (notice != null)
                    {
                        noticeList.Add(notice);
                    }
                } 
                if(CurrentRepository.RemoveRange(noticeList, true))
                        re.Successed = true;
            }
            catch (Exception ex)
            {
                re.Message = ex.Message;
                Log.WriteError(ex);
            }
            return re;

        }
    }

}
