using Pharos.Logic.OMS.DAL;
using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.IDAL;
using Pharos.Utility;
using Pharos.Utility.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Pharos.Logic.OMS.IDAL;

namespace Pharos.Logic.OMS.BLL
{
    public class DevicesService : BaseService
    {
        [Ninject.Inject]
        // 设备档案信息
        public IBaseRepository<Devices> DevicesRepository { get; set; }

        [Ninject.Inject]
        //数据字典信息
        public IBaseRepository<SysDataDictionary> SysDataDictionaryRepository { get; set; }

        [Ninject.Inject]
        //帐户管理
        public IBaseRepository<SysUserInfo> SysUserInfoRepository { get; set; }

        [Ninject.Inject]
        //设备授权信息
        public IBaseRepository<DeviceAuthorize> DeviceAuthorizeRepository { get; set; }
        public Utility.OpResult SaveOrUpdate(Devices model)
        {
            if (model.Id == 0)
            {
                DevicesRepository.Add(model);
            }
            else
            {
                var source = DevicesRepository.Get(model.Id);
                model.ToCopyProperty(source);
            }

            if (DevicesRepository.SaveChanges())
            {
                LogEngine.WriteUpdate(model.Id + "," + model.Title, LogModule.设备管理);
            }
            return OpResult.Success();
        }

        public IEnumerable<dynamic> GetPageList(System.Collections.Specialized.NameValueCollection nvl, out int recordCount)
        {

            //设备
            var query = DevicesRepository.GetQuery();
            //账户
            var userInfo = SysUserInfoRepository.GetQuery();
            //数据字典
            var dataDictionary = SysDataDictionaryRepository.GetQuery();



            //分类
            var CategoryId = (nvl["CategoryId"] ?? "").Trim();
            //品牌
            var Brand = (nvl["Brand"] ?? "").Trim();
            //维护人
            var FullName = (nvl["FullName"] ?? "").Trim();
            //设备名称
            var Title = (nvl["Title"] ?? "").Trim();

            if (!CategoryId.IsNullOrEmpty())
            {
                var c = short.Parse(CategoryId);
                query = query.Where(w=>w.CategoryId==c);
            }
            if (!Brand.IsNullOrEmpty())
            {
                query = query.Where(w => w.Brand.Contains(Brand));
            }
            if (!Title.IsNullOrEmpty())
            {
                query = query.Where(w => w.Title.Contains(Title));
            }

            var q = from quer in query
                    join u in userInfo on quer.CreateUID equals u.UserId
                    into v
                    from w in v.DefaultIfEmpty()
                    join d in dataDictionary on quer.CategoryId equals d.DicSN
                    into x 
                    from y in x.DefaultIfEmpty()
                    select new
                    {
                        quer.Id,
                        quer.DeviceId,
                        quer.CategoryId,
                        quer.Title,
                        quer.Brand,
                        quer.Spec,
                        quer.Status,
                        quer.CreateDT,
                        quer.CreateUID,
                        dTitle = y == null ? "" : y.Title,
                        FullName = w == null ? "" : w.FullName
                    };

            if (!FullName.IsNullOrEmpty())
            {
                q = q.Where(w => w.FullName.Contains(FullName));
            }

            recordCount = q.Count();
            return q.ToPageList();
        }

        public List<SysUserInfo> GetList()
        {
            throw new NotImplementedException();
        }

        public Utility.OpResult Deletes(int[] ids)
        {
            var op = new OpResult();
            try
            {
                var devices = DevicesRepository.GetQuery(o => ids.Contains(o.Id));
                if (!devices.Any())
                {
                    op.Message = "查不到数据";
                    return op;
                }
                var delDeviceId = devices.Select(o=>o.DeviceId);
                var authorize = DeviceAuthorizeRepository.GetQuery(o => delDeviceId.Contains(o.DeviceId));
                if (authorize.Any())
                {
                    op.Message = "无法删除，设备授权包含了要删除的设备";
                    return op;
                }

                DevicesRepository.RemoveRange(devices.ToList());
                op.Successed = true;
                LogEngine.WriteDelete("移除设备", LogModule.设备管理);
            }
            catch (Exception ex)
            {
                op.Message = ex.Message;
                LogEngine.WriteError(ex);
            }
            return op;
        }

       

        public Devices GetOne(object id)
        {
            return DevicesRepository.Get(id);
        }
        /// <summary>
        /// 获取设备分类
        /// </summary>
        /// <returns></returns>
        public List<SysDataDictionary> getDataList()
        {
            return SysDataDictionaryRepository.GetQuery(w=>w.DicPSN==197).OrderBy(o=>o.DicSN).ToList();
        }
        /// <summary>
        /// 设置可用，设置停用
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="state"></param>
        /// <returns></returns>
        public OpResult SetState(string ids, short state)
        {
            var sId = ids.Split(',').Select(o => int.Parse(o));
            var olist = DevicesRepository.GetQuery(o => sId.Contains(o.Id)).ToList();
            olist.Each(o => o.Status = state);
            return OpResult.Result(DevicesRepository.SaveChanges());
        }
    }
}
