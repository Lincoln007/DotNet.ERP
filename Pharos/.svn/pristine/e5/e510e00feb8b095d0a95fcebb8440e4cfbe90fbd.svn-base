using Newtonsoft.Json.Linq;
using System.Configuration;
using System.Web.Http;
using Pharos.Api.Retailing.Models.Mobile;
using Pharos.Logic.BLL;
using Pharos.Logic.ApiData.Mobile.Exceptions;
using Pharos.Infrastructure.Data.Normalize;
using System;
using System.Collections.Generic;
using Pharos.Utility;
using Newtonsoft.Json;
using System.Text;
using System.Security.Cryptography;
using Pharos.Logic.Entity;
using Pharos.Logic.DAL;

namespace Pharos.Api.Retailing.Controllers.Mobile
{
    [RoutePrefix("api/mobile")]
    public class PayController : ApiController
    {
        //测试地址
        //http://27.154.234.10:8016/api/pay/qctpay
        //http://api.pay.qcterp.com
        //商户号：4 门店号：30005



        /// <summary>
        /// 扫码收款
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("PayMerchScanDyna")]
        public object PayMerchScanDyna(AppPayRequest param)
        {
            try
            {
                int cid = param.CID;
                var storeId = param.StoreId;


                string out_trade_no = new PayOrderSn(cid, storeId).ToString();
                string create_date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                var pay_notify_url = PayConst.RETURN_URL;//回调地址
                var goods_name = "";
                var goods_desc = "";

                //判断用户积分使用
                #region 积分记录
                IntegralFlows reduceIntegral = new IntegralFlows()
                        {
                            CompanyId = cid,
                            StoreId = storeId,
                            FlowSN = out_trade_no,
                            Amount = param.TotalAmount,
                            Integral = -param.UseIntegral,
                            DiscountAmount = param.DiscountAmount,
                            CardSN = param.CardSN,
                            Received = param.Received,
                            Remark = "",
                            State = 0
                        };
                IntegralFlows addIntegral = new IntegralFlows()
                {
                    CompanyId = cid,
                    StoreId = storeId,
                    FlowSN = out_trade_no,
                    Amount = param.TotalAmount,
                    Integral = param.GetAmount,
                    DiscountAmount = param.DiscountAmount,
                    CardSN = param.CardSN,
                    Received = param.Received,
                    Remark = "",
                    State = 0
                };
                IntegralFlowsService.Add(reduceIntegral, false);
                IntegralFlowsService.Add(addIntegral);
                #endregion

                var reqParams = new SortedDictionary<string, object>();

                reqParams.Add("charset", PayConst.CHARSET);
                reqParams.Add("method", PayConst.QCTTRADE_PAY_MERCHSCAN);
                reqParams.Add("mch_id", PayConst.MERCHANT_ID);
                reqParams.Add("store_id", storeId);
                reqParams.Add("device_id", param.Device_id);
                reqParams.Add("sign_type", PayConst.SIGNTYPE);
                reqParams.Add("version", PayConst.VERSION);
                reqParams.Add("out_trade_no", out_trade_no);
                reqParams.Add("order_type", 1);
                reqParams.Add("create_date", create_date);
                reqParams.Add("total_amount", param.Received);
                reqParams.Add("buyer_pay_token", param.PayToken);
                reqParams.Add("pay_notify_url", pay_notify_url);
                reqParams.Add("buyer_mobile", "");
                reqParams.Add("goods_name", goods_name);
                reqParams.Add("goods_desc", goods_desc);
                //签名
                String sign = PayHelper.Sign(reqParams, PayConst.MERCHANT_SECRETKEY);
                reqParams.Add("sign", sign);
                var obj = HttpClient.PayPost(PayConst.TEST_URL, reqParams);
                var result = JsonConvert.DeserializeObject<JObject>(obj);
                if (result.Property("return_code").Value.ToString() == "00000")
                {
                    //成功
                    if (result.Property("pay_token").ToString() != "")
                    {
                        return result.Property("pay_token").ToString();
                    }
                    else
                    {
                        throw new MessageException("数据异常，请刷新重试！");
                    }
                }
                else
                {
                    //失败
                    var errmsg = result.Property("return_msg").Value.ToString();
                    throw new MessageException(errmsg);
                }
            }
            catch (Exception ex)
            {
                throw new MessageException("支付异常：" + ex.Message);
            }
        }
        /// <summary>
        /// 客户扫码回调
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        [Route("TradeNotify")]
        public object TradeNotify(string returnObj)
        {
            var obj = JsonConvert.DeserializeObject<JObject>(returnObj);
            if (obj.Property("return_code").Value.ToString() == "00000")
            {
                //更新会员积分信息
                var cid = obj.Property("mch_id", true);//
                var storeId = obj.Property("store_id", true);
                var orderSN = obj.Property("out_trade_no", true);
                var amount = obj.Property("receipt_amount", true);
                var payState = obj.Property("pay_status", true);//notpay=支付中；paysuccess=支付成功；payfail=支付失败;paycancel=已撤销;paytimeout=支付超时
                var tradeDate = obj.Property("trade_date", true);//支付时间


                //更新支付记录

                //通知手机

            }

            return new { return_code = "00000", return_msg = "接收成功" };
        }

        /// <summary>
        /// 收款码请求发起
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("PayBuyerScanDyna")]
        public object PayBuyerScanDyna(AppPayRequest param)
        {
            try
            {
                int cid = param.CID;
                var storeId = param.StoreId;


                string out_trade_no = new PayOrderSn(cid, storeId).ToString();

                string create_date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                var pay_notify_url = PayConst.RETURN_URL;//回调地址
                var goods_name = "";
                var goods_desc = "";

                var reqParams = new SortedDictionary<string, object>();

                reqParams.Add("charset", PayConst.CHARSET);
                reqParams.Add("method", PayConst.QCTTRADE_PAY_BUYERSCAN_DYNA);
                reqParams.Add("mch_id", PayConst.MERCHANT_ID);
                reqParams.Add("store_id", storeId);
                reqParams.Add("device_id", param.Device_id);
                reqParams.Add("sign_type", PayConst.SIGNTYPE);
                reqParams.Add("version", PayConst.VERSION);
                reqParams.Add("out_trade_no", out_trade_no);
                reqParams.Add("order_type", 1);
                reqParams.Add("create_date", create_date);
                reqParams.Add("total_amount", param.Received);
                reqParams.Add("pay_notify_url", pay_notify_url);
                reqParams.Add("buyer_mobile", "");
                reqParams.Add("goods_name", goods_name);
                reqParams.Add("goods_desc", goods_desc);
                //签名
                String sign = PayHelper.Sign(reqParams, PayConst.MERCHANT_SECRETKEY);
                reqParams.Add("sign", sign);
                var obj = HttpClient.PayPost(PayConst.TEST_URL, reqParams);
                var result = JsonConvert.DeserializeObject<JObject>(obj);
                if (result.Property("return_code").Value.ToString() == "00000")
                {
                    //成功

                    return result.Property("pay_token").Value.ToString();
                }
                else
                {
                    //失败
                    var errmsg = result.Property("return_msg").Value.ToString();
                    throw new MessageException(errmsg);
                }

            }
            catch (Exception ex)
            {
                throw new MessageException("支付异常：" + ex.Message);
            }
        }

    }
    /// <summary>
    /// 测试参数
    /// </summary>
    public class PayConst
    {

        //测试账号
        public const int MERCHANT_ID = 4;//您的商户号
        public const int MERCHANT_STOREID = 30006;//您的商户门店号
        public const string MERCHANT_SECRETKEY = "56D0F28A2AEE4A928BE282D1CCEBF33D";//您的商户安全密钥

        public const string SIGNTYPE = "MD5";//签名类型
        public const string VERSION = "1.0";//调用版本
        public const string CHARSET = "utf-8";//字符集格式

        #region QctPay Methods
        public const string QCTTRADE_PAY_BUYERSCAN_DYNA = "qct.trade.pay.buyerscandyna";
        public const string QCTTRADE_PAY_MERCHSCAN = "qct.trade.pay.merchscan";
        public const string QCTTRADE_REFUNDAPPLY = "qct.trade.refund.apply";

        public const string QCTTRADE_NOTIFY_PAY = "qct.trade.notify.pay";
        public const string QCTTRADE_NOTIFY_REFUND = "qct.trade.notify.refund";

        public const string TEST_URL = "http://27.154.234.10:8016/api/pay/qctpay";
        public const string RETURN_URL = "http://192.168.10.53:3122/api/mobile/TradeNotify";
        #endregion
    }

    public class PayHelper
    {
        public static String Sign(SortedDictionary<String, Object> signObj, String md5Key)
        {
            StringBuilder signdatasb = new StringBuilder();
            foreach (var item in signObj)
            {
                String key = item.Key;
                String value = signObj[key] == null ? "" : signObj[key].ToString();
                signdatasb.Append("&").Append(key).Append("=").Append(value);
            }

            String signdata = signdatasb.ToString().Substring(1) + "&key=" + md5Key;
            return GetMD5(signdata);
        }
        public static string GetMD5(string value)
        {
            MD5 md5 = MD5.Create();
            byte[] data = md5.ComputeHash(Encoding.UTF8.GetBytes(value));
            string sh1 = "";
            for (int i = 0; i < data.Length; i++)
            {
                sh1 += data[i].ToString("x2").ToUpperInvariant();
            }
            return sh1;
        }
        public static SortedDictionary<string, object> Trans2SortedDic<T>(T model)
        {
            var sortDic = new SortedDictionary<string, object>();
            var type = typeof(T);
            foreach (var item in type.GetProperties())
            {
                var attrs = item.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                foreach (JsonPropertyAttribute attr in attrs)
                {
                    var key = attr.PropertyName;
                    var value = item.GetValue(model);
                    value = value == null ? "" : value;
                    sortDic.Add(key, value);
                }
            }
            return sortDic;
        }
    }
}