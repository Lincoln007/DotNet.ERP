using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;
using System.Text;
using Pharos.Logic.Entity;
using System.Collections.Specialized;
using Pharos.Utility.Helpers;
using Pharos.Utility;
using Pharos.Logic.LocalEntity;
namespace Pharos.Logic.BLL
{
    public class STHouseMoveService : BaseService<HouseMove>
    {
        /// <summary>
        /// 用于调入管理datagrid列表
        /// </summary>
        /// <param name="nvl">传递条件</param>
        /// <param name="count">返回总行数</param>
        /// <returns>list</returns>
        public static object FindMoveinList(NameValueCollection nvl, out int count)
        {
            var queryHouse = CurrentRepository.QueryEntity;
            var state = nvl["state"];
            var outStore = nvl["outStore"];
            var queryHouseList = BaseService<HouseMoveList>.CurrentRepository.QueryEntity;
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
            var queryStore = WarehouseService.CurrentRepository.QueryEntity;
            if (!state.IsNullOrEmpty())
            {
                var st = short.Parse(state);
                queryHouse = queryHouse.Where(o => o.State == st);
            }
            if (!outStore.IsNullOrEmpty())
            {
                queryHouse = queryHouse.Where(o => o.OutStoreId == outStore);
            }
            var type = typeof(HouseMoveState);
            var query = from a in queryHouse
                        from x in queryHouseList
                        from b in queryProduct
                        join c in queryStore on a.InStoreId equals c.StoreId into tempIn
                        join d in queryStore on a.OutStoreId equals d.StoreId into tempOut
                        from tin in tempIn.DefaultIfEmpty()
                        from tout in tempOut.DefaultIfEmpty()
                        where a.MoveId==x.MoveId && x.Barcode == b.Barcode
                        select new
                        {
                            a.Id,
                            a.MoveId,
                            InStoreTitle = tin.Title,
                            OutStoreTitle = tout.Title,
                            InStoreId = tin.StoreId,
                            OutStoreId = tout.StoreId,
                            a.CreateDT,//申请时间
                            a.DeliveryDT,//调出时间
                            x.Barcode,
                            b.ProductCode,
                            b.Title,
                            b.SubUnit,
                            b.BrandTitle,
                            x.SysPrice,
                            x.OrderQuantity,
                            x.DeliveryQuantity,
                            x.ActualQuantity,
                            x.ActualDT,//收货时间
                            x.State,//明细状态
                            tin.StoreId
                        };
            if (!Sys.CurrentUser.StoreId.IsNullOrEmpty())
                query = query.Where(o => (o.InStoreId == Sys.CurrentUser.StoreId)); //|| o.OutStoreId == Sys.CurrentUser.StoreId
            count = query.Count();
            return query.ToPageList().Select(o => new
            {
                o.Id,
                o.MoveId,
                o.InStoreTitle ,
                o.OutStoreTitle ,
                o.InStoreId,
                o.OutStoreId,
                o.CreateDT,//申请时间
                o.DeliveryDT,//调出时间
                o.Barcode,
                o.ProductCode,
                o.Title,
                o.SubUnit,
                o.BrandTitle,
                o.SysPrice,
                o.OrderQuantity,
                o.DeliveryQuantity,
                o.ActualQuantity,
                o.ActualDT,//收货时间
                o.State,//明细状态
                CreateDate = o.CreateDT.ToString("yyyy-MM-dd"),
                DeliveryDate = o.DeliveryDT.IsNullOrEmpty()?"":o.DeliveryDT.Value.ToString("yyyy-MM-dd"),
                ActualDate = o.ActualDT.IsNullOrEmpty()?"":o.ActualDT.Value.ToString("yyyy-MM-dd"), 

                StateTitle = Enum.GetName(type, o.State)
            }).ToList();
        }

        /// <summary>
        /// 用于调出管理datagrid列表
        /// </summary>
        /// <param name="nvl">传递条件</param>
        /// <param name="count">返回总行数</param>
        /// <returns>list</returns>
        public static object FindMoveoutList(NameValueCollection nvl, out int count)
        {
            var queryHouse = CurrentRepository.QueryEntity;
            var state = nvl["state"];
            var inStore = nvl["inStore"];
            var queryHouseList = BaseService<HouseMoveList>.CurrentRepository.QueryEntity;
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
            var queryStore = WarehouseService.CurrentRepository.QueryEntity;
            if (!state.IsNullOrEmpty())
            {
                var st = short.Parse(state);
                queryHouse = queryHouse.Where(o => o.State == st);
            }
            if (!inStore.IsNullOrEmpty())
            {
                queryHouse = queryHouse.Where(o => o.OutStoreId == inStore);
            }
            var type = typeof(HouseMoveState);
            var query = from a in queryHouse
                        from x in queryHouseList
                        from b in queryProduct
                        join c in queryStore on a.InStoreId equals c.StoreId into tempIn
                        join d in queryStore on a.OutStoreId equals d.StoreId into tempOut
                        from tin in tempIn.DefaultIfEmpty()
                        from tout in tempOut.DefaultIfEmpty()
                        where a.MoveId == x.MoveId && x.Barcode == b.Barcode
                        select new
                        {
                            a.Id,
                            a.MoveId,
                            InStoreTitle = tin.Title,
                            OutStoreTitle = tout.Title,
                            InStoreId = tin.StoreId,
                            OutStoreId = tout.StoreId,
                            a.CreateDT,//申请时间
                            a.DeliveryDT,//调出时间
                            x.Barcode,
                            b.ProductCode,
                            b.Title,
                            b.SubUnit,
                            b.BrandTitle,
                            x.SysPrice,
                            x.OrderQuantity,
                            x.DeliveryQuantity,
                            x.ActualQuantity,
                            x.ActualDT,//收货时间
                            x.State,//明细状态
                            tin.StoreId
                        };
            if (!Sys.CurrentUser.StoreId.IsNullOrEmpty())
                query = query.Where(o => (o.OutStoreId == Sys.CurrentUser.StoreId)); //|| o.InStoreId == Sys.CurrentUser.StoreId
            count = query.Count();
            return query.ToPageList().Select(o => new
            {
                o.Id,
                o.MoveId,
                o.InStoreTitle,
                o.OutStoreTitle,
                o.InStoreId,
                o.OutStoreId,
                o.CreateDT,//申请时间
                o.DeliveryDT,//调出时间
                o.Barcode,
                o.ProductCode,
                o.Title,
                o.SubUnit,
                o.BrandTitle,
                o.SysPrice,
                o.OrderQuantity,
                o.DeliveryQuantity,
                o.ActualQuantity,
                o.ActualDT,//收货时间
                o.State,//明细状态
                CreateDate = o.CreateDT.ToString("yyyy-MM-dd"),
                DeliveryDate = o.DeliveryDT.IsNullOrEmpty() ? "" : o.DeliveryDT.Value.ToString("yyyy-MM-dd"),
                ActualDate = o.ActualDT.IsNullOrEmpty() ? "" : o.ActualDT.Value.ToString("yyyy-MM-dd"),

                StateTitle = Enum.GetName(type, o.State)
            }).ToList();
        }


        /// <summary>
        /// 新增或修改
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public static OpResult SaveOrUpdate(HouseMove obj)
        {
            var re = new OpResult();
            try
            {
                var details = new List<HouseMoveList>();
                //var gifts = new List<IndentOrderList>();
                if (!string.IsNullOrWhiteSpace(obj.Inserted))
                {
                    var adds = obj.Inserted.ToObject<List<HouseMoveList>>();
                    if (adds.Any())
                    {
                        details.AddRange(adds.Where(o => !string.IsNullOrWhiteSpace(o.Barcode)));
                        foreach (var item in details)
                        {
                            item.Id = null;
                        }
                        //details.Each(o =>
                        //{
                        //    if (!o.Gift.IsNullOrEmpty())
                        //    {
                        //        var gfs = o.Gift.Split(',');
                        //        gfs.Each(i =>
                        //        {
                        //            if (!i.IsNullOrEmpty())
                        //            {
                        //                gifts.Add(new IndentOrderList()
                        //                {
                        //                    Barcode = i.Split('~')[0],
                        //                    IndentNum = decimal.Parse(i.Split('~')[1]),
                        //                    Nature = 1,
                        //                    ResBarcode = o.Barcode,
                        //                    Memo = "赠品"
                        //                });
                        //            }
                        //        });
                        //    }
                        //});
                    }
                }
               // var gifBars = gifts.Select(o => o.Barcode).ToList();
                //if (gifbars.any())
                //{
                //    var pros = productservice.findlist(o => gifbars.contains(o.barcode));
                //    gifts.each(o =>
                //    {
                //        var p = pros.firstordefault(i => i.barcode == o.barcode);
                //        if (p != null)
                //        {
                //            o.price = p.buyprice;
                //            o.subtotal = o.price * o.indentnum;
                //            o.sysprice = o.sysprice;
                //        }
                //    });
                //}
                //details.addrange(gifts);
                //if (details.Any())
                //{
                //    var procs = ProductService.FindList(o => !(o.Barcodes == null || o.Barcodes == ""));
                //    foreach (var dt in details)
                //    {
                //        var p = procs.FirstOrDefault(o => ("," + o.Barcodes + ",").Contains("," + dt.Barcode + ","));
                //        if (p == null) continue;
                //        //dt.AssistBarcode = dt.Barcode;
                //        dt.Barcode = p.Barcode;
                //    }
                //}
                
                if (obj.Id == 0)
                {
                    obj.MoveId = Logic.CommonRules.GUID;
                    details.Each(o =>
                    {
                        o.MoveId = obj.MoveId;
                        o.StockOut =  0;//todo
                        o.State = 1;
                    });
                    obj.CreateDT = DateTime.Now;
                    obj.CreateUID = Sys.CurrentUser.UID;
                    obj.State = 1;
                    Add(obj, false);

                    re = BaseService<HouseMoveList>.AddRange(details);
                }
                    
                else
                {
                    var sour = STHouseMoveService.FindById(obj.Id);
                    var list = BaseService<HouseMoveList>.FindList(o => o.MoveId == sour.MoveId);
                    var uid = sour.CreateUID;
                    var create = sour.CreateDT;
                    obj.ToCopyProperty(sour);
                    sour.CreateDT = create;
                    sour.CreateUID = uid;
                    details.Each(o =>
                    {
                        o.MoveId = sour.MoveId;
                        o.State = sour.State;
                    });
                    if (!string.IsNullOrWhiteSpace(obj.Deleted))
                    {
                        var dels = obj.Deleted.ToObject<List<HouseMoveList>>();
                        if (dels.Any())
                        {
                            var barcodes = dels.Select(o => o.Barcode).ToList();
                            //var mainBars = dels.Select(o => o.Barcode).ToList();
                            var deletes = list.Where(o => barcodes.Contains(o.Barcode)).ToList();
                            //deletes.AddRange(list);  //.Where(o => mainBars.Contains(o.ResBarcode))
                            BaseService<HouseMoveList>.CurrentRepository.RemoveRange(deletes, false);

                        }
                    }
                    if (!string.IsNullOrWhiteSpace(obj.Updated))
                    {
                        var upts = obj.Updated.ToObject<List<HouseMoveList>>();
                       
                        if (upts.Any())
                        {
                            var barcodes = upts.Select(o => o.Barcode).ToList();
                            //var mainBars = upts.Select(o => o.Barcode).ToList();
                            var deletes = list.Where(o => barcodes.Contains(o.Barcode)).ToList();
                            //deletes.AddRange(list);    //.Where(o => mainBars.Contains(o.ResBarcode))
                            
                            //upts.Each(o =>
                            //{
                            //    if (!o.Gift.IsNullOrEmpty())
                            //    {
                            //        var gfs = o.Gift.Split(',');
                            //        gfs.Each(i =>
                            //        {
                            //            if (!i.IsNullOrEmpty())
                            //            {
                            //                gifts.Add(new IndentOrderList()
                            //                {
                            //                    IndentOrderId = o.IndentOrderId,
                            //                    Barcode = i.Split('~')[0],
                            //                    IndentNum = decimal.Parse(i.Split('~')[1]),
                            //                    Nature = 1,
                            //                    ResBarcode = o.Barcode,
                            //                    Memo = "赠品"
                            //                });
                            //            }
                            //        });
                            //    }
                            //});
                            //upts.AddRange(gifts);
                            BaseService<HouseMoveList>.CurrentRepository.RemoveRange(deletes, false);
                            BaseService<HouseMoveList>.AddRange(upts, false);
                        }
                    }
                    BaseService<HouseMoveList>.AddRange(details, false);
                    re = Update(sour);
                }
            }
            catch (Exception ex)
            {
                re.Message = ex.Message;
            }
            return re;
        }



        /// <summary>
        /// 用于修改回显列表
        /// </summary>
        /// <param name="orderId">订单ID</param>
        /// <param name="recordCount">返回记录数</param>
        /// <returns>list</returns>
        public static System.Data.DataTable LoadDetailList(string moveId, out int recordCount, ref object footer)
        {
            recordCount = 0;
            var dal = new Pharos.Logic.DAL.STHouseMoveDAL();
            var dt = dal.LoadDetailList(moveId);
            decimal nums = 0;//total = 0,
            foreach (System.Data.DataRow dr in dt.Rows)
            {
                //dr["Detail"] = System.Web.HttpUtility.HtmlDecode(dr["Detail"].ToString());
                //total += Convert.ToDecimal(dr["Subtotal"]);
                nums += Convert.ToDecimal(dr["OrderQuantity"]);
                //if (!(dr["AssistBarcode"] is DBNull))
                    //dr["Barcode"] = dr["AssistBarcode"];
            }
            footer = new List<object>() { 
                new { OrderQuantity=nums,StockNums="合计:" }
            };
            return dt;
        }



        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        //public static OpResult SaveOrUpdate(STHouseMove obj)
        //{
        //    var op = new OpResult();
        //    try
        //    {
        //        if (obj.Id.IsNullOrEmpty())
        //        {
        //            obj.Id = CommonRules.GUID;
        //            obj.CreateDT = DateTime.Now;
        //            obj.CreateUID = Sys.CurrentUser.UID;
        //            obj.State = (short)HouseMoveState.调拨中;
        //            op = Add(obj);
        //        }
        //        else
        //        {
        //            op = Update(obj);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        op.Message = ex.Message;
        //    }
        //    return op;
        //}


        /// <summary>
        /// 显示扩展属性
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        //public static object FindAllById(string id)
        //{
        //    var queryHouse = CurrentRepository.QueryEntity;
        //    var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
        //    var queryStore = WarehouseService.CurrentRepository.QueryEntity;
        //    var query = from a in queryHouse
        //                from b in queryProduct
        //                join c in queryStore on a.InStoreId equals c.StoreId into tempIn
        //                join d in queryStore on a.OutStoreId equals d.StoreId into tempOut
        //                from tin in tempIn.DefaultIfEmpty()
        //                from tout in tempOut.DefaultIfEmpty()
        //                where a.Barcode == b.Barcode && a.Id == id
        //                select new
        //                {
        //                    a.Id,
        //                    InStoreTitle = tin.Title,
        //                    OutStoreTitle = tout.Title,
        //                    b.ProductCode,
        //                    b.Barcode,
        //                    b.Title,
        //                    b.BrandTitle,
        //                    b.SubUnit,
        //                    b.SysPrice,
        //                    a.OrderQuantity,
        //                    a.DeliveryQuantity,
        //                    a.ActualQuantity,
        //                    a.CreateDT,
        //                    a.State,
        //                    a.Memo
        //                };
        //    var obj = query.FirstOrDefault();
        //    return obj;
        //}
        public static OpResult Receiver(STHouseMove obj)
        {
            var op = new OpResult();
            try
            {
                var house = DiaoboService.FindById(obj.Id);
                house.State = (short)HouseMoveState.已收货;
                house.ActualUID = Sys.CurrentUser.UID;
                house.ActualQuantity = obj.ActualQuantity;
                InventoryRecordService.SaveLog(new List<InventoryRecord>(){
                    new InventoryRecord(){Barcode=house.Barcode,StoreId=house.InStoreId,Source=3,Number=house.ActualQuantity},
                    new InventoryRecord(){Barcode=house.Barcode,StoreId=house.OutStoreId,Source=4,Number=house.ActualQuantity}
                });

                op = DiaoboService.Update(house);
            }
            catch (Exception ex)
            {
                op.Message = ex.Message;
            }
            return op;
        }
    }
}
