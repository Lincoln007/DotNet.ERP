using Pharos.Logic.ApiData.Pos.DataAdapter;
using Pharos.Logic.ApiData.Pos.Sale.Marketings;
using Pharos.Logic.ApiData.Pos.ValueObject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Logic.ApiData.Pos.Extensions;
using System.Web;
using System.Threading.Tasks;
using System.Threading;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Newtonsoft.Json;
using Pharos.Logic.ApiData.Pos.Cache;

namespace Pharos.Logic.ApiData.Pos
{
    public static class StoreManager
    {
        public static bool IsRunning = false;
        private static readonly string KeyFormat = "{0}*-*{1}";

        public static EventHandler<SubPubEventArgs> LocalSubPub;
        private static List<SubItem> subs = new List<SubItem>();

        private static SyncLogCache syncLogCache = new SyncLogCache();

        public static void SetSyncLog(string key, string content)
        {
            if (syncLogCache == null)
                syncLogCache = new SyncLogCache();
            syncLogCache.Set(key, content);
        }

        public static IEnumerable<string> GetSyncLogs()
        {
            if (syncLogCache == null)
                syncLogCache = new SyncLogCache();
            return syncLogCache.Collections.Values.ToArray();
        }
        public static void PubEvent(string title, string info)
        {
            // Copy to a temporary variable to be thread-safe.
            EventHandler<SubPubEventArgs> temp = LocalSubPub;
            if (temp != null)
                temp(title, new SubPubEventArgs() { Content = info, Title = title });
        }
        public static void Subscribe(string title, Action<string, string> handler)
        {
            if (subs == null)
                subs = new List<SubItem>();
            subs.Add(new SubItem() { Title = title, CallBack = handler });
            if (LocalSubPub == null)
            {
                LocalSubPub += (o, args) =>
                 {
                     var key = o.ToString();
                     var temps = subs.ToList();
                     foreach (var item in temps)
                     {
                         try
                         {
                             item.CallBack(args.Title, args.Content);
                         }
                         catch { }
                     }
                 };
            }
        }

        private static readonly IDictionary<string, MarketingManager> MarketingCaches = new Dictionary<string, MarketingManager>();

        public static string GetKey(int token, string storeId)
        {
            var key = string.Format(KeyFormat, token, storeId);
            return key;
        }

#if (Local !=true)
        public static void InitStores(bool isRestart = false)
        {
            if (!isRestart && IsRunning)
            {
                return;
            }
            IsRunning = true;
            var stores = DataAdapterFactory.DefualtDataAdapter.GetWarehouseInformations();
            foreach (var item in stores)
            {
                SetUpStore(item.CompanyToken, item.StoreId);
            }
            Task.Factory.StartNew(() =>
            {
                Thread.Sleep(new TimeSpan(24, 0, 0));
                InitStores(true);
            });
        }
#endif
        public static void SetUpStore(int token, string storeId)
        {
            var key = GetKey(token, storeId);
            MarketingManager marketingManager = new MarketingManager(storeId, token);
            if (MarketingCaches.ContainsKey(key))
            {
                MarketingCaches.Remove(key);
            }
            MarketingCaches.Add(key, marketingManager);
        }

        public static MarketingManager GetMarketing(int token, string storeId)
        {
            var key = GetKey(token, storeId);
            if (MarketingCaches.ContainsKey(key))
                return MarketingCaches[key];
            else
                throw new PosException("门店尚未初始化！");
        }

        public static void PubEvent(string title, object content)
        {
            PubEvent(title, JsonConvert.SerializeObject(content));
        }
    }
    public class SubPubEventArgs : EventArgs
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    public class SubItem
    {
        public string Title { get; set; }
        public Action<string, string> CallBack { get; set; }
    }
}
