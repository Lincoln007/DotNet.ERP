using Pharos.Logic.ApiData.Pos.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.DataAdapter
{
    /// <summary>
    /// 本地数据源适配器( for sql server Compact)
    /// </summary>
    public class SqlServerCEDataAdapter : IDataAdapter
    {
        public string StoreId
        {
            get;
            set;
        }

        public string MachineSN
        {
            get;
            set;
        }

        public string DeviceSn
        {
            get;
            set;
        }
        /// <summary>
        /// 企业标识
        /// </summary>
        public int CompanyToken
        {
            get;
            set;
        }

        public bool Enable
        {
            get { return SysStoreUserInfoService.CurrentRepository._context.Database.Exists(); }
        }
        /// <summary>
        /// 是否练习模式
        /// </summary>
        public bool IsSalesclerkTest
        {
            get;
            set;
        }

        public ValueObject.ProductInfo GetProductInfoByBarcode(string barcode)
        {
            throw new NotImplementedException();
        }

        public ValueObject.ProductInfo GetProductInfoByProductCode(string productCode)
        {
            throw new NotImplementedException();
        }

        public ValueObject.ProductInfo GetProductInfoFromBundlingByBarcode(string barcode)
        {
            throw new NotImplementedException();
        }

        public ValueObject.UserInfo GetUser(string account)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ValueObject.UserInfo> GetStoreManagers(User.StoreOperateAuth storeOperateAuth)
        {
            throw new NotImplementedException();
        }

        public ValueObject.PageResult<ValueObject.InventoryResult> CheckedInventory(IEnumerable<int> categorySns, string keyword, int pageSize, int pageIndex)
        {
            throw new NotImplementedException();
        }

        public ValueObject.PageResult<ValueObject.InventoryResult> CheckedPrice(IEnumerable<int> categorySns, decimal from, decimal to, int pageSize, int pageIndex)
        {
            throw new NotImplementedException();
        }

        public ValueObject.MemberInfo GetMemberInfo(string phone, string cardNo, string uid)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ValueObject.CategoryDAO> GetStoreCategory()
        {
            throw new NotImplementedException();
        }

        public void PosIncomePayout(string uid, decimal money, User.PosIncomePayoutMode mode)
        {
            throw new NotImplementedException();
        }

        public ValueObject.BillHistoryInfo GetBillDetailsHistory(string paySn)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ValueObject.ReasonItem> GetReason(int mode)
        {
            throw new NotImplementedException();
        }

        public void RefundAll(int reason, string paySn, decimal amount, string uid)
        {
            throw new NotImplementedException();
        }

        public void ChangeOrRefund(Sale.AfterSale.OrderChangeRefundSale changeList, int reason, MachineInformation machineInformation, string newPaySn, decimal amount, decimal receive, string uid, string apiCodes)
        {
            throw new NotImplementedException();
        }

        public void RecordPayment(string paySn, decimal amount, int apiCode, decimal change, decimal receive, string apiOrderSN = null, string cardNo = null)
        {
            throw new NotImplementedException();
        }

        public Logic.Entity.ApiLibrary GetApiSettings(int apiCode)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ValueObject.BillListItem> GetBills(DateTime date, Sale.Range range)
        {
            throw new NotImplementedException();
        }

        public void RegisterDevice(string deviceSn, ValueObject.DeviceType type)
        {
            throw new NotImplementedException();
        }

        public bool HasRegister(string deviceSn, ValueObject.DeviceType type)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ValueObject.Announcement> Announcements()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<KeyValuePair<Sale.Marketings.MarketingTimelinessLimit, Sale.Marketings.MarketingRule>> GetMarketingRules()
        {
            throw new NotImplementedException();
        }

        public decimal GetMarketingRecordNumber(string marketingId, Sale.Marketings.MarketingQuotaMode mode)
        {
            throw new NotImplementedException();
        }

        public void SaveMarketingRecord(string marketingId, decimal number)
        {
            throw new NotImplementedException();
        }

        public void SaveOrder(Sale.ShoppingCart shoppingCart, string apiCodes)
        {
            throw new NotImplementedException();
        }

        public ValueObject.DayReportResult DayMonthReport(DateTime from, DateTime to, Sale.Range range)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ValueObject.WarehouseInformations> GetWarehouseInformations()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<ValueObject.Activity> Activities()
        {
            throw new NotImplementedException();
        }

        public void AddWipeZero(int companyId, string paySn, decimal money)
        {
            throw new NotImplementedException();
        }
    }
}
