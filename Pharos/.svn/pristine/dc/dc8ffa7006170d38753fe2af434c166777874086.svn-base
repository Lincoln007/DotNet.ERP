using Pharos.POS.Retailing.Models;
using Pharos.POS.Retailing.Extensions;
using Pharos.POS.Retailing.Models.PosModels;
using Pharos.POS.Retailing.Models.ViewModels;
using Pharos.POS.Retailing.RawInput;
using Pharos.Wpf.Extensions;
using Pharos.Wpf.HotKeyHelper;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Interop;
using Pharos.POS.Retailing.Models.HotKeyCommands;

namespace Pharos.POS.Retailing
{
    /// <summary>
    /// PosWindow.xaml 的交互逻辑
    /// </summary>
    public partial class PosWindow : Window, IPosDataGrid, IBarcodeControl
    {
        public PosWindow(string appInfo, string winIcon, OperatingStatus status)
        {
            InitializeComponent();
            Application.Current.MainWindow = this;
            this.ApplyHotKeyBindings();

            CurrentModel = new PosViewModel(appInfo, winIcon, status);
            this.ApplyBindings(this, CurrentModel);
            CurrentIInputElement = txtBarcode;
            CurrentGrid = dgOrderList;
            this.Loaded += PosPage_Loaded;
            this.PreviewKeyDown += PosWindow_PreviewKeyDown;
            this.Closing += PosWindow_Closing;
        }

        void PosWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            Confirm.ShowMessage("确定退出程序？", this, (o =>
            {
                if (o == ConfirmMode.Confirmed)
                {
                    CurrentModel.ClearOrder.Execute(null);
                    this.Hide();
                    Task.Factory.StartNew(() =>
                    {
                        Thread.Sleep(1000);
                        Application.Current.Dispatcher.Invoke(new Action(() =>
                        {
                            Application.Current.Shutdown();
                        }));
                    });
                }
                else
                {
                    e.Cancel = true;
                }
            }));

        }

        void PosWindow_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            switch (e.Key)
            {
                case Key.Down:
                    if (CurrentGrid.SelectedIndex == -1 && CurrentModel.OrderList.Count > 0)
                    {
                        CurrentModel.SetScrollIntoView(0);
                    }
                    else if (CurrentModel.OrderList.Count > 0 && CurrentGrid.SelectedIndex < CurrentModel.OrderList.Count)
                    {
                        CurrentModel.SetScrollIntoView(CurrentGrid.SelectedIndex + 1);
                    }
                    e.Handled = true;
                    break;
                case Key.Up:
                    if (CurrentGrid.SelectedIndex == -1 && CurrentModel.OrderList.Count > 0)
                    {
                        CurrentModel.SetScrollIntoView(CurrentModel.OrderList.Count - 1);
                    }
                    else if (CurrentModel.OrderList.Count > 0 && CurrentGrid.SelectedIndex > 0)
                    {
                        CurrentModel.SetScrollIntoView(CurrentGrid.SelectedIndex - 1);
                    }
                    e.Handled = true;
                    break;
                case Key.Delete:
                    if (CurrentGrid.SelectedItem != null)
                    {
                        var product = (Product)CurrentGrid.SelectedItem;
                        product.RemoveCommand.Execute(null);
                        e.Handled = true;
                    }
                    break;
            }
        }

        public bool IsMonitoring { get; set; }

        public RawInput.RawKeyboard KeyboardDriver { get; set; }

        public System.Collections.Generic.Queue<RawInput.Win32.KeyAndState> EventQueue { get; set; }
        PosViewModel CurrentModel { get; set; }
        public DataGrid CurrentGrid { get; set; }
        public IInputElement CurrentIInputElement { get; set; }

        void PosPage_Loaded(object sender, RoutedEventArgs e)
        {
            this.ThreadFilterMessage();
            Keyboard.Focus(txtBarcode);
            Task.Factory.StartNew(() =>
            {
                this.Dispatcher.Invoke(new Action(() =>
                {
                    CurrentModel.ReadHandBillNumber.Execute(null);
                }));
            });
        }
        protected override void OnSourceInitialized(EventArgs e)
        {
            //   HwndSource source = PresentationSource.FromVisual(this) as HwndSource;
            HwndSource source = HwndSource.FromHwnd(new WindowInteropHelper(this).Handle);

            if (source != null)
            {
                source.AddHook(this.WndProc);
            }

            base.OnSourceInitialized(e);
        }

        private void SaleStatusTextBlock_MouseDown(object sender, MouseButtonEventArgs e)
        {
            switch (CurrentModel.PosStatus)
            {
                case PosStatus.Normal:
                    CurrentModel.PosStatus = PosStatus.Gift;
                    break;
                case PosStatus.Gift:
                    CurrentModel.PosStatus = PosStatus.Normal;
                    break;
            }
        }

        private void PrintStatusTextBlock_MouseDown(object sender, MouseButtonEventArgs e)
        {
            switch (CurrentModel.PrintStatus)
            {
                case PrintStatus.Open:
                    CurrentModel.PrintStatus = PrintStatus.Close;
                    break;
                case PrintStatus.Close:
                    CurrentModel.PrintStatus = PrintStatus.Open;
                    break;
            }
        }

        private void txtBarcode_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            var ctrl = sender as TextBox;
            if (e.Key == Key.Enter && string.IsNullOrEmpty(ctrl.Text.Trim()) && !ctrl.IsReadOnly)
            {
                new XianJinZhiFuCommand().Handler(this);
            }
            if (e.Key == Key.Enter)
            {
                ctrl.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));
                Keyboard.Focus(ctrl);
            }
        }

        private void KeyBoardSwitch_MouseDown(object sender, MouseButtonEventArgs e)
        {
            switch (PosViewModel.Current.InputMode)
            {
                case HotkeyMode.Close:
                    PosViewModel.Current.InputMode = HotkeyMode.Open;
                    break;
                case HotkeyMode.Open:
                    PosViewModel.Current.InputMode = HotkeyMode.Close;
                    break;
            }
        }



    }
}