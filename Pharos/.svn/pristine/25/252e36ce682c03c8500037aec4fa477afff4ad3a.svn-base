using Pharos.Logic.ApiData.Pos.DAL;
using Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity;
using Pharos.Logic.ApiData.Pos.Exceptions;
using Pharos.Logic.ApiData.Pos.Sale;
using Pharos.Logic.ApiData.Pos.ValueObject;
using Pharos.Logic.BLL;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.Services.LocalCeServices
{
    public class ProductRecordService : BaseGeneralService<ProductRecord, LocalCeDbContext>
    {
        /// <summary>
        /// 适配多条码串、一品多码、价格（变价、一品多价、系统售价）
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="barcode"></param>
        /// <param name="token"></param>
        /// <returns></returns>
        public static ProductInfo GetProductRecod(string storeId, string barcode, int token)
        {
            throw new NotImplementedException();

            IQueryable<ProductInfo> query = null;///Todo GetProduct
            ProductInfo result = query.FirstOrDefault();
            if (result == null)
            {
                throw new SaleException("605", string.Format("未找到商品【{0}】！", barcode));
            }
            if (result.ProductType == ProductType.Weigh)
            {
                throw new SaleException("604", "散称商品请过称！");
            }
            if (!string.IsNullOrEmpty(result.MultiCodes))
            {
                result.MultiCode = result.MultiCodes.Split(",".ToArray(), StringSplitOptions.RemoveEmptyEntries);
            }
            return result;
        }

        internal static ProductInfo GetProductRecodByProductCode(string storeId, string productCode, int token)
        {

            throw new NotImplementedException();

        }

        public static IEnumerable<InventoryResult> CheckedPrice(string storeId, int token, IEnumerable<int> categorySns, decimal from, decimal to)
        {
            ///Todo CheckedPrice
            throw new NotImplementedException();

        }



        internal static PageResult<InventoryResult> CheckedPrice(string StoreId, int CompanyToken, IEnumerable<int> categorySns, decimal from, decimal to, int pageSize, int pageIndex)
        {
            ///Todo CheckedPrice
            throw new NotImplementedException();
        }

        internal static PageResult<InventoryResult> CheckedInventory(string StoreId, int CompanyToken, IEnumerable<int> categorySns, string keyword, int pageSize, int pageIndex)
        {
            ///Todo CheckedInventory
            throw new NotImplementedException();
        }
    }
}
