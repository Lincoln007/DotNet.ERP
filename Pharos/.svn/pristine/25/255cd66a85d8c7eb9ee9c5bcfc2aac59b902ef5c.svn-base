using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using System.Xml.Linq;
using Pharos.Wpf.Extensions;

namespace Pharos.Wpf.HotKeyHelper
{
    public static class HotKey
    {
        private const string COFINGFILE = "PharosHotKeyRules.Config";
        static HotKey()
        {
            Rules = new List<HotKeyRule>();
        }
        /// <summary>
        /// 过滤器
        /// </summary>
        public static Func<HotKeyRule, bool> Filter { get; set; }
        /// <summary>
        /// 快捷键全部设置
        /// </summary>
        public static List<HotKeyRule> Rules { get; private set; }

        public static void LoadConfig()
        {
            XDocument doc = XDocument.Load(COFINGFILE);
            HotKey.Rules = doc.Element("Settings").Elements("HotKeyRule")
                .Select(o =>
                    new HotKeyRule()
                    {
                        Name = o.Attribute("Name").Value,
                        Title = o.Attribute("Title").Value,
                        IsShowInHelp = o.Attribute("IsShowInHelp") != null ? Convert.ToBoolean(o.Attribute("IsShowInHelp").Value) : true,
                        IsShowInMainWindow = o.Attribute("IsShowInMainWindow") != null ? Convert.ToBoolean(o.Attribute("IsShowInMainWindow").Value) : false,
                        Keys = o.Attribute("Keys").Value,
                        Effectivity = new List<Type>().InitListType(o.Elements("Effect")),
                        EnableSet = o.Attribute("EnableSet") != null ? Convert.ToBoolean(o.Attribute("EnableSet").Value) : false
                    }
                    ).ToList();

        }

        public static void SaveConfig()
        {
            XDocument doc = new XDocument();
            var element = new XElement("Settings");
            foreach (var item in Rules)
            {
                var cmdType = item.Command.GetType();
                XElement node = new XElement(
                    "HotKeyRule",
                    new XAttribute("Name", item.Name),
                    new XAttribute("Keys", item.Keys),
                    new XAttribute("Title", item.Title),
                    new XAttribute("IsShowInHelp", item.IsShowInHelp),
                    new XAttribute("IsShowInMainWindow", item.IsShowInMainWindow),
                    new XAttribute("EnableSet", item.EnableSet)
                    );

                foreach (var childItem in item.Effectivity)
                {
                    XElement effectList = new XElement("Effect", childItem);
                    node.Add(effectList);
                }
                element.Add(node);
            }
            doc.Add(element);
            doc.Save(COFINGFILE);
        }
        /// <summary>
        /// 从窗体绑定热键
        /// </summary>
        /// <param name="win"></param>
        public static void ApplyHotKeyBindings(this Window win)
        {
            win.PreviewKeyDown += win_PreviewKeyDown;
        }

        static void win_PreviewKeyDown(object sender, KeyEventArgs e)
        {

            var keys = Keyboard.Modifiers.ToString();
            var modifierKeys = keys.Replace(",", "+");
            if (modifierKeys == "None")
            {
                modifierKeys = string.Empty;
            }

            string key = string.Empty;
            switch (e.Key)
            {
                case Key.LeftAlt:
                case Key.LeftCtrl:
                case Key.LeftShift:
                case Key.RightAlt:
                case Key.RightCtrl:
                case Key.RightShift:
                    break;
                case Key.System:
                    switch (e.SystemKey)
                    {
                        case Key.LeftAlt:
                        case Key.LeftCtrl:
                        case Key.LeftShift:
                        case Key.RightAlt:
                        case Key.RightCtrl:
                        case Key.RightShift:
                            break;
                        default:
                            key = e.SystemKey.ToString();
                            break;
                    }
                    break;
                default:
                    key = e.Key.ToString();
                    break;

            }
            if (!string.IsNullOrEmpty(modifierKeys) && !string.IsNullOrEmpty(key))
            {
                modifierKeys += "+";
            }
            var hotKey = string.Format("{0}{1}", modifierKeys, key);
            // Regex regex = new Regex("");
            var activeRule = Rules.FirstOrDefault(o => o.Keys.VerfyKey(hotKey) && o.Effectivity.Contains(sender.GetType()));
            if (activeRule != null)
            {
                if ((Filter != null && Filter(activeRule)) || Filter == null)
                {
                    activeRule.Command.Handler(sender as Window);
                    e.Handled = true;
                }
            }
        }

        public static bool VerfyKey(this string keys, string key)
        {
            var keyArr = keys.Split(";".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            return keyArr.Contains(key);
        }
    }



}
