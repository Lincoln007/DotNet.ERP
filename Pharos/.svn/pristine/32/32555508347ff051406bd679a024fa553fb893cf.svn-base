using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.IDAL;
using Pharos.Logic.OMS.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pharos.Utility.Helpers;
using Pharos.Logic.OMS.DAL;
using System.ComponentModel;
using QCT.Pay.Common;
using QCT.Pay.Common.Models;

namespace Pharos.Logic.OMS.BLL
{
    /// <summary>
    /// 支付接口Service类
    /// </summary>
    public class PayTradeService : IPayTradeService
    {
        /// <summary>
        /// 支付订单记录仓储
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<TradeOrder> TradeOrderRepost { get; set; }
        /// <summary>
        /// 支付结果通知仓储
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<TradeResult> TradeResultRepost { get; set; }
        /// <summary>
        /// 商家支付许可
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<PayLicense> TPayLicenseRepost { get; set; }
        /// <summary>
        /// 商家支付主密钥
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<TradersPaySecretKey> TPaySecretKeyRepost { get; set; }
        /// <summary>
        /// 商家支付通道
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<TradersPayChannel> TPayChannelRepost { get; set; }
        /// <summary>
        /// 商家门店
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<TradersStore> TStoreRepost { get; set; }
        /// <summary>
        /// 商家门店支付通道
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<TradersStorePayChannel> TStorePayChannelRepost { get; set; }
        /// <summary>
        /// 收单渠道
        /// </summary>
        [Ninject.Inject]        
        IBaseRepository<PayChannelManage> PayChannelMgRepost { get; set; }
        /// <summary>
        /// 收单渠道细目
        /// </summary>
        [Ninject.Inject]
        IBaseRepository<PayChannelDetail> PayChannelDetailRepost { get; set; }
        /// <summary>
        /// 交易支付接口Service
        /// </summary>
        [Ninject.Inject]
        PayApiService PayApiSvc { get; set; }

        /// <summary>
        /// 日志记录引擎
        /// </summary>
        [Ninject.Inject]
        protected LogEngine LogEngine { get; set; }

        /// <summary>
        /// 检查商户通道是否可用
        /// </summary>
        /// <param name="cid"></param>
        /// <param name="method"></param>
        /// <returns></returns>
        public QctPayReturn CheckMerchAccess(int cid, string method, decimal version,short optType)
        {
            var tplObj = TPayLicenseRepost.GetQuery(o => o.CID == cid && o.State == (short)PayLicenseState.Enabled).FirstOrDefault();
            if (tplObj == null)
                return QctPayReturn.Fail(msg: "请先申请支付许可");
            var payApiObj = PayApiSvc.GetPayApiByInfo(method, version);
            if (payApiObj == null)
                return QctPayReturn.Fail(msg: "非法支付接口参数名");
            var merchObj = GetMerchByID(cid, payApiObj.ChannelNo, payApiObj.ChannelPayMode, optType);
            if (merchObj == null)
                return QctPayReturn.Fail(msg: "找不到对应商户密钥配置信息，请先申请开通商户");
            merchObj.SourceType = tplObj.SourceType;
            merchObj.ApiNo = payApiObj.ApiNo;
            merchObj.Method = payApiObj.Method;
            return QctPayReturn.Success(data: merchObj);
        }

        /// <summary>
        /// 创建商户主扫支付动态二维码订单
        /// </summary>
        /// <param name="pms"></param>
        /// <param name="secretKey3"></param>
        /// <returns></returns>
        public TradeOrder CreateBuyerScanDynaOrder(PayBuyerScanDynaRequest pms, TradersChannelModel merchObj)
        {
            var hasOutTradeNo = HasTradeOrder(pms.CID, pms.OutTradeNo);
            if (!hasOutTradeNo)
            {
                var storeObj = GetMerchStoreByStoreId(merchObj, pms.SID);
                pms.ResetPayNotifyUrl(merchObj.PayNotifyUrl);
                if (merchObj != null && storeObj != null)
                {
                    var tradeRcd = new TradeOrder(pms, storeObj)
                    {
                        TradeNo = NewTradeNo,
                        OutTradeNo = pms.OutTradeNo,
                        TotalAmount = pms.TotalAmount,
                        SourceType = merchObj.SourceType,
                        ApiNo = merchObj.ApiNo,
                        State = (short)PayState.NotPay,
                        PayNotifyUrl = pms.PayNotifyUrl,
                        Fee = PayRules.CalcFee(pms.TotalAmount, merchObj),
                        OrderType3 = short.Parse(pms.OrderType3),
                        TradeType = (short)QctTradeType.Income,
                        FeeType = (short)FeeType.RMB,
                        BuyerMobile = ""
                    };
                    using (var trans = new EFDbContext().Database.BeginTransaction())
                    {
                        TradeOrderRepost.Add(tradeRcd, false);
                        var result = TradeOrderRepost.SaveChanges();
                        if (result)
                        {
                            return tradeRcd;
                        }
                    }
                }
            }

            return null;
        }
        /// <summary>
        /// 创建商户被扫支付订单
        /// </summary>
        /// <param name="pms"></param>
        /// <param name="secretKey3"></param>
        /// <returns></returns>
        public TradeOrder CreateBuyerScanDynaOrder(PayMerchScanRequest pms, TradersChannelModel merchObj)
        {
            var hasOutTradeNo = HasTradeOrder(pms.CID, pms.OutTradeNo);
            if (!hasOutTradeNo)
            {
                var storeObj = GetMerchStoreByStoreId(merchObj, pms.SID);
                pms.ResetPayNotifyUrl(merchObj.PayNotifyUrl);

                if (merchObj != null && storeObj != null)
                {
                    var tradeRcd = new TradeOrder(pms, storeObj)
                    {
                        TradeNo = NewTradeNo,
                        OutTradeNo = pms.OutTradeNo,
                        TotalAmount = pms.TotalAmount,
                        BuyerPayToken = pms.BuyerPayToken,
                        SourceType = merchObj.SourceType,
                        ApiNo = merchObj.ApiNo,
                        State = (short)PayState.NotPay,
                        PayNotifyUrl = pms.PayNotifyUrl,
                        //Fee = PayRules.CalcFee(reqParams.TotalAmount, mchObj.MchRate),
                        OrderType3 = short.Parse(pms.OrderType3),
                        TradeType = (short)QctTradeType.Income,
                        FeeType = (short)FeeType.RMB,
                        BuyerMobile = ""
                    };
                    using (var trans = new EFDbContext().Database.BeginTransaction())
                    {
                        TradeOrderRepost.Add(tradeRcd, false);
                        var result = TradeOrderRepost.SaveChanges();
                        if (result)
                        {
                            return tradeRcd;
                        }
                    }
                }
            }
            return null;
        }
        /// <summary>
        /// 创建商户退款申请单
        /// </summary>
        /// <param name="pms"></param>
        /// <param name="secretKey3"></param>
        /// <returns></returns>
        public TradeOrder CreateRefundApplyOrder(RefundApplyRequest pms, TradersChannelModel merchObj)
        {
            var hasOutTradeNo = HasTradeOrder(pms.CID, pms.OutTradeNo);
            if (!hasOutTradeNo)
            {
                var storeObj = GetMerchStoreByStoreId(merchObj, pms.SID);
                pms.ResetRfdNotifyUrl(merchObj.PayNotifyUrl);

                if (merchObj != null && storeObj != null)
                {
                    var tradeRcd = new TradeOrder(pms, storeObj)
                    {
                        TradeNo = NewTradeNo,
                        OutTradeNo = pms.OutTradeNo,
                        OldOutTradeNo = pms.OldOutTradeNo,
                        TotalAmount = pms.RefundAmount,
                        SourceType = merchObj.SourceType,
                        ApiNo = merchObj.ApiNo,
                        State = (short)RefundState.RefundIng,
                        RfdNotifyUrl = pms.RfdNotifyUrl,
                        Fee = (short)FeeType.RMB,
                        OrderType3 = ((short)SxfOrderType.CommonOrder),
                        TradeType = (short)QctTradeType.Expense,
                        FeeType = (short)FeeType.RMB,
                        BuyerMobile = ""
                    };
                    using (var trans = new EFDbContext().Database.BeginTransaction())
                    {
                        TradeOrderRepost.Add(tradeRcd, false);
                        var result = TradeOrderRepost.SaveChanges();
                        if (result)
                        {
                            return tradeRcd;
                        }
                    }
                }
            }
            return null;
        }
        /// <summary>
        /// 保存被扫支付结果
        /// </summary>
        /// <returns></returns>
        public bool SaveMerchScanResult(SxfScanPayResponse sxfResult, out TradeOrder order)
        {
            var tradeResult = new TradeResult(sxfResult);
            var succ = SaveMchTradeResult(tradeResult, out order);
            return succ;
        }
        /// <summary>
        /// 保存支付返回结果
        /// </summary>
        /// <param name="tradeResult"></param>
        /// <returns></returns>
        public bool SaveMchTradeResult(TradeResult tradeResult, out TradeOrder tradeOrder)
        {
            //fishtodo:保存交易结果
            tradeOrder = null;
            try
            {
                var tradeResultObj = TradeResultRepost.GetQuery(o => o.OutTradeNo == tradeResult.OutTradeNo).FirstOrDefault();
                //using (var trans = new EFDbContext().Database.BeginTransaction())
                //{
                if (tradeResultObj != null)
                {
                    tradeResult.ToCopyProperty(tradeResultObj, new List<string>() { "CreateDT", "OutTradeNo", "Id" });
                }
                else
                {
                    TradeResultRepost.Add(tradeResult);
                }
                LogEngine.WriteError(string.Format("[SaveMchTradeResult1#调试#{0}]{1}", tradeResult.ToJson(), ""), null, LogModule.支付交易);
                //变更TradeOrder数据状态
                tradeOrder = TradeOrderRepost.GetQuery(o => o.OutTradeNo == tradeResult.OutTradeNo && o.MchId3 == tradeResult.MchId3).FirstOrDefault();
                tradeOrder.ReceiptAmount = tradeResult.ReceiptAmount;
                tradeOrder.TradeNo3 = tradeResult.TradeNo3;
                tradeOrder.State = tradeResult.TradeState;
                tradeOrder.TradeDate = tradeResult.TradeDate;
                tradeOrder.TradeTime = tradeResult.TradeTime;
                tradeOrder.UpdateDT = DateTime.Now;
                tradeOrder.PayChannel = tradeResult.PayChannel;
                var result = TradeResultRepost.SaveChanges();
                var result1 = TradeOrderRepost.SaveChanges();
                return result;
                //}
            }
            catch (Exception ex)
            {
                LogEngine.WriteError(string.Format("[SaveMchTradeResult2#保存后台结果通知并更新状态#{0}]{1}", tradeResult.OutTradeNo, ex.Message), ex, LogModule.支付交易);
                return false;
            }
        }
        /// <summary>
        /// 根据第三方商户号，商户订单号获得唯一订单
        /// </summary>
        /// <param name="mchId3"></param>
        /// <param name="outTradeNo"></param>
        /// <returns></returns>
        public TradeOrder GetTradeOrder(string mchId3, string outTradeNo)
        {
            var trade = TradeOrderRepost.GetQuery(o => o.MchId3 == mchId3 && o.OutTradeNo == outTradeNo).FirstOrDefault();
            return trade;
        }
        /// <summary>
        /// 判断是否存在商户订单
        /// </summary>
        /// <param name="cid"></param>
        /// <param name="outTradeNo"></param>
        /// <returns></returns>
        public bool HasTradeOrder(int cid, string outTradeNo)
        {
            var order = TradeOrderRepost.GetQuery(o => o.CID == cid && o.OutTradeNo == outTradeNo).FirstOrDefault();
            if (order != null)
                return true;
            else
                return false;
        }

        /// <summary>
        /// 获取最大订单交易流水号
        /// </summary>
        /// <param name="prefix"></param>
        /// <returns></returns>
        public string GetMaxTradeNo(string prefix)
        {
            var result = TradeOrderRepost.GetQuery(o => o.TradeNo.StartsWith(prefix)).Max(o => o.TradeNo);
            return result;
        }
        static object objlock = new object();
        /// <summary>
        /// 生成支付交易流水号
        /// </summary>
        public string NewTradeNo
        {
            get
            {
                lock (objlock)
                {
                    var prefix = DateTime.Now.ToString("yyyyMMddHHmmss");
                    var maxNo = GetMaxTradeNo(prefix);
                    int defNo = 0;
                    if (!string.IsNullOrEmpty(maxNo))
                        defNo = int.Parse(maxNo.Substring(14));
                    defNo++;
                    return prefix + defNo.ToString("0000");
                }
            }
        }

        #region 商户、商户门店、收单渠道、商户收单渠道费率信息
        /// <summary>
        /// 根据商户ID及收单渠道编号获取商户信息 fishtodo:待确认查询接口的操作类型
        /// </summary>
        /// <param name="cid"></param>
        /// <param name="channelNo"></param>
        /// <returns></returns>
        public TradersChannelModel GetMerchByID(int cid, int channelNo, short channelPayMode, short optType)
        {
            var query = (from tpsk in TPaySecretKeyRepost.GetQuery()
                         join jtpc in TPayChannelRepost.GetQuery() on tpsk.TPaySecrectId equals jtpc.TPaySecrectId into itpc
                         from tspc in itpc.DefaultIfEmpty()
                         where tpsk.State == (short)TradersState.Enabled && tspc.State == (short)TradersState.Enabled
                         && tpsk.CID == cid && tspc.ChannelNo == channelNo
                         select new TradersChannelModel()
                         {
                             CID = tpsk.CID,
                             SecretKey = tpsk.SecretKey,
                             MerchId3 = tspc.MchId3,
                             SecretKey3 = tspc.SecretKey3,
                             ChannelNo = tspc.ChannelNo,
                             PayNotifyUrl = tspc.PayNotifyUrl,
                             RfdNotifyUrl = tspc.RfdNotifyUrl,
                             ChannelPayMode = channelPayMode,
                             OptType = optType
                         });
            return query.FirstOrDefault();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="merchObj"></param>
        /// <param name="sid"></param>
        /// <returns></returns>
        public TradersStoreChannelModel GetMerchStoreByStoreId(TradersChannelModel merchObj, int sid)
        {
            var query = from tstore in TStoreRepost.GetQuery()
                        join jtspc in TStorePayChannelRepost.GetQuery() on tstore.TStoreInfoId equals jtspc.TStoreInfoId into itspc
                        from tspc in itspc.DefaultIfEmpty()
                        join jtpc in TPayChannelRepost.GetQuery() on tspc.TPayChannelId equals jtpc.TPayChannelId into itpc
                        from tpc in itpc.DefaultIfEmpty()
                        where tstore.CID == merchObj.CID && tstore.StoreNum == sid
                        && tpc.ChannelNo == merchObj.ChannelNo
                        select new TradersStoreChannelModel()
                        {
                            SID = tstore.StoreNum,
                            StoreId3 = tspc.StoreNum3
                        };
            var store = query.FirstOrDefault();
            var obj = new TradersStoreChannelModel(merchObj);
            obj.SID = store.SID;
            obj.StoreId3 = store.StoreId3;
            return obj;
        }
        ///// <summary>
        ///// 根据CID获取商户支付账户信息
        ///// </summary>
        ///// <param name="cid"></param>
        ///// <returns></returns>
        //public TradersChannelModel GetMerchByID(int cid)
        //{
        //    var query = (from tpsk in TPaySecretKeyRepost.GetQuery()
        //                 join jtpl in TPayLicenseRepost.GetQuery() on tpsk.CID equals jtpl.CID into itpl
        //                 from tpl in itpl.DefaultIfEmpty()
        //                 join jtpc in TPayChannelRepost.GetQuery() on tpsk.TPaySecrectId equals jtpc.TPaySecrectId into itpc
        //                 from tspc in itpc.DefaultIfEmpty()
        //                 where tpsk.State == (short)TradersState.Enabled && tspc.State == (short)TradersState.Enabled
        //                 && tpsk.CID == cid
        //                 select new TradersChannelModel()
        //                 {
        //                     CID = tpsk.CID,
        //                     SecretKey = tpsk.SecretKey,
        //                     MerchId3 = tspc.MchId3,
        //                     SecretKey3 = tspc.SecretKey3,
        //                     SourceType = tpl.SourceType,
        //                     PayNotifyUrl = tspc.PayNotifyUrl,
        //                     RfdNotifyUrl = tspc.RfdNotifyUrl
        //                 });
        //    return query.FirstOrDefault();
        //}

        ///// <summary>
        ///// 根据根据第三方商户号获取商户支付账户信息
        ///// </summary>
        ///// <param name="mchId"></param>
        ///// <returns></returns>
        //public TradersChannelModel GetMerchByID3(string mchId)
        //{
        //    var query = (from tpc in TPayChannelRepost.GetQuery()
        //                 join jtpsk in TPaySecretKeyRepost.GetQuery() on tpc.TPaySecrectId equals jtpsk.TPaySecrectId into itpsk
        //                 from tpsk in itpsk.DefaultIfEmpty()
        //                 join jtpl in TPayLicenseRepost.GetQuery() on tpsk.CID equals jtpl.CID into itpl
        //                 from tpl in itpl.DefaultIfEmpty()
        //                 where tpc.State == (short)TradersState.Enabled && tpsk.State == (short)TradersState.Enabled
        //                 && tpc.MchId3==mchId
        //                 select new TradersChannelModel()
        //                 {
        //                     CID = tpsk.CID,
        //                     SecretKey = tpsk.SecretKey,
        //                     MerchId3 = tpc.MchId3,
        //                     SecretKey3 = tpc.SecretKey3,
        //                     SourceType = tpl.SourceType,
        //                     PayNotifyUrl = tpc.PayNotifyUrl,
        //                     RfdNotifyUrl = tpc.RfdNotifyUrl
        //                 });
        //    return query.FirstOrDefault();
        //}
        ///// <summary>
        ///// 根据商户号及门店号获取商户信息
        ///// </summary>
        ///// <param name="mchId"></param>
        ///// <param name="storeId"></param>
        ///// <returns></returns>
        //public TradersStoreChannelModel GetMerchStoreByStoreId(int cid, int sid)
        //{
        //    var query = from tstore in TStoreRepost.GetQuery()
        //                join jtpsk in TPaySecretKeyRepost.GetQuery() on tstore.CID equals jtpsk.CID into itpsk
        //                from tpsk in itpsk.DefaultIfEmpty()
        //                join jtpl in TPayLicenseRepost.GetQuery() on tpsk.CID equals jtpl.CID into itpl
        //                from tpl in itpl.DefaultIfEmpty()
        //                join jtspc in TStorePayChannelRepost.GetQuery() on tstore.TStoreInfoId equals jtspc.TStoreInfoId into itspc
        //                from tspc in itspc.DefaultIfEmpty()
        //                join jtpc in TPayChannelRepost.GetQuery() on tspc.TPayChannelId equals jtpc.TPayChannelId into itpc
        //                from tpc in itpc.DefaultIfEmpty()
        //                where tpsk.State == (short)TradersState.Enabled && tspc.State == (short)TradersState.Enabled
        //                && tpsk.CID == cid && tstore.StoreNum == sid
        //                select new TradersStoreChannelModel()
        //                {
        //                    CID = tstore.CID,
        //                    SecretKey = tpsk.SecretKey,
        //                    SID = tstore.StoreNum,
        //                    MerchId3 = tpc.MchId3,
        //                    SecretKey3 = tpc.SecretKey3,
        //                    StoreId3 = tspc.StoreNum3,
        //                    SourceType = tpl.SourceType,
        //                    PayNotifyUrl = tpc.PayNotifyUrl,
        //                    RfdNotifyUrl = tpc.RfdNotifyUrl
        //                };
        //    return query.FirstOrDefault();
        //}
        ///// <summary>
        ///// 根据第三方商户号及第三方门店号获取商户信息
        ///// </summary>
        ///// <param name="mchId"></param>
        ///// <param name="storeId"></param>
        ///// <returns></returns>
        //public TradersStoreChannelModel GetMerchStoreByStoreId3(string mchId3, string storeId3)
        //{
        //    var query = from tstore in TStoreRepost.GetQuery()
        //                join jtpsk in TPaySecretKeyRepost.GetQuery() on tstore.CID equals jtpsk.CID into itpsk
        //                from tpsk in itpsk.DefaultIfEmpty()
        //                join jtpl in TPayLicenseRepost.GetQuery() on tpsk.CID equals jtpl.CID into itpl
        //                from tpl in itpl.DefaultIfEmpty()
        //                join jtspc in TStorePayChannelRepost.GetQuery() on tstore.TStoreInfoId equals jtspc.TStoreInfoId into itspc
        //                from tspc in itspc.DefaultIfEmpty()
        //                join jtpc in TPayChannelRepost.GetQuery() on tspc.TPayChannelId equals jtpc.TPayChannelId into itpc
        //                from tpc in itpc.DefaultIfEmpty()
        //                where tpsk.State == (short)TradersState.Enabled && tspc.State == (short)TradersState.Enabled
        //                && tpc.MchId3 == mchId3 && tspc.StoreNum3 == storeId3
        //                select new TradersStoreChannelModel()
        //                {
        //                    CID = tstore.CID,
        //                    SecretKey = tpsk.SecretKey,
        //                    SID = tstore.StoreNum,
        //                    MerchId3 = tpc.MchId3,
        //                    SecretKey3 = tpc.SecretKey3,
        //                    StoreId3 = tspc.StoreNum3,
        //                    SourceType = tpl.SourceType,
        //                    PayNotifyUrl = tpc.PayNotifyUrl,
        //                    RfdNotifyUrl = tpc.RfdNotifyUrl
        //                };
        //    return query.FirstOrDefault();
        //}
        #endregion
    }
}
