using Pharos.Logic.OMS.DAL;
using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.IDAL;
using Pharos.Utility;
using Pharos.Utility.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Web;


namespace Pharos.Logic.OMS.BLL
{
    /// <summary>
    /// BLL商家支付许可档案
    /// </summary>
    public class PayLicenseService : BaseService<PayLicense>
    {
        [Ninject.Inject]
        // 商户资料
        IBaseRepository<Traders> TradersRepository { get; set; }

        // 商家支付许可档案
        [Ninject.Inject]
        IPayLicenseRepository pRepository { get; set; }


        [Ninject.Inject]
        IBaseRepository<Area> areaRepository { get; set; }

        [Ninject.Inject]
        //BLL-----商户资料
        TradersService tradersService { get; set; }

        [Ninject.Inject]
        //代理商档案BLL
        AgentsInfoService agentsInfoService { get; set; }

        /// <summary>
        /// 获取CID
        /// </summary>
        /// <param name="nvl"></param>
        /// <returns></returns>
        public List<Traders> GetCIDWhere(System.Collections.Specialized.NameValueCollection nvl)
        {
            //关键字
            var keyword = (nvl["keyword"] ?? "").Trim();
            string keyw = "'"+keyword+"%'";
            return pRepository.getListCID(keyw);
        }

        /// <summary>
        /// 获取城市
        /// </summary>
        /// <param name="nvl"></param>
        /// <returns></returns>
        public List<Area> GetCityWhere(System.Collections.Specialized.NameValueCollection nvl)
        {
            //关键字
            var keyword = (nvl["keyword"] ?? "").Trim();
            var query = areaRepository.GetQuery();

            query = query.Where(o => o.Type==3);
            if (!keyword.IsNullOrEmpty())
            {
                query = query.Where(o => o.Title.StartsWith(keyword)||o.QuanPin.StartsWith(keyword));
            }
            else
            {
                query = query.Where(o => o.AreaID == -1);
            }
            return query.Take(30).ToList();
        }

        /// <summary>
        /// 城市是否存在
        /// </summary>
        /// <param name="AreaID"></param>
        /// <returns></returns>
        public bool isExistCity(int AreaID)
        {
            var query = areaRepository.GetQuery(o=>o.AreaID==AreaID&&o.Type==3);
            if (query.Any())
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 验证
        /// </summary>
        /// <param name="nvl"></param>
        /// <param name="fileCollection"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public OpResult Verification(System.Collections.Specialized.NameValueCollection nvl, HttpFileCollectionBase fileCollection,int id)
        {
            //商户号
            var CID = (nvl["CID"] ?? "").Trim();
            //服务商号
            var AgentsId = (nvl["AgentsId"] ?? "").Trim();
            //营业期限开始日期
            var OperatingStartDate = (nvl["OperatingStartDate"] ?? "").Trim();
            //营业期限结束日期
            var OperatingEndDate = (nvl["OperatingEndDate"] ?? "").Trim();
            //开户银行城市
            var BankCityId = (nvl["BankCityId"] ?? "").Trim();
            //资质或证件
            HttpPostedFileBase file1 = fileCollection[0];
            //企业证件
            HttpPostedFileBase file2 = fileCollection[1];
            //身份证正面
            HttpPostedFileBase file3 = fileCollection[2];
            //身份证反面
            HttpPostedFileBase file4 = fileCollection[3];

            if (CID != "")
            {
                if (!Tool.IsNumber(CID))
                {
                    return OpResult.Fail("商户号不存在或该商户号不是已审");
                }
                else
                {
                    int cid = Convert.ToInt32(CID);
                    if (!tradersService.isExistByWhere(o => o.Status == 1 && o.CID == cid))
                    {
                        return OpResult.Fail("商户号不存在或该商户号不是已审");
                    }
                }
            }

            bool isExist = false;
            if (id == 0)
            {
                isExist = isExistByWhere(o => o.CID == Convert.ToInt32(CID) && o.State != 8 && o.State != 10);
            }
            else
            {
                isExist = isExistByWhere(o => o.CID == Convert.ToInt32(CID) && o.State != 8 && o.State != 10&&o.Id!=id);
            }
            if (isExist)
            {
                return OpResult.Fail("该商户号已经申请过支付许可，无法重复申请");
            }

            if (AgentsId != "")
            {
                if (!Tool.IsNumber(AgentsId))
                {
                    return OpResult.Fail("服务商号不存在");
                }
                else
                {
                    int agentsId = Convert.ToInt32(AgentsId);
                    //未修改
                    if (!agentsInfoService.isExistByWhere(o=>o.AgentsId==agentsId))
                    {
                        return OpResult.Fail("服务商号不存在");
                    }
                }
            }

            if (OperatingStartDate != "" && OperatingEndDate!="")
            {
                DateTime startDateTime = Convert.ToDateTime(OperatingStartDate);
                startDateTime = startDateTime.AddMonths(4);
                DateTime endDateTime = Convert.ToDateTime(OperatingEndDate);
                if (DateTime.Compare(startDateTime, endDateTime) >= 0)
                {
                    return OpResult.Fail("营业期限结束日期必须大于开始日期4个月");
                }
            }

            if (BankCityId != "")
            {
                if (!Tool.IsNumber(BankCityId))
                {
                    return OpResult.Fail("开户银行城市不存在");
                }
                else
                {
                    int bankCityId = Convert.ToInt32(BankCityId);
                    if (!isExistCity(bankCityId))
                    {
                        return OpResult.Fail("开户银行城市不存在");
                    }
                }
            }

            string format = "*.jpg,*.jpeg,*.gif,*.png,*.bmp";

            string f1 = Tool.ValidateFile(file1, 1000, format);
            if (f1 != "success")
            {
                return OpResult.Fail("资质或证件" + f1);
            }

            string f2 = Tool.ValidateFile(file2, 1000, format);
            if (f2 != "success")
            {
                return OpResult.Fail("企业证件" + f2);
            }

            string f3 = Tool.ValidateFile(file3, 1000, format);
            if (f3 != "success")
            {
                return OpResult.Fail("身份证正面" + f3);
            }

            string f4 = Tool.ValidateFile(file4, 1000, format);
            if (f4 != "success")
            {
                return OpResult.Fail("身份证反面" + f4);
            }

            return OpResult.Success();
        }
    }
}
