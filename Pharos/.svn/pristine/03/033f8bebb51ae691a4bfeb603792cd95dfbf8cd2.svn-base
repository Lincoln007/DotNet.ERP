using Pharos.Logic.ApiData.Pos.DataAdapter;
using Pharos.Logic.ApiData.Pos.Sale.Barcodes;
using Pharos.Logic.ApiData.Pos.Sale.Members;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pharos.Logic.ApiData.Pos.Sale.Marketings
{
    /// <summary>
    /// 促销活动限制规则
    /// </summary>
    public class MarketingRule
    {

        public string Id { get; set; }

        /// <summary>
        /// 促销名称
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// 促销类型
        /// </summary>
        public MarketingType Type { get; set; }

        /// <summary>
        /// 是否已过时
        /// </summary>
        public bool IsTimeOut { get; set; }

        /// <summary>
        /// 促销是否可用
        /// </summary>
        public bool Enable { get; set; }
        /// <summary>
        /// 创建规则日期
        /// </summary>
        public DateTime CreateRuleDate { get; set; }

        /// <summary>
        /// 促销活动规则计量模式
        /// </summary>
        public MeteringMode MeteringMode { get; set; }
        /// <summary>
        /// 条码范围
        /// </summary>
        public IEnumerable<string> BarcodeRange { get; set; }

        /// <summary>
        /// 不参与条码
        /// </summary>
        public IEnumerable<string> IgnoreBarcodeRange { get; set; }
        /// <summary>
        /// 规则数量
        /// </summary>
        public decimal RuleNumber { get; set; }
        /// <summary>
        /// 每天限购量（销售数量，不是次数） 
        /// </summary>
        public decimal RestrictionBuyCount { get; set; }

        public MarketingQuotaMode MarketingQuotaMode { get; set; }

        /// <summary>
        /// 客户类型
        /// </summary>
        public Sale.Members.CustomerType CustomerType { get; set; }

        /// <summary>
        /// 促销活动
        /// </summary>
        public MarketingAction MarketingAction { get; set; }

        /// <summary>
        /// 匹配
        /// </summary>
        /// <param name="shoppingCart">购物车</param>
        /// <returns>促销活动上下文</returns>
        internal MarketingContext Match(ShoppingCart shoppingCart, string storeId)
        {
            MarketingContext result = MarketingContext.Empty;
            this.IsTimeOut = false;

            //判断规则是否可用
            if (!Enable)
            {
                goto Return;
            }


            var defualtDataAdapter = DataAdapterFactory.Factory(MachinesSettings.Mode, shoppingCart.MachineInformation.StoreId, shoppingCart.MachineInformation.MachineSn, shoppingCart.MachineInformation.CompanyToken);
            //处理限购量
            if (MarketingQuotaMode != MarketingQuotaMode.NotLimit)
            {
                var soldNumber = defualtDataAdapter.GetMarketingRecordNumber(Id, MarketingQuotaMode);
                var enableContinue = RestrictionBuyCount > soldNumber;
                if (!enableContinue)
                {
                    goto Return;
                }
            }


            //处理会员、内部员工、普通消费
            var memberType = MemberCardManager.GetMemberType(storeId, defualtDataAdapter.MachineSN, defualtDataAdapter.CompanyToken, shoppingCart.MemberId, MembersSourseMode.Internal);
            switch (CustomerType)
            {
                case Members.CustomerType.Whole:
                    break;
                case Members.CustomerType.Insider:
                    if (CustomerType != memberType)
                    {
                        goto Return;
                    }
                    break;
                case Members.CustomerType.VIP:
                    if (memberType == Members.CustomerType.VIP || memberType == Members.CustomerType.Insider)
                    {
                        goto Return;
                    }
                    break;
                default:
                    goto Return;
            }

            if (CustomerType != memberType)
            {
                goto Return;
            }


            //处理默认值
            if (BarcodeRange == null)
            {
                BarcodeRange = new List<string>();
            }
            if (IgnoreBarcodeRange == null)
            {
                IgnoreBarcodeRange = new List<string>();
            }

            //配购物车
            var matchRanges = new List<IBarcode>();
            var orderList = shoppingCart.OrderList;
            foreach (var barcode in orderList)
            {
                if (
                    barcode.EnableMarketing &&
                    (
                        BarcodeRange.Contains(barcode.CurrentString) ||
                        BarcodeRange.Count() == 0
                    )
                    && !IgnoreBarcodeRange.Contains(barcode.CurrentString)
                    && Filter(barcode)
                   )
                {
                    matchRanges.Add(barcode);
                }
            }



            //匹配数量
            var totalCount = 0m;
            var total = 0m;
            var enableMarketing = false;
            switch (MeteringMode)
            {
                case Marketings.MeteringMode.GuDingLiang://固定量
                    totalCount = matchRanges.Sum(o => o.SaleNumber);
                    enableMarketing = RuleNumber <= totalCount;
                    break;
                case Marketings.MeteringMode.QiGouLiang://起购量
                    totalCount = matchRanges.Sum(o => o.SaleNumber);
                    enableMarketing = RuleNumber <= totalCount;
                    break;
                case Marketings.MeteringMode.ManYuan://满元
                    total = matchRanges.Sum(o => o.SaleNumber * o.SalePrice);
                    enableMarketing = RuleNumber <= total;
                    break;
            }
            if (MarketingType.Danpinzhekou == this.Type && enableMarketing)//单品折扣 以规则数量最大者为最优，起购量与固定量为互斥条件，不能同时作用在一个商品上
            {
                foreach (var match in matchRanges)
                {
                    foreach (var marketing in match.MarketingMarks)
                    {
                        if (marketing.IsTimeOut)
                        {
                            break;
                        }
                        if (marketing.Type == this.Type && marketing.Id != this.Id)
                        {
                            enableMarketing = marketing.RuleNumber < this.RuleNumber;
                            if (enableMarketing)
                            {
                                marketing.IsTimeOut = true;
                            }
                            break;
                        }
                    }
                }
            }
            if (enableMarketing)//返回初始匹配结果
            {
                result = new MarketingContext();
                result.MarketingRule = this;
                result.MatchRanges = matchRanges;
                result.ProductCount = totalCount;
                result.ProductTotal = total;
                foreach (var match in matchRanges) //记录已匹配的促销
                {
                    match.MarketingMarks.RemoveAll(o => o.IsTimeOut);
                    match.MarketingMarks.Add(this);
                }

            }
        Return:
            return result;
        }
        /// <summary>
        /// 过滤已优惠的条码(除单品折扣外都不允许重复)
        /// </summary>
        /// <param name="barcode"></param>
        /// <returns></returns>
        internal bool Filter(IBarcode barcode)
        {
            return barcode.MarketingMarks.Exists(o => o.Type == this.Type && o.Type != MarketingType.Danpinzhekou && o.Id != this.Id);
        }
    }
}
