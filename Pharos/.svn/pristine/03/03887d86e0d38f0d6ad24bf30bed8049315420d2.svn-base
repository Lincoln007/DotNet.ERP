using Pharos.Logic.OMS;
using Pharos.Logic.OMS.Entity;
using Pharos.Logic.OMS.Models;
using QCT.Pay.Common;
using QCT.Pay.Common.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Pharos.Utility.Helpers;
using QCT.Pay.Common.Models;

namespace QCT.Api.Pay.Utils
{
    /// <summary>
    /// 创建生成被扫支付订单
    /// </summary>
    public class OrderBuilderForPayMerchScan : OrderBuilder<PayMerchScanRequest, PayMerchScanResponse>
    {
        /// <summary>
        /// 创建生成被扫支付订单
        /// </summary>
        /// <param name="reqModel"></param>
        /// <returns></returns>
        public override QctPayReturn Build(PayMerchScanRequest reqModel)
        {
            WithReqModel(reqModel);
            WithOutTradeNo(reqModel.OutTradeNo);
            var canObj = CanBuilder();
            if (!canObj.Successed)
                return canObj;
            else
            {
                var tradeOrder = new TradeOrder(ReqModel, MerchStoreModel);
                tradeOrder.BuyerPayToken = ReqModel.BuyerPayToken;
                var result = PaySvc.SaveTradeOrder(tradeOrder);
                if (result)
                {
                    //构建Sxf请求参数，签名，发起请求
                    var sxfReqModel = new SxfScanPayRequest(tradeOrder, PayConfig.SxfNotifyUrl);
                    var rstObj = SendPost<SxfScanPayRequest, SxfScanPayResponse>(PayConfig.SxfPayUrl, sxfReqModel);
                    if (rstObj.Successed)
                    {
                        //处理返回成功结果，保存被扫支付结果，后进行Qct签名并返回结果回发给商户，fishtodo:暂忽略验证Sxf返回的响应结果签名
                        var sxfRspModel = (SxfScanPayResponse)rstObj.Data;
                        PaySvc.SaveMerchScanResult(sxfRspModel, out tradeOrder);
                        var merchScanRsp = new PayMerchScanResponse(tradeOrder, sxfRspModel);
                        return QctPayReturn.Success(data:PaySignHelper.ToDicAndSign(merchScanRsp, MerchModel.SecretKey, "sign"));
                    }
                    else
                        return rstObj;
                }
                else
                {
                    return ResultFail(msg: "订单保存失败", logMsg: string.Format("[OrderBuilder记录请求支付订单异常，方法：{0}，请求参数：{1}，异常信息：{2}]", "PayMerchScanOrderBuilder.Build", reqModel.ToJson(), tradeOrder.ToJson()));
                }
            }
        }
    }
}