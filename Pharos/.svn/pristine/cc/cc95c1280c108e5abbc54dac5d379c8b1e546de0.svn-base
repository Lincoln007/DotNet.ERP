using Pharos.Logic.ApiData.Pos.DAL;
using Pharos.Logic.ApiData.Pos.Entity.LocalCeEntity;
using Pharos.SyncService.SyncEntities;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Pharos.SyncService.Client.LocalDataServices
{
    public class SyncStoreUserInfoSyncLocalService : ISyncDataService
    {
        public IEnumerable<ISyncDataObject> GetSyncObjects(int companyId, string storeId)
        {
            try
            {
                using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
                {
                    var result = db.SysStoreUserInfos.Where(o => o.CompanyId == companyId).Select(o => new SyncDataObject() { SyncItemId = o.SyncItemId, SyncItemVersion = o.SyncItemVersion }).ToList();
                    return result;
                }
            }
            catch
            {
                return new List<ISyncDataObject>();
            }
        }

        public ISyncDataObject GetItem(Guid guid, int companyId, string storeId)
        {
            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                return db.SysStoreUserInfos
                    .Select(o => new SingleSyncDataObject<SysStoreUserInfo>()
                    {
                        Enity = o,
                        SyncItemId = o.SyncItemId,
                        SyncItemVersion = o.SyncItemVersion
                    })
                    .FirstOrDefault(o => o.Enity.SyncItemId == guid && o.Enity.CompanyId == companyId);
            }
        }

        public void CreateItem(ISyncDataObject data, Guid guid, int companyId, string storeId)
        {
            var temp = data as SingleSyncDataObject<SysStoreUserInfo>;
            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                db.SysStoreUserInfos.Add(temp.Enity);
                db.SaveChanges();
            }
        }

        public byte[] UpdateItem(Guid guid, ISyncDataObject mergedData, int companyId, string storeId)
        {
            var temp = mergedData as SingleSyncDataObject<SysStoreUserInfo>;
            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                var dbEntity = db.SysStoreUserInfos.FirstOrDefault(o => o.SyncItemId == guid && o.CompanyId == companyId);
                temp.InitDbEntity(dbEntity);
                db.SaveChanges();
                dbEntity = db.SysStoreUserInfos.FirstOrDefault(o => o.SyncItemId == guid);
                return dbEntity.SyncItemVersion;
            }
        }

        public void DeleteItem(Guid syncItemId, int companyId, string storeId)
        {
            using (var db = SyncDbContextFactory.Factory<LocalCeDbContext>())
            {
                var dbEntity = db.SysStoreUserInfos.FirstOrDefault(o => o.SyncItemId == syncItemId && o.CompanyId == companyId);
                db.SysStoreUserInfos.Remove(dbEntity);
                db.SaveChanges();
            }
        }
        /// <summary>
        /// 冲突合并
        /// </summary>
        /// <param name="syncDataObject1">本地数据</param>
        /// <param name="syncDataObject2">远程数据</param>
        /// <returns>合并冲突对象</returns>
        public ISyncDataObject Merge(ISyncDataObject local, ISyncDataObject remote, int companyId, string storeId)
        {
            var tempLocal = local as SingleSyncDataObject<SysStoreUserInfo>;
            var tempRemote = remote as SingleSyncDataObject<SysStoreUserInfo>;

            if (tempLocal.Enity.LoginDT != tempRemote.Enity.LoginDT)
            {
                tempRemote.Enity.LoginDT = tempLocal.Enity.LoginDT;
                tempRemote.Enity.SyncItemVersion = tempLocal.Enity.SyncItemVersion;
            }
            return tempRemote;
        }
    }
}
