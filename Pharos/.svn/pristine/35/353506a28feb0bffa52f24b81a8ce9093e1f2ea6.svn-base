using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;
using System.Text;
using Pharos.Logic.Entity;
using System.Collections.Specialized;
using Pharos.Utility.Helpers;
using Pharos.Utility;
namespace Pharos.Logic.BLL
{
    public class STHourseMoveService : BaseService<HouseMove>
    {
        /// <summary>
        /// 用于调入管理datagrid列表
        /// </summary>
        /// <param name="nvl">传递条件</param>
        /// <param name="count">返回总行数</param>
        /// <returns>list</returns>
        public static object FindMoveinList(NameValueCollection nvl, out int count)
        {
            var queryHouse = CurrentRepository.QueryEntity;
            var state = nvl["state"];
            var outStore = nvl["outStore"];
            var queryHouseList = BaseService<HouseMoveList>.CurrentRepository.QueryEntity;
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
            var queryStore = WarehouseService.CurrentRepository.QueryEntity;
            if (!state.IsNullOrEmpty())
            {
                var st = short.Parse(state);
                queryHouse = queryHouse.Where(o => o.State == st);
            }
            if (!outStore.IsNullOrEmpty())
            {
                queryHouse = queryHouse.Where(o => o.OutStoreId == outStore);
            }
            var type = typeof(HouseMoveState);
            var query = from a in queryHouse
                        from x in queryHouseList
                        from b in queryProduct
                        join c in queryStore on a.InStoreId equals c.StoreId into tempIn
                        join d in queryStore on a.OutStoreId equals d.StoreId into tempOut
                        from tin in tempIn.DefaultIfEmpty()
                        from tout in tempOut.DefaultIfEmpty()
                        where a.MoveId==x.MoveId && x.Barcode == b.Barcode
                        select new
                        {
                            a.Id,
                            a.MoveId,
                            InStoreTitle = tin.Title,
                            OutStoreTitle = tout.Title,
                            InStoreId = tin.StoreId,
                            OutStoreId = tout.StoreId,
                            a.CreateDT,//申请时间
                            a.DeliveryDT,//调出时间
                            x.Barcode,
                            b.ProductCode,
                            b.Title,
                            b.SubUnit,
                            b.BrandTitle,
                            x.SysPrice,
                            x.OrderQuantity,
                            x.DeliveryQuantity,
                            x.ActualQuantity,
                            x.ActualDT,//收货时间
                            x.State,//明细状态
                            tin.StoreId
                        };
            if (!Sys.CurrentUser.StoreId.IsNullOrEmpty())
                query = query.Where(o => (o.InStoreId == Sys.CurrentUser.StoreId)); //|| o.OutStoreId == Sys.CurrentUser.StoreId
            count = query.Count();
            return query.ToPageList().Select(o => new
            {
                o.Id,
                o.MoveId,
                o.InStoreTitle ,
                o.OutStoreTitle ,
                o.InStoreId,
                o.OutStoreId,
                o.CreateDT,//申请时间
                o.DeliveryDT,//调出时间
                o.Barcode,
                o.ProductCode,
                o.Title,
                o.SubUnit,
                o.BrandTitle,
                o.SysPrice,
                o.OrderQuantity,
                o.DeliveryQuantity,
                o.ActualQuantity,
                o.ActualDT,//收货时间
                o.State,//明细状态
                CreateDate = o.CreateDT.ToString("yyyy-MM-dd"),
                DeliveryDate = o.DeliveryDT.IsNullOrEmpty()?"":o.DeliveryDT.Value.ToString("yyyy-MM-dd"),
                ActualDate = o.ActualDT.IsNullOrEmpty()?"":o.ActualDT.Value.ToString("yyyy-MM-dd"), 

                StateTitle = Enum.GetName(type, o.State)
            }).ToList();
        }

        /// <summary>
        /// 用于调出管理datagrid列表
        /// </summary>
        /// <param name="nvl">传递条件</param>
        /// <param name="count">返回总行数</param>
        /// <returns>list</returns>
        public static object FindMoveoutList(NameValueCollection nvl, out int count)
        {
            var queryHouse = CurrentRepository.QueryEntity;
            var state = nvl["state"];
            var inStore = nvl["inStore"];
            var queryHouseList = BaseService<HouseMoveList>.CurrentRepository.QueryEntity;
            var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
            var queryStore = WarehouseService.CurrentRepository.QueryEntity;
            if (!state.IsNullOrEmpty())
            {
                var st = short.Parse(state);
                queryHouse = queryHouse.Where(o => o.State == st);
            }
            if (!inStore.IsNullOrEmpty())
            {
                queryHouse = queryHouse.Where(o => o.OutStoreId == inStore);
            }
            var type = typeof(HouseMoveState);
            var query = from a in queryHouse
                        from x in queryHouseList
                        from b in queryProduct
                        join c in queryStore on a.InStoreId equals c.StoreId into tempIn
                        join d in queryStore on a.OutStoreId equals d.StoreId into tempOut
                        from tin in tempIn.DefaultIfEmpty()
                        from tout in tempOut.DefaultIfEmpty()
                        where a.MoveId == x.MoveId && x.Barcode == b.Barcode
                        select new
                        {
                            a.Id,
                            a.MoveId,
                            InStoreTitle = tin.Title,
                            OutStoreTitle = tout.Title,
                            InStoreId = tin.StoreId,
                            OutStoreId = tout.StoreId,
                            a.CreateDT,//申请时间
                            a.DeliveryDT,//调出时间
                            x.Barcode,
                            b.ProductCode,
                            b.Title,
                            b.SubUnit,
                            b.BrandTitle,
                            x.SysPrice,
                            x.OrderQuantity,
                            x.DeliveryQuantity,
                            x.ActualQuantity,
                            x.ActualDT,//收货时间
                            x.State,//明细状态
                            tin.StoreId
                        };
            if (!Sys.CurrentUser.StoreId.IsNullOrEmpty())
                query = query.Where(o => (o.OutStoreId == Sys.CurrentUser.StoreId)); //|| o.InStoreId == Sys.CurrentUser.StoreId
            count = query.Count();
            return query.ToPageList().Select(o => new
            {
                o.Id,
                o.MoveId,
                o.InStoreTitle,
                o.OutStoreTitle,
                o.InStoreId,
                o.OutStoreId,
                o.CreateDT,//申请时间
                o.DeliveryDT,//调出时间
                o.Barcode,
                o.ProductCode,
                o.Title,
                o.SubUnit,
                o.BrandTitle,
                o.SysPrice,
                o.OrderQuantity,
                o.DeliveryQuantity,
                o.ActualQuantity,
                o.ActualDT,//收货时间
                o.State,//明细状态
                CreateDate = o.CreateDT.ToString("yyyy-MM-dd"),
                DeliveryDate = o.DeliveryDT.IsNullOrEmpty() ? "" : o.DeliveryDT.Value.ToString("yyyy-MM-dd"),
                ActualDate = o.ActualDT.IsNullOrEmpty() ? "" : o.ActualDT.Value.ToString("yyyy-MM-dd"),

                StateTitle = Enum.GetName(type, o.State)
            }).ToList();
        }

        /// <summary>
        /// 保存
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        //public static OpResult SaveOrUpdate(STHouseMove obj)
        //{
        //    var op = new OpResult();
        //    try
        //    {
        //        if (obj.Id.IsNullOrEmpty())
        //        {
        //            obj.Id = CommonRules.GUID;
        //            obj.CreateDT = DateTime.Now;
        //            obj.CreateUID = Sys.CurrentUser.UID;
        //            obj.State = (short)HouseMoveState.调拨中;
        //            op = Add(obj);
        //        }
        //        else
        //        {
        //            op = Update(obj);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        op.Message = ex.Message;
        //    }
        //    return op;
        //}


        /// <summary>
        /// 显示扩展属性
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        //public static object FindAllById(string id)
        //{
        //    var queryHouse = CurrentRepository.QueryEntity;
        //    var queryProduct = BaseService<VwProduct>.CurrentRepository.QueryEntity;
        //    var queryStore = WarehouseService.CurrentRepository.QueryEntity;
        //    var query = from a in queryHouse
        //                from b in queryProduct
        //                join c in queryStore on a.InStoreId equals c.StoreId into tempIn
        //                join d in queryStore on a.OutStoreId equals d.StoreId into tempOut
        //                from tin in tempIn.DefaultIfEmpty()
        //                from tout in tempOut.DefaultIfEmpty()
        //                where a.Barcode == b.Barcode && a.Id == id
        //                select new
        //                {
        //                    a.Id,
        //                    InStoreTitle = tin.Title,
        //                    OutStoreTitle = tout.Title,
        //                    b.ProductCode,
        //                    b.Barcode,
        //                    b.Title,
        //                    b.BrandTitle,
        //                    b.SubUnit,
        //                    b.SysPrice,
        //                    a.OrderQuantity,
        //                    a.DeliveryQuantity,
        //                    a.ActualQuantity,
        //                    a.CreateDT,
        //                    a.State,
        //                    a.Memo
        //                };
        //    var obj = query.FirstOrDefault();
        //    return obj;
        //}
        public static OpResult Receiver(STHouseMove obj)
        {
            var op = new OpResult();
            try
            {
                var house = DiaoboService.FindById(obj.Id);
                house.State = (short)HouseMoveState.已收货;
                house.ActualUID = Sys.CurrentUser.UID;
                house.ActualQuantity = obj.ActualQuantity;
                InventoryRecordService.SaveLog(new List<InventoryRecord>(){
                    new InventoryRecord(){Barcode=house.Barcode,StoreId=house.InStoreId,Source=3,Number=house.ActualQuantity},
                    new InventoryRecord(){Barcode=house.Barcode,StoreId=house.OutStoreId,Source=4,Number=house.ActualQuantity}
                });

                op = DiaoboService.Update(house);
            }
            catch (Exception ex)
            {
                op.Message = ex.Message;
            }
            return op;
        }
    }
}
