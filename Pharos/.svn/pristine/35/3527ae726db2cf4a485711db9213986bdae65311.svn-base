using Common.Logging;
using Microsoft.Synchronization;
using Microsoft.Synchronization.Files;
using Pharos.SyncService.SyncProviders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Pharos.SyncService
{
    public class SyncController
    {

        public void DoSynchronize(int companyId, string storeId, string endpointConfigurationName, LocalSyncContext localSyncContext)
        {
            foreach (var item in localSyncContext.ServiceMappings)
            {
                var task = Task.Factory.StartNew((o) =>
                 {
                     while (true)
                     {
                         try
                         {
                             SyncOrchestrator SyncOrchestrator = new Microsoft.Synchronization.SyncOrchestrator();
                             var temp = (KeyValuePair<string, ISyncDataService>)o;
                             var localProvider = new PosDbSyncProvider(companyId, storeId, temp.Value);
                             localProvider.DestinationCallbacks.ProgressChanged += DestinationCallbacks_ProgressChanged;
                             if (temp.Value.SyncDirectionOrder == SyncDirectionOrder.Download)
                             {
                                 localProvider.Configuration.ConflictResolutionPolicy = ConflictResolutionPolicy.SourceWins;
                             }
                             else
                             {
                                 localProvider.Configuration.ConflictResolutionPolicy = ConflictResolutionPolicy.ApplicationDefined;
                                 localProvider.DestinationCallbacks.ItemConflicting += LocalItemConflicting;
                             }
                             var remoteProvider = new RemoteProviderProxy(companyId, storeId, endpointConfigurationName, temp.Key);

                             SyncOrchestrator.LocalProvider = localProvider;
                             SyncOrchestrator.RemoteProvider = remoteProvider;
                             SyncOrchestrator.Direction = temp.Value.SyncDirectionOrder;
                             SyncOperationStatisticsShow(SyncOrchestrator.Synchronize(), temp.Value.SyncDirectionOrder, temp.Key);
                             Thread.Sleep(temp.Value.SyncInterval);
                         }
                         catch (Exception ex)
                         {
                             ILog logger = LogManager.GetLogger(Assembly.GetExecutingAssembly().GetName().Name);
                             logger.Error(ex.Message, ex);
                             //DO log
                         }
                     }
                 }, item);
            }
        }

        private void DestinationCallbacks_ProgressChanged(object sender, SyncStagedProgressEventArgs e)
        {
            Console.WriteLine(e.CompletedWork + "/" + e.TotalWork);
        }

        private void LocalItemConflicting(object sender, ItemConflictingEventArgs e)
        {
            switch (e.DestinationChange.ChangeKind)
            {
                case ChangeKind.Deleted:
                    e.SetResolutionAction(ConflictResolutionAction.SourceWins);
                    break;
                case ChangeKind.UnknownItem:
                    e.SetResolutionAction(ConflictResolutionAction.SourceWins);
                    break;
                case ChangeKind.Update:
                    e.SetResolutionAction(ConflictResolutionAction.Merge);
                    break;
            }
        }
        public void SyncOperationStatisticsShow(SyncOperationStatistics syncOperationStatistics, SyncDirectionOrder _SyncDirectionOrder, string name)
        {
            Console.WriteLine(name);
            Console.WriteLine("{1} Download Applied:\t {0}", syncOperationStatistics.DownloadChangesApplied, _SyncDirectionOrder);
            Console.WriteLine("{1} Download Failed:\t {0}", syncOperationStatistics.DownloadChangesFailed, _SyncDirectionOrder);
            Console.WriteLine("{1} Download Total:\t\t {0}", syncOperationStatistics.DownloadChangesTotal, _SyncDirectionOrder);
            Console.WriteLine("{1} Upload Applied Total:\t\t {0}", syncOperationStatistics.UploadChangesApplied, _SyncDirectionOrder);
            Console.WriteLine("{1} Upload Failed Total:\t\t {0}", syncOperationStatistics.UploadChangesFailed, _SyncDirectionOrder);
            Console.WriteLine("{1} Upload Total:\t\t {0}", syncOperationStatistics.UploadChangesTotal, _SyncDirectionOrder);
        }

    }
}
